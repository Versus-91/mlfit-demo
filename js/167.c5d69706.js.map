{"version":3,"file":"js/167.c5d69706.js","mappings":"YAQAA,eAAeC,IAEXC,KAAKC,cAAgBC,oBACfF,KAAKC,QAAQE,YAAY,CAAC,WAAY,QAAS,aAAc,WACnE,MAAMC,EAAWJ,KAAKC,QAAQI,SAAS,kBACjCD,EAASE,QAAQ,UAC3B,CARAC,cAAc,4DASd,IAAIC,EAAsBT,IAE1BC,KAAKS,UAAYX,gBAEPU,EAEN,MAAM,GAAEE,EAAE,OAAEC,KAAWC,GAAYC,EAAMC,KAEzC,IAAK,MAAMC,KAAOC,OAAOC,KAAKL,GAC1BZ,KAAKe,GAAOH,EAAQG,GAGxB,UACUf,KAAKC,QAAQiB,wBAAwBP,GAC3C,IAAIQ,QAAgBnB,KAAKC,QAAQmB,eAAeT,GAChD,MAAMU,EAASF,EAAQG,OACvBtB,KAAKuB,YAAY,CAAEJ,QAASE,EAAQX,MACxC,CAAE,MAAOc,GACLxB,KAAKuB,YAAY,CAAEC,MAAOA,EAAMC,QAASf,MAC7C,E","sources":["webpack://mlfit/./src/helpers/sns-py.js"],"sourcesContent":["// webworker.js\n\n// Setup your project to serve `py-worker.js`. You should also serve\n// `pyodide.js`, and all its associated `.asm.js`, `.json`,\n// and `.wasm` files as well:\n// eslint-disable-next-line no-undef\nimportScripts(\"https://cdn.jsdelivr.net/pyodide/v0.26.2/full/pyodide.js\");\n\nasync function loadPyodideAndPackages() {\n    // eslint-disable-next-line no-undef\n    self.pyodide = await loadPyodide();\n    await self.pyodide.loadPackage([\"micropip\", \"scipy\", \"matplotlib\", \"pandas\"]);\n    const micropip = self.pyodide.pyimport(\"micropip\");\n    await micropip.install('seaborn');\n}\nlet pyodideReadyPromise = loadPyodideAndPackages();\n\nself.onmessage = async (event) => {\n    // make sure loading is done\n    await pyodideReadyPromise;\n    // Don't bother yet with this line, suppose our API is built in such a way:\n    const { id, python, ...context } = event.data;\n    // The worker copies the context in its own \"memory\" (an object mapping name to values)\n    for (const key of Object.keys(context)) {\n        self[key] = context[key];\n    }\n    // Now is the easy part, the one that is similar to working in the main thread:\n    try {\n        await self.pyodide.loadPackagesFromImports(python);\n        let results = await self.pyodide.runPythonAsync(python);\n        const result = results.toJs()\n        self.postMessage({ results: result, id });\n    } catch (error) {\n        self.postMessage({ error: error.message, id });\n    }\n};"],"names":["async","loadPyodideAndPackages","self","pyodide","loadPyodide","loadPackage","micropip","pyimport","install","importScripts","pyodideReadyPromise","onmessage","id","python","context","event","data","key","Object","keys","loadPackagesFromImports","results","runPythonAsync","result","toJs","postMessage","error","message"],"sourceRoot":""}