{"version":3,"file":"js/app.4ef56171.js","mappings":"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","sources":["webpack://mlfit/./src/App.vue","webpack://mlfit/./src/components/sidebar-component.vue","webpack://mlfit/./src/components/upload-component.vue","webpack://mlfit/./src/helpers/parser/parser.js","webpack://mlfit/./src/helpers/parser/csv_parser.js","webpack://mlfit/./src/helpers/parser/xlx_parser.js","webpack://mlfit/./src/helpers/parser/txt_parser.js","webpack://mlfit/./src/helpers/parser/parser_factory.js","webpack://mlfit/./src/stores/settings.js","webpack://mlfit/src/components/upload-component.vue","webpack://mlfit/./src/components/upload-component.vue?4aa8","webpack://mlfit/./src/components/upload-component.vue?14a8","webpack://mlfit/./src/helpers/settings.js","webpack://mlfit/./src/helpers/py-worker.js","webpack://mlfit/./src/helpers/dimensionality-reduction/pca.js","webpack://mlfit/./src/helpers/utils.js","webpack://mlfit/./src/helpers/dimensionality-reduction/tsne.js","webpack://mlfit/./src/helpers/charts.js","webpack://mlfit/./src/helpers/ui.js","webpack://mlfit/./src/helpers/model.js","webpack://mlfit/./src/helpers/classification/logistic_regression.js","webpack://mlfit/./src/helpers/regression_model.js","webpack://mlfit/./src/helpers/regression/linear_regression.js","webpack://mlfit/./src/helpers/regression/bspline_regression.js","webpack://mlfit/./src/helpers/classification/svm.js","webpack://mlfit/./src/helpers/regression/svm.js","webpack://mlfit/./src/helpers/classification/knn.js","webpack://mlfit/./src/helpers/regression/knn_regressor.js","webpack://mlfit/./src/helpers/classification/random_forest.js","webpack://mlfit/./src/helpers/regression/random_forest.js","webpack://mlfit/./src/helpers/classification/NaiveBayes.js","webpack://mlfit/./src/helpers/classification/lda.js","webpack://mlfit/./src/helpers/regression/polynomial_regression.js","webpack://mlfit/./src/helpers/regression/kernel_regression.js","webpack://mlfit/./src/helpers/classification/boosting.js","webpack://mlfit/./src/helpers/regression/boosting.js","webpack://mlfit/./src/helpers/model_factory.js","webpack://mlfit/src/components/sidebar-component.vue","webpack://mlfit/./src/components/sidebar-component.vue?5c0f","webpack://mlfit/./src/components/sidebar-component.vue?e4f8","webpack://mlfit/./src/components/main-component.vue","webpack://mlfit/./src/components/tabs/dmensionality-reduction-componenet.vue","webpack://mlfit/src/components/tabs/dmensionality-reduction-componenet.vue","webpack://mlfit/./src/components/tabs/dmensionality-reduction-componenet.vue?9063","webpack://mlfit/./src/components/tabs/dmensionality-reduction-componenet.vue?359e","webpack://mlfit/./src/components/tabs/results-component.vue","webpack://mlfit/./src/components/tabs/classification-view-component.vue","webpack://mlfit/src/components/tabs/classification-view-component.vue","webpack://mlfit/./src/components/tabs/classification-view-component.vue?e406","webpack://mlfit/./src/components/tabs/classification-view-component.vue?de8c","webpack://mlfit/./src/components/tabs/regression-view-component.vue","webpack://mlfit/src/components/tabs/regression-view-component.vue","webpack://mlfit/./src/components/tabs/regression-view-component.vue?6ab4","webpack://mlfit/./src/components/tabs/regression-view-component.vue?8435","webpack://mlfit/src/components/tabs/results-component.vue","webpack://mlfit/./src/components/tabs/results-component.vue?b709","webpack://mlfit/./src/components/tabs/results-component.vue?73e9","webpack://mlfit/./src/components/visualization/scatterplot-matrix-component.vue","webpack://mlfit/./src/components/visualization/parallel-coordinate-plot-component.vue","webpack://mlfit/src/components/visualization/parallel-coordinate-plot-component.vue","webpack://mlfit/./src/components/visualization/parallel-coordinate-plot-component.vue?23a4","webpack://mlfit/./src/components/visualization/parallel-coordinate-plot-component.vue?081d","webpack://mlfit/src/components/visualization/scatterplot-matrix-component.vue","webpack://mlfit/./src/components/visualization/scatterplot-matrix-component.vue?4516","webpack://mlfit/./src/components/visualization/scatterplot-matrix-component.vue?dd01","webpack://mlfit/./src/components/tabs/methods-tab-component.vue","webpack://mlfit/src/components/tabs/methods-tab-component.vue","webpack://mlfit/./src/components/tabs/methods-tab-component.vue?7317","webpack://mlfit/./src/components/tabs/methods-tab-component.vue?411b","webpack://mlfit/./src/helpers/sns-worker.js","webpack://mlfit/./src/helpers/correlation/correlation-matrix.js","webpack://mlfit/src/components/main-component.vue","webpack://mlfit/./src/components/main-component.vue?f8f6","webpack://mlfit/./src/components/main-component.vue?26f6","webpack://mlfit/src/App.vue","webpack://mlfit/./src/App.vue?c036","webpack://mlfit/./src/App.vue?0e40","webpack://mlfit/./src/main.js","webpack://mlfit/webpack/bootstrap","webpack://mlfit/webpack/runtime/amd define","webpack://mlfit/webpack/runtime/amd options","webpack://mlfit/webpack/runtime/chunk loaded","webpack://mlfit/webpack/runtime/compat get default export","webpack://mlfit/webpack/runtime/define property getters","webpack://mlfit/webpack/runtime/get javascript chunk filename","webpack://mlfit/webpack/runtime/global","webpack://mlfit/webpack/runtime/hasOwnProperty shorthand","webpack://mlfit/webpack/runtime/make namespace object","webpack://mlfit/webpack/runtime/node module decorator","webpack://mlfit/webpack/runtime/publicPath","webpack://mlfit/webpack/runtime/jsonp chunk loading","webpack://mlfit/webpack/startup"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"container\"},[_c('b-notification',{directives:[{name:\"show\",rawName:\"v-show\",value:(this.settings.getDatasizeFlag),expression:\"this.settings.getDatasizeFlag\"}],staticClass:\"mt-2\",attrs:{\"type\":\"is-warning\",\"has-icon\":\"\",\"aria-close-label\":\"Close notification\",\"role\":\"alert\"}},[_vm._v(\" Due to the large size of dataset only 10,000 radom samples from dataset would be used. \")]),_c('div',{staticClass:\"columns is-multiline\",attrs:{\"id\":\"app\"}},[_c('SidebarComponent',{ref:\"sidebar\",on:{\"updateFeatures\":_vm.updateFeatureStats}}),_c('MainComponent',{ref:\"main\",attrs:{\"dataframe\":this.settings.df},on:{\"check-target\":function($event){return _vm.checkTarget()}}})],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"column is-2 has-background-info-light\",staticStyle:{\"height\":\"100%\"}},[_vm._m(0),_c('section',[_c('upload-component',{on:{\"uploaded\":_vm.generateTargetDropdown,\"uploaded-file\":_vm.setFile}}),_c('div',{staticClass:\"column is-12\"},[_c('b-field',{attrs:{\"label\":\"Seed\",\"label-position\":'on-border'}},[_c('b-input',{attrs:{\"size\":\"is-small\",\"placeholder\":\"Seed\",\"type\":\"number\",\"min\":\"0\"},model:{value:(_vm.seed),callback:function ($$v) {_vm.seed=$$v},expression:\"seed\"}})],1),_c('b-field',{attrs:{\"label\":\"Target\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},on:{\"input\":_vm.checkmodelTask},model:{value:(_vm.modelTarget),callback:function ($$v) {_vm.modelTarget=$$v},expression:\"modelTarget\"}},_vm._l((_vm.columns),function(option){return _c('option',{key:option,domProps:{\"value\":option}},[_vm._v(\" \"+_vm._s(option)+\" \")])}),0)],1),_c('b-field',{attrs:{\"label\":\"Imputation\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},model:{value:(_vm.imputationOption),callback:function ($$v) {_vm.imputationOption=$$v},expression:\"imputationOption\"}},_vm._l((_vm.imputationOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.label)+\" \")])}),0)],1),_c('b-field',{attrs:{\"label\":\"Cross Validation\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},model:{value:(_vm.crossValidationOption),callback:function ($$v) {_vm.crossValidationOption=$$v},expression:\"crossValidationOption\"}},_vm._l((_vm.crossValidationOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.label)+\" \")])}),0)],1),_c('b-field',{attrs:{\"label\":\"Model\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"disabled\":_vm.tuneModel,\"expanded\":true,\"size\":\"is-small\"},model:{value:(_vm.modelOption),callback:function ($$v) {_vm.modelOption=$$v},expression:\"modelOption\"}},_vm._l((_vm.modelOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.title)+\" \")])}),0),_c('b-button',{attrs:{\"size\":\"is-small\",\"icon-pack\":\"fas\",\"icon-left\":!this.tuneModel ? 'cog' : 'arrow-left'},on:{\"click\":_vm.configureModel}})],1),(_vm.tuneModel)?_c('section',{staticClass:\"mx-1\"},_vm._l((_vm.modelConfigurations),function(option,i){return _c('b-field',{key:i,attrs:{\"label\":option.label,\"label-position\":'on-border'}},[(option.type === 'select')?_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},model:{value:(option.value),callback:function ($$v) {_vm.$set(option, \"value\", $$v)},expression:\"option.value\"}},_vm._l((option.values),function(item,index){return _c('option',{key:index,domProps:{\"value\":item.value}},[_vm._v(\" \"+_vm._s(item.label)+\" \")])}),0):(option.type === 'number')?_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\"},model:{value:(option.value),callback:function ($$v) {_vm.$set(option, \"value\", $$v)},expression:\"option.value\"}}):(option.type === 'text')?_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"text\"},model:{value:(option.value),callback:function ($$v) {_vm.$set(option, \"value\", $$v)},expression:\"option.value\"}}):_vm._e()],1)}),1):_vm._e(),_c('b-field',[_c('b-checkbox',{attrs:{\"size\":\"is-small\"},model:{value:(_vm.dataScalingBehavior),callback:function ($$v) {_vm.dataScalingBehavior=$$v},expression:\"dataScalingBehavior\"}},[_vm._v(\"Standardize by default\")])],1),_c('b-field',[_c('b-checkbox',{attrs:{\"size\":\"is-small\"},model:{value:(_vm.explainModel),callback:function ($$v) {_vm.explainModel=$$v},expression:\"explainModel\"}},[_vm._v(\"Explain the model\")])],1),_c('b-field',[_c('b-checkbox',{attrs:{\"size\":\"is-small\"},model:{value:(_vm.usePCAs),callback:function ($$v) {_vm.usePCAs=$$v},expression:\"usePCAs\"}},[_vm._v(\"Use PC components\")])],1),(_vm.usePCAs)?_c('b-field',{attrs:{\"label\":\"Number of Components\",\"label-position\":'on-border'}},[_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\"},model:{value:(_vm.numberOfComponents),callback:function ($$v) {_vm.numberOfComponents=$$v},expression:\"numberOfComponents\"}})],1):_vm._e(),_c('b-field',[_c('b-checkbox',{attrs:{\"size\":\"is-small\"},model:{value:(_vm.useHPC),callback:function ($$v) {_vm.useHPC=$$v},expression:\"useHPC\"}},[_vm._v(\"Use HPC resources\")])],1),_c('b-field',[_c('b-button',{attrs:{\"size\":\"is-small\",\"icon-pack\":\"fas\",\"icon-left\":\"play\",\"loading\":_vm.training,\"disabled\":!_vm.dataframe || _vm.modelOption == null},on:{\"click\":_vm.train}},[_vm._v(\" train\")]),_c('button',{staticClass:\"button is-small\",on:{\"click\":function($event){return _vm.upload()}}},[_vm._v(\"Upload to HPC server\")])],1),_c('b-loading',{attrs:{\"is-full-page\":false},model:{value:(_vm.training),callback:function ($$v) {_vm.training=$$v},expression:\"training\"}})],1)],1)])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('figure',{staticClass:\"image is-96x96\"},[_c('img',{attrs:{\"src\":\"/logo.png\"}})])\n}]\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"column is-12 has-background-light\"},[_c('b-field',{staticClass:\"file is-success is-fullwidth\",class:{ 'has-name': !!_vm.file }},[_c('b-upload',{staticClass:\"file-label\",attrs:{\"accept\":\".csv,.txt,.xlsx\"},model:{value:(_vm.file),callback:function ($$v) {_vm.file=$$v},expression:\"file\"}},[_c('a',{staticClass:\"button is-success is-small is-fullwidth\"},[_c('b-icon',{staticClass:\"file-icon\",attrs:{\"pack\":\"fas\",\"icon\":\"upload\"}}),_c('span',{staticClass:\"file-label\"},[_vm._v(_vm._s(this.settings.datasetName || \"Upload\"))])],1)])],1),_c('b-field',[_c('b-checkbox',{attrs:{\"size\":\"is-small\"},model:{value:(_vm.header),callback:function ($$v) {_vm.header=$$v},expression:\"header\"}},[_vm._v(\"Header\")])],1),_c('b-field',{attrs:{\"label\":\"Separator\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},model:{value:(_vm.separator),callback:function ($$v) {_vm.separator=$$v},expression:\"separator\"}},_vm._l((_vm.separatorOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.label)+\" \")])}),0)],1),_c('b-field',{attrs:{\"label\":\"Decimal\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\",\"label-position\":'on-border'},model:{value:(_vm.decimal),callback:function ($$v) {_vm.decimal=$$v},expression:\"decimal\"}},_vm._l((_vm.decimalOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.label)+\" \")])}),0)],1),_c('b-field',[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},on:{\"input\":_vm.handleFileSelect},model:{value:(_vm.sampleDataset),callback:function ($$v) {_vm.sampleDataset=$$v},expression:\"sampleDataset\"}},_vm._l((_vm.samplDataOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.name}},[_vm._v(\" \"+_vm._s(option.label)+\" \")])}),0)],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/* eslint-disable no-unused-vars */\nexport class DataParser {\n    parse(_content) {\n        throw new Error(\"Not implemented.\")\n    }\n}","import { DataParser } from './parser';\nimport Papa from 'papaparse';\n\nexport class CSVParser extends DataParser {\n    constructor(options) {\n        super();\n        this.separators = { 0: ',', 1: '.', 2: ',', 3: ' ' }\n        this.separator = options.separator;\n        this.delimiter = options.delimiter;\n        this.has_header = options.header\n    }\n    parse(content) {\n        return new Promise((resolve) => {\n            Papa.parse(content, {\n                worker: false,\n                header: this.has_header,\n                delimiter: this.separators[this.separator],\n                transform: (val) => {\n                    if (val === \"?\" || val === \"NA\") {\n                        return NaN\n                    }\n                    return val\n                },\n                // transformHeader: (val) => {\n                //     return val.replace(/[^a-zA-Z0-9 ]/g, \"\").trim()\n                // },\n                skipEmptyLines: true,\n                dynamicTyping: true,\n                complete: async function (result) {\n                    resolve(result.data)\n                }\n            })\n        }\n        )\n    }\n}","/* eslint-disable no-undef */\nimport { DataParser } from './parser';\n\nexport class XLXParser extends DataParser {\n    parse(content) {\n        return new Promise((resolve) => {\n            var reader = new FileReader();\n            reader.onload = function () {\n                var arrayBuffer = this.result,\n                    array = new Uint8Array(arrayBuffer),\n                    binaryString = String.fromCharCode.apply(null, array);\n                var workbook = XLSX.read(binaryString, {\n                    type: \"binary\"\n                });\n                var first_sheet_name = workbook.SheetNames[0];\n                var worksheet = workbook.Sheets[first_sheet_name];\n                resolve(XLSX.utils.sheet_to_json(worksheet, {\n                    raw: true\n                }));\n            }\n            reader.readAsArrayBuffer(content);\n        }\n        )\n    }\n}","import { DataParser } from './parser';\nimport Papa from 'papaparse';\n\nexport class TXTParser extends DataParser {\n    constructor(options) {\n        super();\n        this.separators = { 0: ',', 1: '.', 2: ',', 3: ' ' }\n        this.separator = options.separator;\n        this.delimiter = options.delimiter;\n        this.has_header = options.header\n    }\n    parse(content) {\n        return new Promise((resolve) => {\n            Papa.parse(content, {\n                worker: false,\n                header: this.has_header,\n                delimiter: this.separators[this.separator],\n                transform: (val) => {\n                    if (val === \"?\" || val === \"NA\") {\n                        return NaN\n                    }\n                    return val\n                },\n                // transformHeader: (val) => {\n                //     return val.replace(/[^a-zA-Z0-9 ]/g, \"\").trim()\n                // },\n                skipEmptyLines: true,\n                dynamicTyping: true,\n                complete: async function (result) {\n                    if (this.delimiter == 1) {\n                        for (let i = 0; i < result.data.length; i++) {\n                            const element = result.data[i];\n                            for (let j = 0; j < element.length; j++) {\n                                result.data[i][j] = parseFloat(result.data[i][j].replace(/\\./g, '').replace(',', '.'));\n                            }\n                        }\n                    }\n                    resolve(result.data)\n                }\n            })\n        }\n        )\n    }\n}","import { CSVParser } from './csv_parser'\nimport { XLXParser } from './xlx_parser'\nimport { TXTParser } from './txt_parser'\n\n\nexport class ParserFactory {\n    static createParser(fileType, options) {\n        switch (fileType.toLowerCase()) {\n            case 'csv':\n                return new CSVParser(options);\n            case 'txt': {\n                let parser = new TXTParser(options)\n                return parser\n            }\n            case 'xlsx':\n                return new XLXParser();\n            default:\n                throw new Error(`Unsupported file type: ${fileType}`);\n        }\n    }\n}\n","import { defineStore } from 'pinia'\r\n\r\nexport const settingStore = defineStore({\r\n    id: 'cart',\r\n    state: () => ({\r\n        counter: 1,\r\n        df: {},\r\n        id: null,\r\n        rawData: {},\r\n        features: [],\r\n        transformations: [],\r\n        classTransformations: [],\r\n        results: [],\r\n        messages: [],\r\n        datasetName: '',\r\n        activeTab: 0,\r\n        dataSizeFlag: false,\r\n        resultActiveTab: '',\r\n        datasetShape: {\r\n            count: 0,\r\n            columns: 0\r\n        },\r\n        target: null,\r\n        isClassification: true,\r\n        seed: 123,\r\n    }),\r\n    getters: {\r\n        items: (state) => {\r\n            return state.features\r\n        },\r\n        getDatasizeFlag: (state) => {\r\n            return state.dataSizeFlag\r\n        },\r\n        getCounter: (state) => {\r\n            return state.counter\r\n        },\r\n        getUID: () => {\r\n            let id = Math.random().toString(16).slice(2);\r\n            return id;\r\n        },\r\n        getMessages: (state) => {\r\n            return state.messages.reverse()\r\n        },\r\n        getDatasetName: (state) => {\r\n            return state.datasetName\r\n        },\r\n        getDatasetShape: (state) => {\r\n            return state.datasetShape\r\n        },\r\n        getDataset: (state) => {\r\n            return state.df;\r\n        },\r\n        getRawData: (state) => {\r\n            return state.rawData;\r\n        },\r\n        currentTab: (state) => {\r\n            return state.activeTab\r\n        },\r\n        mergedClasses: (state) => {\r\n            return state.classTransformations\r\n        },\r\n        getSeed: (state) => {\r\n            return state.seed\r\n        },\r\n        getMethodResults: (state) => {\r\n            return state.results\r\n        },\r\n        getResultTab: (state) => {\r\n            return state.resultActiveTab\r\n        },\r\n        outputs: (state) => state.results,\r\n        transformationsList: (state) => state.transformations,\r\n        modelTarget: (state) => state.target,\r\n        classificationTask: (state) => state.isClassification,\r\n    },\r\n    actions: {\r\n        setSeed(seed) {\r\n            this.seed = seed\r\n        },\r\n        setDatasetName(name) {\r\n            this.datasetName = name;\r\n        },\r\n        setDatasetShape(shape) {\r\n            this.datasetShape = shape;\r\n        },\r\n        resetFeatures() {\r\n            this.features = []\r\n            this.transformations = []\r\n            this.classTransformations = []\r\n        },\r\n        resetClassTransformations() {\r\n            this.classTransformations = []\r\n        },\r\n        resetTransformations() {\r\n            this.transformations = []\r\n        },\r\n        setDatasizeFlag(flag) {\r\n            this.dataSizeFlag = flag;\r\n        },\r\n        resetDataset() {\r\n            this.datasetName = '';\r\n            this.datasetShape = {\r\n                count: 0,\r\n                columns: 0\r\n            };\r\n\r\n        },\r\n        increaseCounter() {\r\n            this.counter++;\r\n        },\r\n        setDataframe(data) {\r\n            this.df = data;\r\n        },\r\n        setRawData(data) {\r\n            this.rawData = data;\r\n        },\r\n        addFeature(feature) {\r\n            feature.scaler = 0;\r\n            let index = this.features.findIndex(m => m.name === feature.name);\r\n            if (index !== -1) {\r\n                this.features[index] = feature\r\n                return\r\n            }\r\n            this.features.push(feature)\r\n        },\r\n        setClassTransformation(transformations) {\r\n            this.classTransformations.push(transformations)\r\n        },\r\n\r\n        addTransformation(transformation) {\r\n            let index = this.transformations.findIndex(m => m.name === transformation.name);\r\n            if (index !== -1) {\r\n                this.transformations[index] = transformation\r\n                return\r\n            }\r\n            this.transformations.push(transformation)\r\n        },\r\n        addResult(result) {\r\n            this.results.push(result)\r\n        },\r\n        addMessage(message) {\r\n            var date = new Date();\r\n            message['date'] = date.toLocaleString()\r\n            this.messages.push(message)\r\n        },\r\n        removeResult(id) {\r\n            const i = this.results.findIndex(m => m.id === id)\r\n            if (i > -1) {\r\n                this.results.splice(i, 1);\r\n            }\r\n        },\r\n        getResultVisualizations(id) {\r\n            const i = this.results.findIndex(m => m.id === id)\r\n            if (i > -1) {\r\n                let tables = this.results[i].tables;\r\n                let plots = this.results[i].plots;\r\n                return [tables, plots]\r\n            }\r\n        },\r\n        resetDF() {\r\n            this.df = {}\r\n        },\r\n        updateFeature(feature) {\r\n            let index = this.features.findIndex(m => m.name === feature.name);\r\n            if (index !== -1) {\r\n                this.features[index] = feature\r\n            }\r\n        },\r\n        removeItem(name) {\r\n            const i = this.features.lastIndexOf(name)\r\n            if (i > -1) this.features.splice(i, 1)\r\n        },\r\n        setTarget(target) {\r\n            this.target = target\r\n        },\r\n        setmodelTask(type) {\r\n            this.isClassification = type\r\n        },\r\n        setActiveTab(index) {\r\n            this.activeTab = index\r\n        },\r\n        setResultActiveTab(index) {\r\n            this.resultActiveTab = index\r\n        }\r\n    },\r\n})\r\n\r\n","<template>\r\n    <div class=\"column is-12 has-background-light\">\r\n        <b-field class=\"file is-success is-fullwidth\" :class=\"{ 'has-name': !!file }\">\r\n            <b-upload accept=\".csv,.txt,.xlsx\" v-model=\"file\" class=\"file-label\">\r\n                <a class=\"button is-success is-small is-fullwidth\">\r\n                    <b-icon pack=\"fas\" class=\"file-icon\" icon=\"upload\"></b-icon>\r\n                    <span class=\"file-label\">{{ this.settings.datasetName || \"Upload\" }}</span>\r\n                </a>\r\n            </b-upload>\r\n        </b-field>\r\n        <b-field>\r\n            <b-checkbox size=\"is-small\" v-model=\"header\">Header</b-checkbox>\r\n        </b-field>\r\n        <b-field label=\"Separator\" :label-position=\"'on-border'\">\r\n            <b-select :expanded=\"true\" v-model=\"separator\" size=\"is-small\">\r\n                <option v-for=\"option in separatorOptions\" :value=\"option.id\" :key=\"option.id\">\r\n                    {{ option.label }}\r\n                </option>\r\n            </b-select>\r\n        </b-field>\r\n        <b-field label=\"Decimal\" :label-position=\"'on-border'\">\r\n            <b-select :expanded=\"true\" v-model=\"decimal\" size=\"is-small\" :label-position=\"'on-border'\">\r\n                <option v-for=\"option in decimalOptions\" :value=\"option.id\" :key=\"option.id\">\r\n                    {{ option.label }}\r\n                </option>\r\n            </b-select>\r\n        </b-field>\r\n        <b-field>\r\n            <b-select :expanded=\"true\" @input=\"handleFileSelect\" size=\"is-small\" v-model=\"sampleDataset\">\r\n                <option v-for=\"option in samplDataOptions\" :value=\"option.name\" :key=\"option.id\">\r\n                    {{ option.label }}\r\n                </option>\r\n            </b-select>\r\n        </b-field>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { ParserFactory } from '../helpers/parser/parser_factory.js'\r\nimport { DataFrame } from 'danfojs/dist/danfojs-base';\r\nimport { settingStore } from '@/stores/settings'\r\n\r\nconst DATASET_SIZE = 10000;\r\nexport default {\r\n    setup() {\r\n        const settings = settingStore()\r\n        return { settings }\r\n    },\r\n    name: 'UploadComponent',\r\n    props: {\r\n        msg: String\r\n    },\r\n    data() {\r\n        return {\r\n            sampleDataset: 'none',\r\n            file: null,\r\n            separator: 2,\r\n            header: true,\r\n            decimal: 1,\r\n            decimalOptions:\r\n                [\r\n                    {\r\n                        id: 1,\r\n                        label: '.',\r\n                    }, {\r\n                        id: 2,\r\n                        label: ',',\r\n                    }]\r\n            ,\r\n            separatorOptions:\r\n                [\r\n                    {\r\n                        id: 1,\r\n                        label: '.',\r\n                    }, {\r\n                        id: 2,\r\n                        label: ',',\r\n                    }\r\n                    , {\r\n                        id: 3,\r\n                        label: 'space',\r\n                    }]\r\n            ,\r\n            samplDataOptions:\r\n                [\r\n                    {\r\n                        id: 0,\r\n                        name: 'none',\r\n                        label: 'Select toy dataset',\r\n\r\n                    },\r\n                    {\r\n                        id: 1,\r\n                        name: 'iris',\r\n                        label: 'iris',\r\n                    }, {\r\n                        id: 2,\r\n                        name: 'wine',\r\n                        label: 'wine',\r\n\r\n                    }\r\n                    , {\r\n                        id: 3,\r\n                        name: 'diabetes',\r\n                        label: 'diabetes',\r\n                    }, {\r\n                        id: 4,\r\n                        name: 'housing',\r\n                        label: 'California Housing',\r\n                    }, {\r\n                        id: 5,\r\n                        name: 'Titanic',\r\n                        label: 'Titanic',\r\n\r\n                    },]\r\n            ,\r\n        }\r\n    },\r\n    watch: {\r\n        file: async function (val) {\r\n            try {\r\n                let dataset = await this.process_file(val, val.name.split('.')[1])\r\n                this.initDataframe(dataset, val.name.split('.')[0])\r\n            } catch (error) {\r\n                this.$buefy.toast.open('Failed to parse the dataset.')\r\n            }\r\n\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        shuffle(array, seed) {\r\n            var m = array.length, t, i;\r\n            // While there remain elements to shuffle…\r\n            while (m) {\r\n\r\n                // Pick a remaining element…\r\n                i = Math.floor(this.random(seed) * m--);\r\n\r\n                // And swap it with the current element.\r\n                t = array[m];\r\n                array[m] = array[i];\r\n                array[i] = t;\r\n                ++seed\r\n            }\r\n        },\r\n        random(seed) {\r\n            var x = Math.sin(seed++) * 10000;\r\n            return x - Math.floor(x);\r\n        },\r\n        async initDataframe(dataset, name) {\r\n            this.settings.resetFeatures();\r\n            this.settings.setDatasetName(name);\r\n            this.settings.setDatasetShape({ count: dataset.$data.length, columns: dataset.columns.length });\r\n            let df = await dataset.sample(dataset.$data.length, { seed: this.settings.getSeed });\r\n            this.settings.setDataframe(df)\r\n            this.$emit('uploaded', true)\r\n        },\r\n        async process_file(file, type) {\r\n            let options = {\r\n                separator: this.separator,\r\n                delimiter: this.decimal,\r\n                header: this.header\r\n            }\r\n            let processdDataset = await ParserFactory.createParser(type, options).parse(file)\r\n            if (processdDataset.length > DATASET_SIZE) {\r\n                this.settings.setDatasizeFlag(true);\r\n                this.shuffle(processdDataset, this.settings.getSeed)\r\n                processdDataset = processdDataset.slice(0, DATASET_SIZE)\r\n            } else {\r\n                this.settings.setDatasizeFlag(false);\r\n            }\r\n            let dataFrame = new DataFrame(processdDataset);\r\n            let idIndex = dataFrame.columns.findIndex(col => col.toLowerCase() === 'id')\r\n            if (idIndex > -1)\r\n                dataFrame.drop({ columns: dataFrame.columns[idIndex], inplace: true })\r\n            this.settings.setRawData(processdDataset);\r\n            this.$emit(\"uploaded-file\", file)\r\n            return dataFrame\r\n        },\r\n        async handleFileSelect(name) {\r\n            if (name == 'none') {\r\n                return\r\n            }\r\n            name += '.csv';\r\n            let current = this;\r\n            let file;\r\n            fetch('/' + name)\r\n                .then(response => response.blob())\r\n                .then(async blob => {\r\n                    file = new File([blob], name);\r\n                    let dataframe = await this.process_file(file, 'csv');\r\n                    current.initDataframe(dataframe, name.split('.')[0])\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error fetching the file:', error);\r\n                });\r\n\r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style></style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./upload-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./upload-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./upload-component.vue?vue&type=template&id=72dab880\"\nimport script from \"./upload-component.vue?vue&type=script&lang=js\"\nexport * from \"./upload-component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export const FeatureCategories = {\r\n    \"Numerical\": {\r\n        id: 1,\r\n        name: \"Numerical\"\r\n    }\r\n    , \"Nominal\": {\r\n        id: 2,\r\n        name: \"Nominal\"\r\n    }\r\n    , \"Ordinal\": {\r\n        id: 3,\r\n        name: \"Ordinal\"\r\n    }\r\n};\r\nexport const CV_OPTIONS = {\r\n    SPLIT: 1,\r\n    NO: 2,\r\n    KFOLD: 3\r\n}\r\nexport const REGRESSION = 1;\r\nexport const CLASSIFICATION = 2;\r\n\r\n\r\nexport const ScaleOptions = {\r\n    \"No\": {\r\n        id: 0,\r\n        name: \"No\",\r\n    },\r\n    \"Scale\": {\r\n        id: 1,\r\n        name: \"Scale\"\r\n    }\r\n    , \"x^2\": {\r\n        id: 2,\r\n        name: \"x^2\"\r\n    }\r\n    , \"ln(x)\": {\r\n        id: 3,\r\n        name: \"ln(x)\"\r\n    }, \"Standardize\": {\r\n        id: 4,\r\n        name: \"Standardize\"\r\n    }\r\n}\r\nexport const Settings = {\r\n    \"classification\": {\r\n        \"logistic_regression\": {\r\n            \"id\": 1,\r\n            \"label\": \"Logistic Regression\",\r\n            \"title\": \"Logi.Reg\",\r\n            \"value\": 1,\r\n            \"options\": {\r\n                \"regularization\": {\r\n                    \"label\": \"regulrization\",\r\n                    \"type\": \"select\",\r\n                    default: \"Lasso\",\r\n                    value: \"Lasso\",\r\n                    \"values\": [{ label: \"adaptive lasso\", value: \"Lasso\" }, { label: \"ridge\", value: \"ridge\" }]\r\n                }\r\n            }\r\n        },\r\n        \"discriminant_analysis\": {\r\n            \"id\": 2,\r\n            \"label\": \"Discriminant Analysis\",\r\n            \"title\": \"DA\",\r\n            \"value\": 2,\r\n            \"options\": {\r\n                \"type\": {\r\n                    \"label\": \"type\",\r\n                    \"type\": \"select\",\r\n                    default: \"linear\",\r\n                    \"values\": [{ label: \"linear\", value: \"linear\" }, { label: \"quadratic\", value: \"quadratic\" }]\r\n                },\r\n                \"priors\": {\r\n                    label: \"priors\",\r\n                    type: \"text\",\r\n                    placeholder: \"comma separated priors\"\r\n                },\r\n            }\r\n        },\r\n        \"k_nearest_neighbour\": {\r\n            \"id\": 3,\r\n            \"label\": \"k nearest neighbour\",\r\n            \"title\": \"KNN\",\r\n            \"value\": 3,\r\n            \"options\": {\r\n                \"min\": {\r\n                    \"label\": \"min\",\r\n                    type: \"number\",\r\n                    default: 3\r\n                },\r\n                \"max\": {\r\n                    \"label\": \"max\",\r\n                    type: \"number\",\r\n                    default: 9\r\n                },\r\n                \"metric\": {\r\n                    label: \"metrics\",\r\n                    type: \"select\",\r\n                    default: \"manhattan\",\r\n                    values: [{ label: \"euclidean\", value: \"euclidean\" }, { label: \"manhattan\", value: \"manhattan\" }]\r\n                },\r\n            },\r\n        },\r\n        \"support_vector_machine\": {\r\n            \"id\": 4,\r\n            \"label\": \"Support vector machine\",\r\n            \"title\": \"SVM\",\r\n            \"value\": 4,\r\n            \"options\": {\r\n                \"kernel\": {\r\n                    label: 'kernel',\r\n                    type: \"select\",\r\n                    default: \"rbf\",\r\n                    values: [{ label: \"RBF\", value: \"rbf\" }, { label: \"Linear\", value: \"linear\" }, { label: \"Polynomial\", value: \"poly\" }\r\n                        , { label: \"Sigmoid\", value: \"sigmoid\" }]\r\n                },\r\n\r\n                \"bias\": {\r\n                    \"label\": \"bias\",\r\n                    type: \"number\",\r\n                    for: [\"Sigmoid\", \"Sigmoid\"],\r\n                    default: 0\r\n                },\r\n                \"c\": {\r\n                    \"label\": \"Regularization parameter\",\r\n                    type: \"number\",\r\n                    default: 1\r\n                },\r\n                \"degree\": {\r\n                    label: 'degree',\r\n                    type: \"number\",\r\n                    for: [\"Polynomial\"],\r\n                    default: 3\r\n                },\r\n            },\r\n        },\r\n        \"random_forest\": {\r\n            \"id\": 5,\r\n            \"label\": \"Random forest\",\r\n            \"title\": \"RF\",\r\n            \"value\": 5,\r\n            \"options\": {\r\n                \"estimators\": {\r\n                    label: \"estimators\",\r\n                    type: \"number\",\r\n                    default: 100\r\n                },\r\n                \"features\": {\r\n                    label: \"features\",\r\n                    type: \"number\",\r\n                    default: \"sqrt\"\r\n                },\r\n                \"depth\": {\r\n                    label: \"depth\",\r\n                    type: \"number\",\r\n                    default: 5\r\n                },\r\n                \"criteria\": {\r\n                    label: \"criteria\",\r\n                    type: \"select\",\r\n                    default: \"gini\",\r\n                    \"values\": [{ label: \"gini\", value: \"gini\" }, { label: \"log loss\", value: \"log_loss\" },\r\n                    { label: \"entropy\", value: \"entropy\" }]\r\n                }\r\n            },\r\n        },\r\n        \"boosting\": {\r\n            \"id\": 6,\r\n            \"label\": \"Boosting\",\r\n            \"title\": \"Boosting\",\r\n            \"value\": 6,\r\n            \"options\": {\r\n                \"booster\": {\r\n                    type: \"select\",\r\n                    label: \"booster\",\r\n                    default: \"gbtree\",\r\n                    values: [{ label: \"gbtree\", value: \"gbtree\" }, { label: \"gblinear\", value: \"gblinear\" }, { label: \"dart\", value: \"dart\" }]\r\n                },\r\n                \"eta\": {\r\n                    label: \"learning rate\",\r\n                    type: \"number\",\r\n                    default: 0.3\r\n                },\r\n                \"estimators\": {\r\n                    label: \"estimators\",\r\n                    type: \"number\",\r\n                    default: 200\r\n                },\r\n                \"depth\": {\r\n                    label: \"depth\",\r\n                    type: \"number\",\r\n                    default: 5\r\n                },\r\n\r\n            },\r\n        },\r\n        \"naive_bayes\": {\r\n            \"label\": \"Naive Bayes\",\r\n            \"title\": \"NB\",\r\n            \"value\": 7,\r\n            \"id\": 7,\r\n            \"options\": {\r\n                \"laplace\": {\r\n                    label: \"laplace smoothing\",\r\n                    type: \"number\",\r\n                    default: 0.05\r\n                },\r\n                \"priors\": {\r\n                    label: \"priors\",\r\n                    type: \"text\",\r\n                    placeholder: \"comma separated priors\"\r\n                },\r\n                \"type\": {\r\n                    label: \"type\",\r\n                    type: \"select\",\r\n                    default: \"Gaussian\",\r\n                    values: [{ label: \"Gaussian\", value: \"Gaussian\" }, { label: \"Multinomial\", value: \"Multinomial\" }, { label: \"Bernoulli\", value: \"Bernoulli\" }]\r\n                }\r\n            }\r\n\r\n        },\r\n    },\r\n    \"regression\": {\r\n        \"linear_regression\": {\r\n            \"label\": \"Linear Regression\",\r\n            \"title\": \"Lin.Reg\",\r\n            \"value\": 9,\r\n            \"id\": 9,\r\n            \"feature_selection\": [\"no\", \"Lasso\", \"ridge\"],\r\n            \"criteria\": [\"AIC\", \"BIC\", \"AR2\",],\r\n            \"options\": {\r\n                \"regularization\": {\r\n                    label: \"regularization\",\r\n                    type: \"select\",\r\n                    default: \"Lasso\",\r\n                    values: [{ label: \"adaptive lasso\", value: \"Lasso\" }, { label: \"Ridge\", value: \"Ridge\" }]\r\n                }\r\n            }\r\n        },\r\n        \"polynomial_regression\": {\r\n            \"label\": \"Polynomial Regression\",\r\n            \"title\": \"Poly.Reg\",\r\n            \"value\": 14,\r\n            \"id\": 14,\r\n            \"feature_selection\": [\"no\", \"Lasso\", \"ridge\"],\r\n            \"criteria\": [\"AIC\", \"BIC\", \"AR2\",],\r\n            \"options\": {\r\n                \"regularization\": {\r\n                    label: \"regularization\",\r\n                    type: \"select\",\r\n                    default: \"Lasso\",\r\n                    values: [{ label: \"Lasso\", value: \"Lasso\" }, { label: \"Ridge\", value: \"Ridge\" }]\r\n                },\r\n                \"degree\": {\r\n                    label: \"Degree\",\r\n                    type: \"number\",\r\n                    default: 2,\r\n                }\r\n            }\r\n        },\r\n        \"k_nearest_neighbour\": {\r\n            \"label\": \"k nearest neighbour Regression\",\r\n            \"title\": \"KNN\",\r\n            \"value\": 10,\r\n            \"id\": 10,\r\n            \"options\": {\r\n                \"min\": {\r\n                    label: \"min\",\r\n                    type: \"number\",\r\n                    default: 3\r\n                },\r\n                \"max\": {\r\n                    label: \"max\",\r\n                    type: \"number\",\r\n                    default: 9\r\n                },\r\n            },\r\n        },\r\n        \"boosting\": {\r\n            \"label\": \"Boosting Regression\",\r\n            \"title\": \"Boosting\",\r\n            \"value\": 11,\r\n            \"id\": 11,\r\n            \"options\": {\r\n                \"booster\": {\r\n                    label: \"booster\",\r\n                    type: \"select\",\r\n                    default: \"gbtree\",\r\n                    values: [{ label: \"gbtree\", value: \"gbtree\" }, { label: \"gblinear\", value: \"gblinear\" }, { label: \"dart\", value: \"dart\" }]\r\n                },\r\n                \"eta\": {\r\n                    label: \"learning rate\",\r\n                    type: \"number\",\r\n                    default: 0.3\r\n                },\r\n                \"estimators\": {\r\n                    label: \"estimators\",\r\n                    type: \"number\",\r\n                    default: 200\r\n                },\r\n                \"depth\": {\r\n                    label: \"depth\",\r\n                    type: \"number\",\r\n                    default: 5\r\n                },\r\n\r\n            },\r\n        },\r\n        \"support_vector_machine\": {\r\n            \"label\": \"Support vector machine Regression\",\r\n            \"title\": \"SVM.Reg\",\r\n            \"value\": 12,\r\n            \"id\": 12,\r\n            \"options\": {\r\n                \"kernel\": {\r\n                    label: \"kernel\",\r\n                    type: \"select\",\r\n                    default: \"rbf\",\r\n                    values: [{ label: \"RBF\", value: \"rbf\" }, { label: \"Linear\", value: \"linear\" }, { label: \"Polynomial\", value: \"poly\" }\r\n                        , { label: \"Sigmoid\", value: \"sigmoid\" }]\r\n                },\r\n                \"gamma\": {\r\n                    label: \"gamma\",\r\n                    type: \"number\",\r\n                    for: [\"RBF\", \"Sigmoid\", \"Polynomial\"],\r\n                    default: 1\r\n                },\r\n                \"bias\": {\r\n                    label: \"bias\",\r\n                    type: \"number\",\r\n                    for: [\"Sigmoid\", \"Sigmoid\"],\r\n                    default: 0\r\n                },\r\n                \"degree\": {\r\n                    label: \"degree polynomial\",\r\n                    type: \"number\",\r\n                    for: [\"Polynomial\"],\r\n                    default: 3\r\n                },\r\n            },\r\n        },\r\n        \"random_forest\": {\r\n            \"label\": \"Random forest Regression\",\r\n            \"title\": \"RF.Reg\",\r\n            \"value\": 13,\r\n            \"id\": 13,\r\n            \"options\": {\r\n                \"estimators\": {\r\n                    label: \"num of estimators\",\r\n                    type: \"number\",\r\n                    default: 100\r\n                },\r\n                \"features\": {\r\n                    label: \"features length\",\r\n                    type: \"number\",\r\n                    default: \"sqrt\"\r\n                },\r\n                \"depth\": {\r\n                    label: \"depth\",\r\n                    type: \"number\",\r\n                    default: 5\r\n                },\r\n                \"criteria\": {\r\n                    type: \"select\",\r\n                    label: \"criteria\",\r\n                    default: \"squared_error\",\r\n                    \"values\": [{ label: \"squared_error\", value: \"squared_error\" }, { label: \"absolute_error\", value: \"absolute_error\" },\r\n                    { label: \"friedman_mse\", value: \"friedman_mse\" }, { label: \"poisson\", value: \"poisson\" }]\r\n                }\r\n            },\r\n        },\r\n        \"kernel_regression\": {\r\n            \"label\": \"Kernel Regression\",\r\n            \"title\": \"Ker.Reg\",\r\n            \"value\": 15,\r\n            \"id\": 15,\r\n            \"options\": {\r\n                \"estimators\": {\r\n                    type: \"number\",\r\n                    default: 100\r\n                },\r\n            },\r\n        },\r\n        \"bspline_regression\": {\r\n            \"label\": \"Bspline Regression\",\r\n            \"title\": \"Bspl.Reg\",\r\n            \"value\": 16,\r\n            \"id\": 16,\r\n\r\n            \"options\": {\r\n                \"knots\": {\r\n                    label: \"knots\",\r\n                    type: \"number\",\r\n                    default: 5\r\n                },\r\n                \"degree\": {\r\n                    label: \"degree\",\r\n                    type: \"number\",\r\n                    default: 3\r\n                },\r\n            },\r\n        },\r\n    },\r\n};","const pyodideWorker = new Worker(new URL('./webworker.js', import.meta.url))\n\nconst callbacks = {};\n\npyodideWorker.onmessage = (event) => {\n    const { id, ...data } = event.data;\n    const onSuccess = callbacks[id];\n    delete callbacks[id];\n    onSuccess(data);\n};\n\nconst asyncRun = (() => {\n    let id = 0; // identify a Promise\n    return (script, context) => {\n        // the id could be generated more carefully\n        id = (id + 1) % Number.MAX_SAFE_INTEGER;\n        return new Promise((onSuccess) => {\n            callbacks[id] = onSuccess;\n            pyodideWorker.postMessage({\n                ...context,\n                python: script,\n                id,\n            });\n        });\n    };\n})();\n\nexport { asyncRun };","import { asyncRun } from \"../py-worker\";\r\nexport default class PCA {\r\n    constructor() {\r\n    }\r\n    async predict(x, n, x_test = []) {\r\n        this.context = {\r\n            x_train: x,\r\n            x_test: x_test,\r\n            has_test_set: x_test.length > 0,\r\n            n: +n,\r\n        };\r\n        const script = `\r\n        import matplotlib.pyplot as plt\r\n        import numpy as np\r\n        from sklearn.decomposition import PCA\r\n        from js import x_train,n,x_test,has_test_set\r\n        from sklearn.preprocessing import StandardScaler\r\n        x_train = np.array(x_train)\r\n        scaler = StandardScaler()\r\n        X_scaled = scaler.fit_transform(x_train) \r\n        pca_x = PCA(n_components=n,random_state = 42)\r\n        pca = pca_x.fit_transform(np.array(X_scaled))\r\n        pca_test=[]\r\n        if has_test_set:\r\n            x_test = np.array(x_test)\r\n            x_test_scaled= scaler.transform(x_test) \r\n            pca_test = pca_x.fit_transform(np.array(x_test_scaled))\r\n        ccircle = []\r\n        eucl_dist = []\r\n        for i,j in enumerate(x_train.T):\r\n            corr1 = np.corrcoef(j,pca[:,0])[0,1]\r\n            corr2 = np.corrcoef(j,pca[:,1])[0,1]\r\n            ccircle.append((corr1, corr2))\r\n            eucl_dist.append(np.sqrt(corr1**2 + corr2**2))\r\n        (pca,np.arange(1, len(pca_x.explained_variance_ratio_) + 1), pca_x.explained_variance_ratio_,ccircle,eucl_dist,pca_test)\r\n    `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                return results;\r\n            } else if (error) {\r\n                throw Error(\"Faced errot fitting PCA\")\r\n            }\r\n        } catch (e) {\r\n            throw Error(\"Failed to fit PCA\")\r\n        }\r\n    }\r\n\r\n}\r\n","/* eslint-disable no-undef */\r\nimport { asyncRun } from \"./py-worker\";\r\nimport { MinMaxScaler, StandardScaler, LabelEncoder, getDummies } from 'danfojs/dist/danfojs-base';\r\nimport { FeatureCategories } from '../helpers/settings'\r\n\r\nimport * as Papa from 'papaparse';\r\nasync function parseCsv(data) {\r\n    return new Promise(resolve => {\r\n        data = data.map((row) => {\r\n            return Object.keys(row).sort().map(key => parseFloat(row[key]));\r\n        });\r\n        resolve(data);\r\n    });\r\n}\r\n\r\n/**\r\n * Downloads and returns the csv.\r\n *\r\n * @param {string} filename Name of file to be loaded.\r\n *\r\n * @returns {Promise.Array<number[]>} Resolves to parsed csv data.\r\n */\r\nexport async function loadCsv(filename) {\r\n    return new Promise(resolve => {\r\n        const url = `${BASE_URL}${filename}.csv`;\r\n\r\n        Papa.parse(url, {\r\n            download: true,\r\n            header: true,\r\n            complete: (results) => {\r\n                resolve(parseCsv(results['data']));\r\n            }\r\n        })\r\n    });\r\n}\r\n\r\n/**\r\n * Shuffles data and label using Fisher-Yates algorithm.\r\n */\r\nexport async function shuffle(data, label) {\r\n    let counter = data.length;\r\n    let temp = 0;\r\n    let index = 0;\r\n    while (counter > 0) {\r\n        index = (Math.random() * counter) | 0;\r\n        counter--;\r\n        // data:\r\n        temp = data[counter];\r\n        data[counter] = data[index];\r\n        data[index] = temp;\r\n        // label:\r\n        temp = label[counter];\r\n        label[counter] = label[index];\r\n        label[index] = temp;\r\n    }\r\n}\r\n\r\n/**\r\n * Calculate the arithmetic mean of a vector.\r\n *\r\n * @param {Array} vector The vector represented as an Array of Numbers.\r\n *\r\n * @returns {number} The arithmetic mean.\r\n */\r\nfunction mean(vector) {\r\n    let sum = 0;\r\n    for (const x of vector) {\r\n        sum += x;\r\n    }\r\n    return sum / vector.length;\r\n}\r\n\r\n/**\r\n * Calculate the standard deviation of a vector.\r\n *\r\n * @param {Array} vector The vector represented as an Array of Numbers.\r\n *\r\n * @returns {number} The standard deviation.\r\n */\r\nfunction stddev(vector) {\r\n    let squareSum = 0;\r\n    const vectorMean = mean(vector);\r\n    for (const x of vector) {\r\n        squareSum += (x - vectorMean) * (x - vectorMean);\r\n    }\r\n    return Math.sqrt(squareSum / (vector.length - 1));\r\n}\r\n\r\n/**\r\n * Normalize a vector by its mean and standard deviation.\r\n *\r\n * @param {Array} vector Vector to be normalized.\r\n * @param {number} vectorMean Mean to be used.\r\n * @param {number} vectorStddev Standard Deviation to be used.\r\n *\r\n * @returns {Array} Normalized vector.\r\n */\r\nconst normalizeVector = (vector, vectorMean, vectorStddev) => {\r\n    return vector.map(x => (x - vectorMean) / vectorStddev);\r\n};\r\n\r\n/**\r\n * Normalizes the dataset\r\n *\r\n * @param {Array} dataset Dataset to be normalized.\r\n * @param {boolean} isTrainData Whether it is training data or not.\r\n * @param {Array} vectorMeans Mean of each column of dataset.\r\n * @param {Array} vectorStddevs Standard deviation of each column of dataset.\r\n *\r\n * @returns {Object} Contains normalized dataset, mean of each vector column,\r\n *                   standard deviation of each vector column.\r\n */\r\nexport function normalizeDataset(\r\n    dataset, isTrainData = true, vectorMeans = [], vectorStddevs = []) {\r\n    const numFeatures = dataset[0].length;\r\n    let vectorMean;\r\n    let vectorStddev;\r\n\r\n    for (let i = 0; i < numFeatures; i++) {\r\n        const vector = dataset.map(row => row[i]);\r\n\r\n        if (isTrainData) {\r\n            vectorMean = mean(vector);\r\n            vectorStddev = stddev(vector);\r\n\r\n            vectorMeans.push(vectorMean);\r\n            vectorStddevs.push(vectorStddev);\r\n        } else {\r\n            vectorMean = vectorMeans[i];\r\n            vectorStddev = vectorStddevs[i];\r\n        }\r\n\r\n        const vectorNormalized =\r\n            normalizeVector(vector, vectorMean, vectorStddev);\r\n\r\n        vectorNormalized.forEach((value, index) => {\r\n            dataset[index][i] = value;\r\n        });\r\n    }\r\n\r\n    return { dataset, vectorMeans, vectorStddevs };\r\n}\r\n\r\n/**\r\n * Binarizes a tensor based on threshold of 0.5.\r\n *\r\n * @param {tf.Tensor} y Tensor to be binarized.\r\n * @param {number} threshold (default: 0.5).\r\n * @returns {tf.Tensor} Binarized tensor.\r\n */\r\nexport function binarize(y, threshold) {\r\n    if (threshold == null) {\r\n        threshold = 0.5;\r\n    }\r\n    tf.util.assert(\r\n        threshold >= 0 && threshold <= 1,\r\n        `Expected threshold to be >=0 and <=1, but got ${threshold}`);\r\n\r\n    return tf.tidy(() => {\r\n        const condition = y.greater(tf.scalar(threshold));\r\n        return tf.where(condition, tf.onesLike(y), tf.zerosLike(y));\r\n    });\r\n}\r\nexport function encode_name(key) {\r\n    let str_encoded = key.replace(/\\s/g, '').replace(/[^\\w-]/g, '_');\r\n    return str_encoded\r\n}\r\nexport function calculatePrecision(classIndex, confusionMatrix) {\r\n    let truePositive = confusionMatrix[classIndex][classIndex];\r\n    let falsePositive = 0;\r\n\r\n    for (let i = 0; i < confusionMatrix.length; i++) {\r\n        if (i !== classIndex) {\r\n            falsePositive += confusionMatrix[i][classIndex];\r\n        }\r\n    }\r\n\r\n    if (truePositive === 0 && falsePositive === 0) {\r\n        return 1;\r\n    }\r\n\r\n    return truePositive / (truePositive + falsePositive);\r\n}\r\n\r\nexport function calculateRecall(classIndex, confusionMatrix) {\r\n    let truePositive = confusionMatrix[classIndex][classIndex];\r\n    let falseNegative = 0;\r\n    for (let i = 0; i < confusionMatrix.length; i++) {\r\n        falseNegative += confusionMatrix[classIndex][i];\r\n    }\r\n    falseNegative -= truePositive;\r\n    if (truePositive === 0 && falseNegative === 0) {\r\n        return 1;\r\n    }\r\n    return truePositive / (truePositive + falseNegative);\r\n}\r\n\r\n\r\nexport function calculateF1Score(classIndex, confusionMatrix) {\r\n    const precision = calculatePrecision(classIndex, confusionMatrix);\r\n    const recall = calculateRecall(classIndex, confusionMatrix);\r\n    return (2 * precision * recall) / (precision + recall);\r\n}\r\n\r\nexport async function metrics(y, y_pred, labels) {\r\n    const context = {\r\n        y: y,\r\n        y_pred: y_pred,\r\n        labels: labels\r\n    };\r\n    const script = `\r\n        from sklearn.metrics import precision_recall_fscore_support, classification_report, f1_score,accuracy_score\r\n        from js import y_pred,y,labels       \r\n        from sklearn.metrics import recall_score,precision_score\r\n\r\n        precision = precision_score(y, y_pred, average=None,labels=labels)\r\n        recall = recall_score(y, y_pred, average=None,labels=labels)\r\n        f1_micro = f1_score(y, y_pred, average='micro')\r\n        f1_macro = f1_score(y, y_pred, average='macro')\r\n        accuracy = accuracy_score(y, y_pred)\r\n        (precision,recall,f1_micro,f1_macro,accuracy)\r\n    `;\r\n    try {\r\n        const { results, error } = await asyncRun(script, context);\r\n        if (results) {\r\n            return {\r\n                precision: results[0],\r\n                recall: results[1],\r\n                f1_micro: results[2],\r\n                f1_macro: results[3],\r\n                accuracy: results[4],\r\n\r\n            }\r\n        } else if (error) {\r\n            throw error\r\n        }\r\n    } catch (e) {\r\n        throw (\"Something went wrong\", e)\r\n    }\r\n}\r\nexport function calculateRSquared(actual, predicted) {\r\n    const meanActual = mean_array(actual);\r\n    const totalSumOfSquares = actual.reduce((acc, val) => acc + Math.pow(val - meanActual, 2), 0);\r\n    const residualSumOfSquares = actual.reduce((acc, val, index) => acc + Math.pow(val - predicted[index], 2), 0);\r\n    return 1 - (residualSumOfSquares / totalSumOfSquares);\r\n}\r\nexport function calculateMSE(actualValues, predictedValues) {\r\n    if (actualValues.length !== predictedValues.length) {\r\n        throw new Error(\"The lengths of actual values and predicted values must be the same.\");\r\n    }\r\n\r\n    const n = actualValues.length;\r\n    let sumSquaredError = 0;\r\n\r\n    for (let i = 0; i < n; i++) {\r\n        const squaredError = Math.pow(actualValues[i] - predictedValues[i], 2);\r\n        sumSquaredError += squaredError;\r\n    }\r\n\r\n    const meanSquaredError = sumSquaredError / n;\r\n    return meanSquaredError;\r\n}\r\nfunction mean_array(array) {\r\n    return array.reduce((acc, val) => acc + val, 0) / array.length;\r\n}\r\nexport function evaluate_classification(predictions, y_test, encoder) {\r\n    console.assert(predictions.length === y_test.length, \"predictions and test should have the same length.\")\r\n    let missclassification_indexes = []\r\n    let missclassification_preds = []\r\n    let currect_classifications_sum = 0\r\n    y_test.forEach((element, i) => {\r\n        if (element === predictions[i]) {\r\n            currect_classifications_sum++\r\n        } else {\r\n            missclassification_indexes.push(i)\r\n            let label = [predictions[i]]\r\n            let result = encoder.inverseTransform(label)\r\n            missclassification_preds.push(result[0])\r\n\r\n        }\r\n    });\r\n    return {\r\n        accuracy: Number((currect_classifications_sum / predictions.length) * 100),\r\n        indexes: missclassification_indexes,\r\n        mispredictions: missclassification_preds\r\n    }\r\n}\r\nexport function scale_data(dataset, column, normalization_type) {\r\n    try {\r\n\r\n\r\n        switch (normalization_type) {\r\n            case \"0\":\r\n                {\r\n                    break;\r\n                }\r\n            case \"1\":\r\n                {\r\n                    let scaler = new MinMaxScaler()\r\n                    scaler.fit(dataset[column])\r\n                    dataset.addColumn(column, scaler.transform(dataset[column]), { inplace: true })\r\n                    break;\r\n                }\r\n            case \"2\":\r\n                dataset.addColumn(column, dataset[column].apply((x) => x * x), { inplace: true })\r\n                break;\r\n            case \"3\":\r\n                dataset.addColumn(column, dataset[column].apply((x) => {\r\n                    let ln = Math.log(x);\r\n                    if (isNaN(ln)) {\r\n                        throw new Error('falied at data transformation.');\r\n                    }\r\n                    return Math.log(x)\r\n                }\r\n                ), { inplace: true })\r\n                break;\r\n            case \"4\":\r\n                {\r\n                    let scaler = new StandardScaler()\r\n                    scaler.fit(dataset[column])\r\n                    dataset.addColumn(column, scaler.transform(dataset[column]), { inplace: true })\r\n                    break;\r\n                }\r\n            default:\r\n                break;\r\n        }\r\n    } catch (error) {\r\n        throw new Error('falied at data transformation.')\r\n    }\r\n}\r\nexport function applyDataTransformation(dataset, column_names, transformations) {\r\n    for (let i = 0; i < column_names.length; i++) {\r\n        const column = column_names[i];\r\n        let transformation = transformations.find(transformation => transformation.name === column)\r\n        if (transformation) {\r\n            scale_data(dataset, column, transformation.scaler.toString())\r\n        }\r\n    }\r\n    return dataset\r\n}\r\nexport function handle_missing_values(data_frame, impute = false) {\r\n    // to do normalization\r\n    if (impute) {\r\n        let string_columns = []\r\n        let numeric_columns = []\r\n        let string_column_modes = []\r\n        let numeric_column_means = []\r\n        data_frame.columns.forEach((item) => {\r\n            if (data_frame.column(item)?.dtype === 'string') {\r\n                string_columns.push(item)\r\n            } else {\r\n                numeric_columns.push(item)\r\n            }\r\n        })\r\n        string_columns.forEach(element => {\r\n            let mode = getCategoricalMode(data_frame.column(element).values).mode\r\n            string_column_modes.push(mode)\r\n        });\r\n        numeric_columns.forEach(element => {\r\n            let mean = data_frame.column(element).mean()\r\n            numeric_column_means.push(mean)\r\n        });\r\n        data_frame = data_frame.fillNa(string_column_modes, { columns: string_columns })\r\n        data_frame = data_frame.fillNa(numeric_column_means, { columns: numeric_columns })\r\n    } else {\r\n        data_frame.dropNa({ axis: 1, inplace: true })\r\n    }\r\n    return data_frame\r\n}\r\nexport function getCategoricalMode(arr) {\r\n    if (arr.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    const categoryCount = {};\r\n    categoryCount['total'] = 0\r\n    categoryCount['mode'] = ''\r\n    for (let i = 0; i < arr.length; i++) {\r\n        const category = arr[i];\r\n        if (category === null || category === undefined) {\r\n            continue\r\n        }\r\n        categoryCount['total']++\r\n        if (category in categoryCount) {\r\n            categoryCount[category]++;\r\n        } else {\r\n            categoryCount[category] = 1;\r\n        }\r\n    }\r\n\r\n    let modeCategory = null;\r\n    let modeCount = 0;\r\n    for (const category in categoryCount) {\r\n        if (category === 'total') {\r\n            continue\r\n        }\r\n        if (categoryCount[category] > modeCount) {\r\n            modeCategory = category;\r\n            modeCount = categoryCount[category];\r\n        }\r\n    }\r\n    categoryCount['mode'] = modeCategory;\r\n    return categoryCount;\r\n}\r\nexport function encode_dataset(data_frame, columns_types) {\r\n    let df = data_frame.copy()\r\n\r\n    let categorical_columns = columns_types.filter(column => column.type === FeatureCategories.Nominal.id || column.type === FeatureCategories.Ordinal.id)\r\n    let categoriclaFeaturesAfterEncoding = []\r\n    categorical_columns.forEach((column) => {\r\n        if (column.type === FeatureCategories.Ordinal.id) {\r\n            let encoder = new LabelEncoder()\r\n            encoder.fit(df[column.name])\r\n            let encoded_column = encoder.transform(df[column.name])\r\n            df.addColumn(column.name, encoded_column.values, { inplace: true })\r\n            categoriclaFeaturesAfterEncoding.push(column.name)\r\n        } else {\r\n            df = getDummies(df, { columns: [column.name] })\r\n            df.drop({ columns: [df.columns.find(m => m.includes(column.name + \"_\"))], inplace: true });\r\n            categoriclaFeaturesAfterEncoding.push(...df.columns.filter(m => m.includes(column.name + \"_\")))\r\n\r\n        }\r\n    })\r\n    return [df, categoriclaFeaturesAfterEncoding]\r\n}\r\n\r\nexport function merge_classes(classes, dataframe) {\r\n    let newClass = classes.map(m => m.class).join('_');\r\n    classes.forEach(cls => {\r\n        dataframe.replace(cls.class, newClass, { columns: [this.settings.modelTarget], inplace: true })\r\n    });\r\n    let message = { message: 'merged classes: ' + newClass, type: 'info' }\r\n    this.$buefy.toast.open('merged classes: ' + newClass)\r\n    this.settings.addMessage(message)\r\n}\r\n\r\n","import { asyncRun } from \"../py-worker\";\r\nexport default class TSNE {\r\n    constructor() {\r\n    }\r\n    async predict(x, n, seed = 123) {\r\n        this.context = {\r\n            x_train: x,\r\n            n: +n,\r\n            seed: seed\r\n        };\r\n        const script = `\r\n        import matplotlib.pyplot as plt\r\n        from sklearn.manifold import TSNE\r\n        import numpy as np\r\n        from js import x_train,n,seed\r\n        from sklearn.preprocessing import StandardScaler\r\n        X = np.array(x_train)\r\n        embedded = TSNE(n_components=n, learning_rate='auto', random_state=seed).fit_transform(X)\r\n        embedded\r\n    `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                return results;\r\n            } else if (error) {\r\n                throw Error(\"Faced errot fitting PCA\")\r\n            }\r\n        } catch (e) {\r\n            throw Error(\"Failed to fit PCA\")\r\n        }\r\n    }\r\n\r\n}\r\n","/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-undef */\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\nimport PCA from './dimensionality-reduction/pca';\r\nimport { binarize } from './utils'\r\nimport * as ss from \"simple-statistics\"\r\nimport { schemeTableau10, interpolateBlues, interpolateRainbow } from 'd3-scale-chromatic';\r\nimport { FeatureCategories } from \"./settings\";\r\nimport { metrics as ClassificationMetric, encode_name } from './utils.js';\r\nimport { metrics } from '@tensorflow/tfjs-vis';\r\nimport { scale_data } from './utils';\r\nimport { tensorflow, LabelEncoder } from 'danfojs/dist/danfojs-base';\r\nimport { MinMaxScaler } from 'danfojs/dist/danfojs-base';\r\nimport TSNE from './dimensionality-reduction/tsne';\r\nconst plotlyImageExportConfig = {\r\n    toImageButtonOptions: {\r\n        format: 'png', // one of png, svg, jpeg, webp\r\n        height: null,\r\n        width: null,\r\n        scale: 2\r\n    }\r\n};\r\nexport default class ChartController {\r\n    constructor() {\r\n        this.color_scheme = schemeTableau10;\r\n        this.color_scheme_sequential = interpolateRainbow;\r\n\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    classification_target_chart(values, labels, name, container, title = \"\") {\r\n        var uniqueLabels = [...new Set(labels)];\r\n        var colorIndices = labels.map(label => this.indexToColor(uniqueLabels.indexOf(label)));\r\n        var data = [];\r\n        data.push({\r\n            name: \"Count\",\r\n            data: values.map((item, i) => ({ y: item, color: colorIndices[i] }))\r\n        })\r\n\r\n        Highcharts.chart(container, {\r\n            credits: {\r\n                enabled: false\r\n            },\r\n            title: {\r\n                text: \"\"\r\n            },\r\n            chart: {\r\n                type: 'column'\r\n            },\r\n            xAxis: {\r\n                categories: uniqueLabels,\r\n            },\r\n            yAxis: {\r\n                min: 0,\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    pointPadding: 0.1,\r\n                    borderWidth: 0\r\n                }\r\n            },\r\n            colors: colorIndices,\r\n            series: data\r\n        });\r\n    }\r\n    regression_target_chart(items, container, name) {\r\n        let kde_data = [];\r\n        let ys = [];\r\n        let items_range = items\r\n        var breaks = ss.equalIntervalBreaks(items_range, 100);\r\n        let kde = ss.kernelDensityEstimation(items, 'gaussian', 'nrd');\r\n        breaks.forEach((item) => {\r\n            ys.push(kde(item, 'nrd'));\r\n            kde_data.push([item, ys[ys.length - 1]]);\r\n        });\r\n\r\n\r\n        Highcharts.chart(container, {\r\n            credits: {\r\n                enabled: false\r\n            },\r\n            legend: {\r\n                enabled: false,\r\n                verticalAlign: 'top',\r\n            },\r\n            chart: {\r\n                height: '300',\r\n                type: \"spline\",\r\n                animation: true,\r\n            },\r\n            title: {\r\n                text: name // Assuming `column` is defined elsewhere\r\n            },\r\n            yAxis: {\r\n                title: { text: null }\r\n            },\r\n            tooltip: {\r\n                valueDecimals: 3\r\n            },\r\n            plotOptions: {\r\n                series: {\r\n                    marker: {\r\n                        enabled: false\r\n                    },\r\n                    dashStyle: \"shortdot\",\r\n                    area: true\r\n                }\r\n            },\r\n            series: [{\r\n                type: 'area',\r\n                dashStyle: \"solid\",\r\n                lineWidth: 2,\r\n                data: kde_data\r\n            }]\r\n        });\r\n    }\r\n    draw_categorical_barplot(column_values, target, title) {\r\n        const key = title + \"- barplot\";\r\n        $(\"#categories_barplots\").append(`<div class=\"column is-4\" style=\"height:40vh;\" id=\"${key}\"></div>`)\r\n        const countOccurrences = column_values.reduce((acc, val) => {\r\n            acc[val] = (acc[val] || 0) + 1;\r\n            return acc;\r\n        }, {});\r\n        const countArray = Object.entries(countOccurrences).map(([value, count]) => ({ value: value, count }));\r\n        countArray.sort((a, b) => b.count - a.count);\r\n        const top5 = countArray.slice(0, 5);\r\n        new Highcharts.Chart({\r\n            chart: {\r\n                renderTo: key,\r\n                type: 'column'\r\n            },\r\n            xAxis: {\r\n                categories: top5.map(m => m.value),\r\n            },\r\n            title: {\r\n                text: title\r\n            },\r\n            yAxis: {\r\n                min: 0,\r\n                labels: {\r\n                    overflow: 'justify'\r\n                }\r\n            },\r\n            credits: {\r\n                enabled: false\r\n            },\r\n            plotOptions: {\r\n                bar: {\r\n                    dataLabels: {\r\n                        enabled: true\r\n                    }\r\n                }\r\n            },\r\n            series: [{\r\n                showInLegend: false,\r\n                name: title,\r\n                data: top5.map(m => m.count)\r\n            }]\r\n        });\r\n\r\n    }\r\n    roc_chart(container, true_positive_rates, false_positive_rates) {\r\n        var trace = {\r\n            x: false_positive_rates,\r\n            y: true_positive_rates,\r\n            type: 'scatter',\r\n            mode: 'lines',\r\n            name: 'ROC Curve',\r\n        };\r\n        var trace2 = {\r\n            x: [0, 1],\r\n            y: [0, 1],\r\n            type: 'scatter',\r\n            name: 'diagonal',\r\n        };\r\n        var layout = {\r\n            showlegend: false,\r\n            title: 'ROC Curve',\r\n            xaxis: { title: 'False Positive Rate' },\r\n            yaxis: { title: 'True Positive Rate' },\r\n        };\r\n\r\n        var data = [trace, trace2];\r\n\r\n        Plotly.newPlot(container, data, layout);\r\n    }\r\n    falsePositives(yTrue, yPred) {\r\n        return tf.tidy(() => {\r\n            const one = tf.scalar(1);\r\n            const zero = tf.scalar(0);\r\n            return tf.logicalAnd(yTrue.equal(zero), yPred.equal(one))\r\n                .sum()\r\n                .cast('float32');\r\n        });\r\n    }\r\n    indexToColor(index, max) {\r\n        return this.color_scheme_sequential((index + 1) / max);\r\n    }\r\n    indexToColorSequential(value, min, max) {\r\n        let normalizer_value = (value - min) / (max - min)\r\n        return this.color_scheme_sequential(normalizer_value);\r\n    }\r\n    reshape(array, shape) {\r\n        if (shape.length === 0) return array[0];\r\n\r\n        const [size, ...restShape] = shape;\r\n        const result = [];\r\n        const restSize = restShape.reduce((a, b) => a * b, 1);\r\n        console.log(restSize);\r\n\r\n        for (let i = 0; i < size; i++) {\r\n            result.push(this.reshape(array.slice(i * restSize, (i + 1) * restSize), restShape));\r\n        }\r\n\r\n        return result;\r\n    }\r\n    async plot_tsne(data, is_classification, labels, seed, n) {\r\n        labels = labels.flat()\r\n        const tsne = new TSNE();\r\n        let Y = await tsne.predict(data, n, seed)\r\n        let tsneComponents = Y[0].length\r\n        let tsne_traces = []\r\n        let index = 1;\r\n        let colors = []\r\n        if (is_classification) {\r\n            var uniqueLabels = [...new Set(labels.flat())];\r\n            colors = labels.map(l => this.indexToColor(uniqueLabels.indexOf(l), uniqueLabels.length));\r\n        } else {\r\n            let max = Math.max(...labels)\r\n            let min = Math.min(...labels)\r\n            colors = labels.map(item => this.indexToColorSequential(item, min, max));\r\n        }\r\n        for (let i = 0; i < tsneComponents; i++) {\r\n            for (let j = 0; j < tsneComponents; j++) {\r\n                if (j < i) {\r\n                    let x = Y.map(values => values[j]);\r\n                    let y = Y.map(values => values[i]);\r\n                    tsne_traces.push({\r\n                        x: x,\r\n                        y: y,\r\n                        mode: 'markers',\r\n                        type: 'scatter',\r\n                        xaxis: 'x' + (index),\r\n                        yaxis: 'y' + (index),\r\n                        marker: {\r\n                            color: colors,\r\n                            size: 2,\r\n                        },\r\n                    })\r\n\r\n                }\r\n                index++;\r\n            }\r\n        }\r\n        var layout = {\r\n            width: tsneComponents * 150,\r\n            height: tsneComponents * 150,\r\n            spacing: 0,\r\n            title: {\r\n                text: 'TSNE Matrix',\r\n                font: {\r\n                    size: 14\r\n                },\r\n                xref: 'paper',\r\n                x: 0.05,\r\n            },\r\n            showlegend: false,\r\n            boxmode: 'overlay',\r\n            grid: { rows: tsneComponents, xgap: 0.0, ygap: 0.0, columns: tsneComponents, pattern: 'independent' },\r\n            margin: { t: 30, r: 30, l: 30, b: 40 },\r\n        };\r\n        for (var i = 0; i < tsneComponents; i++) {\r\n            for (var j = 0; j < tsneComponents; j++) {\r\n                var xAxisKey = 'xaxis' + ((i * tsneComponents) + j + 1);\r\n                var yAxisKey = 'yaxis' + ((i * tsneComponents) + j + 1);\r\n                let fontSize = 10;\r\n                layout[xAxisKey] = {\r\n                    linecolor: 'black',\r\n                    linewidth: 1,\r\n                    mirror: true,\r\n                    showgrid: false,\r\n                    showticklabels: false,\r\n                    tickfont: {\r\n                        size: fontSize\r\n                    },\r\n                };\r\n                layout[yAxisKey] = {\r\n                    linecolor: 'black',\r\n                    linewidth: 1,\r\n                    mirror: true,\r\n                    showgrid: false,\r\n                    showticklabels: false,\r\n                    tickfont: {\r\n                        size: fontSize\r\n                    },\r\n                };\r\n                if (i === tsneComponents - 1) {\r\n                    layout[xAxisKey] = {\r\n                        linecolor: 'black',\r\n                        linewidth: 1,\r\n                        mirror: true,\r\n                        tickfont: {\r\n                            size: fontSize\r\n                        },\r\n                        title: {\r\n                            text: 'Component-' + (j + 1), font: {\r\n                                size: fontSize\r\n                            },\r\n                        }\r\n                    };\r\n\r\n                }\r\n                if (j === 0) {\r\n                    layout[yAxisKey] = {\r\n                        linecolor: 'black',\r\n                        linewidth: 1,\r\n                        mirror: true,\r\n                        tickfont: {\r\n                            size: fontSize\r\n                        },\r\n                        title: {\r\n                            text: 'Component-' + (i + 1), font: {\r\n                                size: fontSize\r\n                            },\r\n                        }\r\n                    };\r\n                }\r\n            }\r\n        }\r\n        Plotly.react('tsne', tsne_traces, layout, {\r\n            ...plotlyImageExportConfig,\r\n            staticPlot: false,\r\n        })\r\n\r\n    }\r\n    trueNegatives(yTrue, yPred) {\r\n        return tf.tidy(() => {\r\n            const zero = tf.scalar(0);\r\n            return tf.logicalAnd(yTrue.equal(zero), yPred.equal(zero))\r\n                .sum()\r\n                .cast('float32');\r\n        });\r\n    }\r\n\r\n    // TODO(cais): Use tf.metrics.falsePositiveRate when available.\r\n    falsePositiveRate(yTrue, yPred) {\r\n        return tf.tidy(() => {\r\n            const fp = this.falsePositives(yTrue, yPred);\r\n            const tn = this.trueNegatives(yTrue, yPred);\r\n            return fp.div(fp.add(tn));\r\n        });\r\n    }\r\n    drawROC(targets, probs) {\r\n\r\n        return tf.tidy(() => {\r\n            const thresholds = [\r\n                0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55,\r\n                0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.92, 0.94, 0.96, 0.98, 1.0\r\n            ];\r\n            const tprs = [];  // True positive rates.\r\n            const fprs = [];  // False positive rates.\r\n            let area = 0;\r\n            for (let i = 0; i < thresholds.length; ++i) {\r\n                const threshold = thresholds[i];\r\n                const threshPredictions = binarize(probs, threshold).as1D();\r\n\r\n                const fpr = this.falsePositiveRate(targets, threshPredictions).dataSync()[0];\r\n                const tpr = tf.metrics.recall(targets, threshPredictions).dataSync()[0];\r\n\r\n                fprs.push(fpr);\r\n                tprs.push(tpr);\r\n                // Accumulate to area for AUC calculation.\r\n                if (i > 0) {\r\n                    area += (tprs[i] + tprs[i - 1]) * (fprs[i - 1] - fprs[i]) / 2;\r\n                }\r\n            }\r\n            return [area, fprs, tprs];\r\n        });\r\n    }\r\n    nrd(x) {\r\n        let s = ss.standardDeviation(x);\r\n        const iqr = ss.interquartileRange(x);\r\n        if (typeof iqr === \"number\") {\r\n            s = Math.min(s, iqr / 1.34);\r\n        }\r\n        return 1.06 * s * Math.pow(x.length, -0.2);\r\n    }\r\n    hexToRgb(hex) {\r\n        var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        return result ? {\r\n            r: parseInt(result[1], 16),\r\n            g: parseInt(result[2], 16),\r\n            b: parseInt(result[3], 16),\r\n            a: 0.5\r\n        } : null;\r\n    }\r\n    kernelFunctions = {\r\n        gaussian: function (u) {\r\n            return Math.exp(-0.5 * u * u) / Math.sqrt(2 * Math.PI);\r\n        },\r\n        uniform: function (x) {\r\n            return Math.abs(x) <= 1 ? 0.5 : 0;\r\n        },\r\n        triangular: function (x) {\r\n            return Math.abs(x) <= 1 ? 1 - Math.abs(x) : 0;\r\n        },\r\n        biweight: function (x) {\r\n            return Math.abs(x) <= 1 ? 15 / 16 * Math.pow(1 - x * x, 2) : 0;\r\n        },\r\n        triweight: function (x) {\r\n            return Math.abs(x) <= 1 ? 35 / 32 * Math.pow(1 - x * x, 3) : 0;\r\n        },\r\n        Epanechnikov: function (x) {\r\n            return Math.abs(x) <= 1 ? 0.75 * (1 - x * x) : 0;\r\n        }\r\n    };\r\n\r\n    draw_kde(dataset, column, target_name, bandwidth = \"nrd\", is_classification = false, redrawing = false) {\r\n        try {\r\n\r\n\r\n            let items = dataset.column(column).values;\r\n            let default_bandwidth = this.nrd(items).toFixed(2);\r\n            let raw_values = dataset.loc({ columns: [column, target_name] });\r\n            let uniqueLabels = [...new Set(raw_values.column(target_name).values)];\r\n            if (uniqueLabels.length === 2) {\r\n                uniqueLabels.sort()\r\n            }\r\n            let column_values = raw_values.values;\r\n            let subsets = [];\r\n            var colorIndices = uniqueLabels.map(label => this.indexToColor(uniqueLabels.indexOf(label), uniqueLabels.legend));\r\n            if (!is_classification) {\r\n                subsets.push(dataset[column].values);\r\n            } else {\r\n                for (let i = 0; i < uniqueLabels.length; i++) {\r\n                    const label = uniqueLabels[i];\r\n                    let subset = [];\r\n                    for (let i = 0; i < column_values.length; i++) {\r\n                        const item = column_values[i];\r\n                        if (item[1] === label) {\r\n                            subset.push(item[0])\r\n                        }\r\n                    }\r\n                    subsets.push(subset);\r\n                }\r\n            }\r\n\r\n            document.getElementById(\"kde_panel\").style.display = \"block\";\r\n\r\n            var newColumn = document.createElement(\"div\");\r\n            newColumn.className = \"column is-3\";\r\n            newColumn.setAttribute(\"id\", column + '-kde-plot');\r\n            if (!redrawing) {\r\n                let key = encode_name(column)\r\n\r\n                $(\"#container\").append(\r\n                    `<div class=\"column is-4 is-size-6-tablet my-1\">\r\n                <div class=\"columns is-multiline\">\r\n                <div class=\"column is-12\" >\r\n                    <div id=\"${key + '-kde-plot'}\"> </div>\r\n                    <div id=\"${key + '-boxplot'}\" style=\"height:20vh;width: 100%\">\r\n                    </div>\r\n                    <div class=\"field has-addons has-addons-centered my-1\">\r\n                    <div class=\"control\">\r\n                    <span class=\"select is-small\">\r\n                      <select id=\"${key + '-kernel_type'}\">\r\n                      <option value=\"gaussian\">gaussian</option>\r\n                        <option value=\"uniform\">uniform</option>\r\n                        <option value=\"triangular\">triangular</option>\r\n                        <option value=\"biweight\">biweight</option>\r\n                        <option value=\"triweight\">triweight</option>\r\n                        <option value=\"Epanechnikov\">Epanechnikov</option>\r\n                      </select>\r\n                    </span>\r\n                    <p class=\"help is-success\">Kernel</p>\r\n                  </div>\r\n                  <div class=\"control\">\r\n                        <div class=\"select is-small\">\r\n                            <select id=\"${key + '--normal'}\">\r\n                                <option value=\"0\">No</option>\r\n                                <option value=\"1\">Scale</option>\r\n                                <option value=\"2\">x^2</option>\r\n                                <option value=\"3\">ln(x)</option>\r\n                                <option value=\"4\">Standardize </option>\r\n                            </select>\r\n                        </div>\r\n                    <p class=\"help is-success\">Normalization</p>\r\n                    </div>\r\n                        <div class=\"control\">\r\n                            <input class=\"input is-small\" type=\"number\"  min=\"0\" id=\"${key + '-kde'}\" value=\"${default_bandwidth}\">\r\n                            <p class=\"help is-success\">Bandwidth</p>\r\n                        </div>\r\n                        <p class=\"control\">\r\n                            <a class=\"button is-success is-small\" id=\"${key + '-kde-button'}\">\r\n                                Apply\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                  </div>\r\n                </div>`\r\n                );\r\n                document.getElementById(key + '--normal').addEventListener('change', function () {\r\n                    const target = document.getElementById(\"target\").value;\r\n                    let is_classification = document.getElementById(target).value !== FeatureCategories.Numerical;\r\n                    let data = dataset.loc({ columns: [column, target] });\r\n                    let normalization_type = document.getElementById(key + '--normal').value\r\n                    scale_data(data, column, normalization_type)\r\n                    data.dropNa({ axis: 1, inplace: true })\r\n                    var newBandwidth = parseFloat(document.getElementById(key + '-kde').value);\r\n                    current_class.draw_kde(data, column, target, newBandwidth, is_classification, true);\r\n                });\r\n            }\r\n            var current_class = this;\r\n            let key = encode_name(column)\r\n\r\n            document.getElementById(key + '-kde-button').addEventListener(\"click\", function () {\r\n                const target = document.getElementById(\"target\").value;\r\n                let is_classification = document.getElementById(target).value !== FeatureCategories.Numerical;\r\n                let data = dataset.loc({ columns: [column, target] });\r\n                let normalization_type = document.getElementById(key + '--normal').value\r\n                scale_data(data, column, normalization_type)\r\n                var newBandwidth = parseFloat(document.getElementById(key + '-kde').value);\r\n                data.dropNa({ axis: 1, inplace: true })\r\n                current_class.draw_kde(data, column, target, newBandwidth, is_classification, true);\r\n            });\r\n            let container_id = key + '-kde-plot';\r\n            let items_range = [...raw_values.column(column).values]\r\n            // let minValue = Math.min(...items_range);\r\n            // let maxValue = Math.max(...items_range);\r\n            // items_range.push(minValue - parseFloat(default_bandwidth))\r\n            // items_range.push(maxValue + parseFloat(default_bandwidth))\r\n            var breaks = ss.equalIntervalBreaks(items_range, 100);\r\n            let allData = [];\r\n            let kernel_type = document.getElementById(key + \"-kernel_type\")?.value ?? \"gaussian\"\r\n            // Loop through subsets to generate data for all subsets\r\n            let traces = []\r\n            let kde;\r\n            if (is_classification) {\r\n                for (let i = 0; i < subsets.length; i++) {\r\n                    if (subsets[i].length > 2) {\r\n                        let ys = [];\r\n                        kde = ss.kernelDensityEstimation(subsets[i], this.kernelFunctions[kernel_type], bandwidth);\r\n                        let data = [];\r\n                        breaks.forEach((item) => {\r\n                            ys.push(kde(item, bandwidth));\r\n                            data.push([item, ys[ys.length - 1]]);\r\n                        });\r\n                        allData.push(data);\r\n                    } else {\r\n                        allData.push([]);\r\n                    }\r\n                    traces.push({\r\n                        name: uniqueLabels[i],\r\n                        x: subsets[i],\r\n                        marker: {\r\n                            color: colorIndices[i]\r\n                        },\r\n                        type: 'box',\r\n                    })\r\n                }\r\n            } else {\r\n                for (let i = 0; i < subsets.length; i++) {\r\n                    if (subsets[i].length > 2) {\r\n                        let ys = [];\r\n                        kde = ss.kernelDensityEstimation(subsets[i], this.kernelFunctions[kernel_type], bandwidth);\r\n                        let data = [];\r\n                        breaks.forEach((item) => {\r\n                            ys.push(kde(item, bandwidth));\r\n                            data.push([item, ys[ys.length - 1]]);\r\n                        });\r\n                        allData.push(data);\r\n                    } else {\r\n                        allData.push([]);\r\n                    }\r\n                }\r\n                traces.push({\r\n                    name: column,\r\n                    x: items,\r\n                    type: 'box',\r\n                })\r\n            }\r\n\r\n            let animationDuration = 4000;\r\n\r\n            var layout = {\r\n\r\n                yaxis: {\r\n                    visible: false,\r\n                },\r\n                showlegend: false,\r\n                margin: {\r\n                    l: 20,\r\n                    r: 10,\r\n                    b: 60,\r\n                    t: 10,\r\n                },\r\n                legend: {\r\n                    x: 1,\r\n                    xanchor: 'right',\r\n                    y: 1\r\n                },\r\n            };\r\n            Plotly.newPlot(key + '-boxplot', traces, layout, { autosize: true, responsive: true, modeBarButtonsToRemove: ['pan', 'resetScale2d', 'select2d', 'resetViews', 'sendDataToCloud', 'hoverCompareCartesian', 'lasso2d', 'drawopenpath '] });\r\n            Highcharts.chart(container_id, {\r\n                credits: {\r\n                    enabled: false\r\n                },\r\n                legend: {\r\n                    enabled: is_classification ? true : false, align: 'right',\r\n                    verticalAlign: 'top',\r\n                },\r\n                chart: {\r\n                    height: '300',\r\n                    type: \"spline\",\r\n                    animation: true,\r\n                },\r\n                title: {\r\n                    text: column // Assuming `column` is defined elsewhere\r\n                },\r\n                yAxis: {\r\n                    title: { text: null }\r\n                },\r\n                tooltip: {\r\n                    valueDecimals: 3\r\n                },\r\n                plotOptions: {\r\n                    series: {\r\n                        marker: {\r\n                            enabled: false\r\n                        },\r\n                        dashStyle: \"shortdot\",\r\n                        color: colorIndices,\r\n                        animation: {\r\n                            duration: animationDuration\r\n                        },\r\n                        area: true\r\n                    }\r\n                },\r\n                series: allData.map((data, index) => ({\r\n                    type: 'area',\r\n                    name: uniqueLabels[index],\r\n                    dashStyle: \"solid\",\r\n                    lineWidth: 2,\r\n                    color: colorIndices[index],\r\n                    data: data\r\n                }))\r\n            });\r\n            window.dispatchEvent(new Event('resize'));\r\n        } catch (error) {\r\n            throw new Error('falied at plotting kde.')\r\n        }\r\n    }\r\n    downloadPlot(container) {\r\n        Plotly.toImage(container, {\r\n            format: 'png',\r\n            width: null,\r\n            height: null,\r\n            scale: 2\r\n        }).then(function (dataUrl) {\r\n            const a = document.createElement('a');\r\n            a.href = dataUrl;\r\n            a.download = 'plot.png';\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            document.body.removeChild(a);\r\n        });\r\n    }\r\n    async classificationPCA(dataset, labels, missclassifications, uniqueLabels, index, n) {\r\n        labels = labels.flat()\r\n        const pca = new PCA();\r\n        var colorIndices = labels.map(label => this.indexToColor(uniqueLabels.indexOf(label), uniqueLabels.length));\r\n        const pca_data = await pca.predict(dataset, n)\r\n        let x = []\r\n        let y = []\r\n        let x_error = []\r\n        let y_error = []\r\n        let error_texts = []\r\n        let real_labels = []\r\n        let missclassificationColors = []\r\n        let truePredsColors = []\r\n        pca_data[0].forEach((element, i) => {\r\n            if (missclassifications['indexes'].includes(i)) {\r\n                let index = missclassifications['indexes'].findIndex(index => index == i)\r\n                error_texts.push(dataset[i].join())\r\n                real_labels.push([labels[i], missclassifications['mispredictions'][index]])\r\n                x_error.push(element[0])\r\n                y_error.push(element[1])\r\n                missclassificationColors.push(colorIndices[i])\r\n            } else {\r\n                x.push(element[0])\r\n                y.push(element[1])\r\n                truePredsColors.push(colorIndices[i])\r\n            }\r\n\r\n        });\r\n        var trace1 = {\r\n            x: x,\r\n            y: y,\r\n            name: 'Predictions',\r\n            text: labels,\r\n            mode: 'markers',\r\n            type: 'scatter',\r\n            marker: {\r\n                size: 4,\r\n                color: truePredsColors,\r\n                symbol: 'circle'\r\n            },\r\n        };\r\n        var trace2 = {\r\n            name: 'Missclassifications',\r\n            x: x_error,\r\n            y: y_error,\r\n            text: error_texts,\r\n            customdata: real_labels,\r\n            mode: 'markers',\r\n            type: 'scatter',\r\n            marker: {\r\n                size: 7,\r\n                color: missclassificationColors,\r\n                symbol: 'cross'\r\n            },\r\n            hovertemplate:\r\n                \"Features : %{text}<br>\" +\r\n                \"True class: %{customdata[0]}<br>\" +\r\n                \"Predited class: %{customdata[1]}\" +\r\n                \"<extra></extra>\"\r\n\r\n        };\r\n        var data = [trace1, trace2];\r\n\r\n        Plotly.newPlot('pca_results_' + index, data, {\r\n            title: {\r\n                text: 'Principle Component Analysis of Predictions'\r\n            },\r\n            hovermode: \"closest\",\r\n            hoverlabel: { bgcolor: \"#FFF\" },\r\n            showlegend: true,\r\n            legend: {\r\n                x: 1,\r\n                xanchor: 'right',\r\n                y: 1,\r\n                bgcolor: 'rgba(0,0,0,0)',\r\n\r\n            },\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: 'PC1'\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: 'PC2'\r\n            }\r\n        }, { ...plotlyImageExportConfig, staticPlot: false, responsive: true, modeBarButtonsToRemove: ['resetScale2d', 'select2d', 'resetViews', 'sendDataToCloud', 'hoverCompareCartesian', 'lasso2d', 'drawopenpath '] });\r\n\r\n    }\r\n    purge_charts(id) {\r\n        Plotly.purge(id)\r\n    }\r\n    async draw_pca(dataset, is_classification, labels, numberOfComponents, axes, columns, drawScreePlot = false) {\r\n        const pca = new PCA();\r\n        labels = labels.flat()\r\n        const [pca_data, _, explained_variances, circels, distances] = await pca.predict(dataset, numberOfComponents)\r\n        let pcaComponents = pca_data[0].length;\r\n\r\n        let x = []\r\n        let pca_traces = []\r\n        for (let i = 0; i < axes.length; i++) {\r\n            let principle_components = []\r\n            let axis = axes[i]\r\n            pca_data.forEach((element, i) => {\r\n                principle_components.push({\r\n                    x: element[axis[0] - 1],\r\n                    y: element[axis[1] - 1],\r\n                    label: labels[i]\r\n                })\r\n                x.push(labels[i][0])\r\n            });\r\n        }\r\n        pca_traces = []\r\n        let index = 1;\r\n        let colors = []\r\n        if (is_classification) {\r\n            var uniqueLabels = [...new Set(labels)];\r\n            colors = labels.map(l => this.indexToColor(uniqueLabels.indexOf(l), uniqueLabels.length));\r\n        } else {\r\n            let max = Math.max(...labels)\r\n            let min = Math.min(...labels)\r\n            colors = labels.map(item => this.indexToColorSequential(item, min, max));\r\n        }\r\n        for (let i = 0; i < pcaComponents; i++) {\r\n            for (let j = 0; j < pcaComponents; j++) {\r\n                if (j < i) {\r\n                    let x = pca_data.map(pca_values => pca_values[j]);\r\n                    let y = pca_data.map(pca_values => pca_values[i]);\r\n                    pca_traces.push({\r\n                        x: x,\r\n                        y: y,\r\n                        mode: 'markers',\r\n                        type: 'scatter',\r\n                        xaxis: 'x' + (index),\r\n                        yaxis: 'y' + (index),\r\n                        marker: {\r\n                            color: colors,\r\n                            size: 2,\r\n                        },\r\n                    })\r\n\r\n                } else if (j > i) {\r\n                    let x = pca_data.map(data => data[j]);\r\n                    let y = dataset.map(data => data[i]);\r\n                    pca_traces.push({\r\n                        x: x,\r\n                        y: y,\r\n                        mode: 'markers',\r\n                        type: 'scatter',\r\n                        xaxis: 'x' + (index),\r\n                        yaxis: 'y' + (index),\r\n                        marker: {\r\n                            color: colors,\r\n                            size: 2,\r\n                        },\r\n                    })\r\n                } else {\r\n                    let x = pca_data.map(data => data[j]);\r\n                    let y = dataset.map(data => data[i]);\r\n                    pca_traces.push({\r\n                        x: x,\r\n                        y: y,\r\n                        mode: 'markers',\r\n                        type: 'scatter',\r\n                        xaxis: 'x' + (index),\r\n                        yaxis: 'y' + (index),\r\n                        marker: {\r\n                            color: colors,\r\n                            size: 2,\r\n                        },\r\n                    })\r\n                }\r\n                index++;\r\n            }\r\n        }\r\n        var layout = {\r\n            width: pcaComponents * 150,\r\n            height: pcaComponents * 150,\r\n            spacing: 0,\r\n            title: {\r\n                text: 'PCA Matrix',\r\n                font: {\r\n                    size: 14\r\n                },\r\n                xref: 'paper',\r\n                x: 0.05,\r\n            },\r\n            showlegend: false,\r\n            boxmode: 'overlay',\r\n            grid: { rows: pcaComponents, xgap: 0.0, ygap: 0.0, columns: pcaComponents, pattern: 'independent' },\r\n            margin: { t: 30, r: 30, l: 30, b: 40 },\r\n        };\r\n        for (var i = 0; i < pcaComponents; i++) {\r\n            for (var j = 0; j < pcaComponents; j++) {\r\n                var xAxisKey = 'xaxis' + ((i * pcaComponents) + j + 1);\r\n                var yAxisKey = 'yaxis' + ((i * pcaComponents) + j + 1);\r\n                let fontSize = 10;\r\n                layout[xAxisKey] = {\r\n                    linecolor: 'black',\r\n                    linewidth: 1,\r\n                    mirror: true,\r\n                    showgrid: false,\r\n                    showticklabels: false,\r\n                    tickfont: {\r\n                        size: fontSize\r\n                    },\r\n                };\r\n                layout[yAxisKey] = {\r\n                    linecolor: 'black',\r\n                    linewidth: 1,\r\n                    mirror: true,\r\n                    showgrid: false,\r\n                    showticklabels: false,\r\n                    tickfont: {\r\n                        size: fontSize\r\n                    },\r\n                };\r\n                if (i === pcaComponents - 1) {\r\n                    layout[xAxisKey] = {\r\n                        linecolor: 'black',\r\n                        linewidth: 1,\r\n                        mirror: true,\r\n                        tickfont: {\r\n                            size: fontSize\r\n                        },\r\n                        title: {\r\n                            text: 'PC-' + (j + 1), font: {\r\n                                size: fontSize\r\n                            },\r\n                        }\r\n                    };\r\n\r\n                }\r\n                if (j === 0) {\r\n                    layout[yAxisKey] = {\r\n                        linecolor: 'black',\r\n                        linewidth: 1,\r\n                        mirror: true,\r\n                        tickfont: {\r\n                            size: fontSize\r\n                        },\r\n                        title: {\r\n                            text: 'PC-' + (i + 1), font: {\r\n                                size: fontSize\r\n                            },\r\n                        }\r\n                    };\r\n                }\r\n            }\r\n        }\r\n        Plotly.react('pca_matrix', pca_traces, layout, {\r\n            ...plotlyImageExportConfig,\r\n            staticPlot: true,\r\n        })\r\n\r\n        let arrows = [];\r\n        let shapes = []\r\n\r\n        distances.forEach((distance, i) => {\r\n            arrows.push({\r\n                axref: 'x',\r\n                x: 0,\r\n                ayref: 'y',\r\n                y: 0,\r\n                arrowside: 'start',\r\n                arrowcolor: this.indexToColor(i, distances.length),\r\n                font: {\r\n                    color: this.indexToColor(i, distances.length),\r\n                    size: 8\r\n                },\r\n                xanchor: 'left',   // Align text properly\r\n                yanchor: 'top', // Align text properly\r\n                arrowwidth: 1.2,\r\n                arrowhead: 5,\r\n                text: columns[i],\r\n                hovertext: columns[i] + `(${circels[i][0].toFixed(2)},${circels[i][1].toFixed(2)})`,\r\n                ax: circels[i][0],\r\n                ay: circels[i][1],\r\n            });\r\n        })\r\n        shapes = [\r\n            {\r\n                type: 'circle',\r\n                xref: 'x',\r\n                yref: 'y',\r\n                x0: -1,\r\n                y0: -1,\r\n                x1: 1,\r\n                y1: 1,\r\n                line: {\r\n                    color: 'rgba(50, 171, 96, 1)'\r\n                }\r\n            },\r\n\r\n        ]\r\n\r\n        Plotly.newPlot('correlation_circle', [{\r\n            x: [],\r\n            y: [],\r\n            type: 'scatter',\r\n            mode: 'markers'\r\n        }], {\r\n            title: {\r\n                text: 'Biplot',\r\n                font: {\r\n                    size: 14\r\n                },\r\n                xref: 'paper',\r\n                x: 0.05,\r\n            },\r\n            annotations: arrows,\r\n            shapes: shapes,\r\n            showlegend: true,\r\n            height: 300,\r\n            width: 300,\r\n            margin: {\r\n                l: 60,\r\n                r: 40,\r\n                b: 60,\r\n                t: 40,\r\n                pad: 10\r\n            },\r\n            legend: {\r\n                x: 1,\r\n                xanchor: 'right',\r\n                y: 1, bgcolor: 'rgba(0,0,0,0)',\r\n\r\n            },\r\n            xaxis: {\r\n                range: [-1.2, 1.2],\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: 'cor with PC1'\r\n            },\r\n            yaxis: {\r\n                range: [-1.2, 1.2],\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: 'cor with PC2'\r\n            }\r\n        }, { ...plotlyImageExportConfig, responsive: true });\r\n\r\n        let cumulatedExplainedVaraince = []\r\n        let sum = 0\r\n        let compnentsaxis = []\r\n        explained_variances.forEach((element, i) => {\r\n            sum = sum + element\r\n            compnentsaxis.push(i + 1)\r\n            cumulatedExplainedVaraince.push(sum)\r\n        });\r\n        var trace1 = {\r\n            name: 'Propotional',\r\n            x: compnentsaxis,\r\n            y: explained_variances,\r\n            type: 'scatter'\r\n        };\r\n\r\n        var trace2 = {\r\n            name: 'Cumulative',\r\n            x: compnentsaxis,\r\n            y: cumulatedExplainedVaraince,\r\n            type: 'scatter'\r\n        };\r\n        var trace3 = {\r\n            showlegend: false,\r\n            x: [1.1, 1.1],\r\n            y: [0.92, 0.82],\r\n            text: ['0.9', '0.8'],\r\n            mode: 'text'\r\n        };\r\n        var data = [trace1, trace2, trace3];\r\n        if (drawScreePlot) {\r\n            Plotly.newPlot('scree_plot', data, {\r\n                title: {\r\n                    text: 'Scree Plot',\r\n                    font: {\r\n                        size: 14\r\n                    },\r\n                    xref: 'paper',\r\n                    x: 0.05,\r\n                },\r\n                legend: {\r\n                    x: 0.1,\r\n                    y: 0.2,\r\n                    traceorder: 'normal',\r\n                    orientation: \"h\",\r\n                    font: {\r\n                        size: 8,\r\n                    },\r\n                    bgcolor: 'rgba(0,0,0,0)',\r\n                },\r\n                shapes: [\r\n                    {\r\n                        type: 'line',\r\n                        x0: 1,\r\n                        y0: 0.9,\r\n                        x1: Math.max(...compnentsaxis),\r\n                        y1: 0.9,\r\n                        line: {\r\n                            color: 'rgb(250, 0, 0)',\r\n                            width: 1.5,\r\n                            dash: 'dashdot'\r\n                        }\r\n                    }, {\r\n                        type: 'line',\r\n                        x0: 1,\r\n                        y0: 0.8,\r\n                        x1: Math.max(...compnentsaxis),\r\n                        y1: 0.8,\r\n                        line: {\r\n                            color: 'rgb(50, 171, 96)',\r\n                            width: 1.5,\r\n                            dash: 'dashdot'\r\n                        }\r\n                    }],\r\n                margin: {\r\n                    l: 60,\r\n                    r: 60,\r\n                    b: 40,\r\n                    t: 40,\r\n                    pad: 10\r\n                },\r\n                xaxis: {\r\n                    linecolor: 'black',\r\n                    linewidth: 1,\r\n                    tickmode: 'linear',\r\n                    dtick: 1,\r\n                    mirror: true,\r\n                    zeroline: false,\r\n                    title: 'Number of PCs'\r\n                },\r\n                yaxis: {\r\n                    linecolor: 'black',\r\n                    linewidth: 1,\r\n                    rang: [0, 1],\r\n                    zeroline: false,\r\n                    mirror: true,\r\n                    title: 'Explained variance'\r\n                }\r\n            }, { ...plotlyImageExportConfig, responsive: true });\r\n        }\r\n\r\n        // Highcharts.chart('scree_plot', {\r\n        //     credits: {\r\n        //         enabled: false\r\n        //     },\r\n\r\n        //     title: {\r\n        //         text: 'Explained Variance',\r\n        //     },\r\n        //     legend: {\r\n        //         verticalAlign: 'bottom',\r\n        //         align: 'left',\r\n        //         floating: true,\r\n        //     },\r\n        //     yAxis: {\r\n        //         linecolor: 'black',\r\n        //         linewidth: 2,\r\n        //         mirror: true,\r\n        //         min: 0,\r\n        //         max: 1,\r\n        //         title: {\r\n        //             text: 'Explained variance'\r\n        //         },\r\n        //         plotLines: [{\r\n        //             value: 0.9,\r\n        //             dashStyle: 'shortdash',\r\n        //             color: 'grey',\r\n        //             width: 1,\r\n        //             zIndex: 4,\r\n        //             label: {\r\n        //                 text: '0.9', align: \"right\",\r\n        //             }\r\n        //         }, {\r\n        //             value: 0.8,\r\n        //             dashStyle: 'shortdash',\r\n        //             color: 'darkgrey',\r\n        //             width: 1,\r\n        //             zIndex: 4,\r\n        //             label: {\r\n        //                 text: '0.8', align: \"right\",\r\n        //             }\r\n        //         }]\r\n\r\n        //     },\r\n        //     xAxis: {\r\n        //         linecolor: 'black',\r\n        //         linewidth: 2,\r\n        //         mirror: true,\r\n        //         labels: {\r\n        //             enabled: true,\r\n        //             formatter: function () {\r\n        //                 return this.value + 1;\r\n        //             }\r\n        //         },\r\n\r\n        //         title: {\r\n        //             text: 'Number of PCs'\r\n        //         },\r\n        //     },\r\n        //     series: [{\r\n        //         name: 'Propotional',\r\n        //         color: \"blue\",\r\n        //         data: explained_variances\r\n        //     },\r\n        //     {\r\n        //         name: 'Cumulative',\r\n        //         color: \"red\",\r\n        //         data: cumulatedExplainedVaraince\r\n        //     }],\r\n\r\n        // });\r\n        return [pca_data.map(item => Array.from(item)), cumulatedExplainedVaraince]\r\n    }\r\n    // eslint-disable-next-line no-unused-vars\r\n    drawStackedHorizontalChart(categories, lable) {\r\n        var trace1 = {\r\n            x: [20, 14, 23],\r\n            y: ['giraffes', 'orangutans', 'monkeys'],\r\n            name: 'SF Zoo',\r\n            orientation: 'h',\r\n            marker: {\r\n                color: 'rgba(55,128,191,0.6)',\r\n                width: 1\r\n            },\r\n            type: 'bar'\r\n        };\r\n\r\n        var trace2 = {\r\n            x: [12, 18, 29],\r\n            y: ['giraffes', 'orangutans', 'monkeys'],\r\n            name: 'LA Zoo',\r\n            orientation: 'h',\r\n            type: 'bar',\r\n            marker: {\r\n                color: 'rgba(255,153,51,0.6)',\r\n                width: 1\r\n            }\r\n        };\r\n\r\n        var data = [trace1, trace2];\r\n\r\n        var layout = {\r\n            title: 'Colored Bar Chart',\r\n            barmode: 'stack'\r\n        };\r\n\r\n        Plotly.newPlot('myDiv', data, layout);\r\n\r\n    }\r\n    regularization_plot(xs, ys, labels) {\r\n        const traces = []\r\n        labels.forEach((element, i) => {\r\n            traces.push({\r\n                x: xs,\r\n                y: ys.map(m => m[i]),\r\n                type: 'scatter',\r\n                name: element,\r\n                mode: 'line'\r\n            })\r\n        });\r\n        var layout = {\r\n            colorway: ['#f3cec9', '#e7a4b6', '#cd7eaf', '#a262a9', '#6f4d96', '#3d3b72', '#182844'],\r\n            title: 'Lasso Coefficients as Alpha varies',\r\n            xaxis: {\r\n                type: 'log',\r\n                title: 'Alpha (Regularization Strength)'\r\n            },\r\n            yaxis: {\r\n                title: 'Coefficient Value'\r\n            }\r\n        };\r\n        Plotly.newPlot('lasso_plot', traces, layout);\r\n    }\r\n    argmax(array) {\r\n        return array.reduce((maxIndex, currentValue, currentIndex, array) => {\r\n            return currentValue > array[maxIndex] ? currentIndex : maxIndex;\r\n        }, 0);\r\n    }\r\n    probabilities_boxplot(probs, labels, uniqueLabels, index) {\r\n        let traces = [];\r\n        let probablitiesFormatted = []\r\n        let subsets = {};\r\n        labels.forEach((true_label, i) => {\r\n            if (!(true_label in subsets)) {\r\n                subsets[true_label] = [];\r\n            }\r\n            subsets[true_label].push(probs[i]);\r\n        });\r\n        for (const trueClass in subsets) {\r\n            const classProbas = subsets[trueClass];\r\n            classProbas.forEach((proba) => {\r\n                const max = Math.max(...proba)\r\n                probablitiesFormatted.push({\r\n                    trueClass: trueClass,\r\n                    predicted: proba.findIndex(prob => prob == max),\r\n                    probablity: proba\r\n                })\r\n            })\r\n        }\r\n        let i = 0;\r\n        let x = probablitiesFormatted.map(prob => prob.predicted);\r\n        for (let true_label in subsets) {\r\n            let classIndex = uniqueLabels.findIndex(m => m == true_label)\r\n            traces.push({\r\n                type: 'box',\r\n                name: true_label,\r\n                marker: {\r\n                    color: this.indexToColor(classIndex, uniqueLabels.length),\r\n                    size: 2,\r\n                    line: {\r\n                        outlierwidth: 0.3\r\n                    }\r\n                },\r\n                line: {\r\n                    width: 0.5\r\n                },\r\n                y: probablitiesFormatted.map(m => m.probablity[i]),\r\n                x: x\r\n            });\r\n            i++;\r\n        }\r\n        // traces.forEach(trace => {\r\n        //     trace['type'] = 'violin'\r\n        // })\r\n        // Plotly.newPlot(\"proba_violin_plot_\" + index, traces, {\r\n        //     xaxis: {\r\n        //         linecolor: 'black',\r\n        //         linewidth: 1,\r\n        //         mirror: true,\r\n        //     },\r\n        //     yaxis: {\r\n        //         title: 'Predicted Probability',\r\n        //         linecolor: 'black',\r\n        //         zeroline: false,\r\n        //         linewidth: 1,\r\n        //         mirror: true,\r\n        //     },\r\n        //     legend: {\r\n        //         x: 1,\r\n        //         xanchor: 'right',\r\n        //         y: 1\r\n        //     },\r\n        //     violinmode: 'group'\r\n        // }, { responsive: true });\r\n        // traces.forEach(trace => {\r\n        //     trace['type'] = 'box'\r\n        // })\r\n        Plotly.newPlot(\"proba_plot_\" + index, traces, {\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: 'class'\r\n            },\r\n            yaxis: {\r\n                title: 'Predicted Probability',\r\n                linecolor: 'black',\r\n                zeroline: false,\r\n                linewidth: 1,\r\n                mirror: true,\r\n            },\r\n            legend: {\r\n                x: 1,\r\n                xanchor: 'right',\r\n                y: 1,\r\n                bgcolor: 'rgba(0,0,0,0)',\r\n\r\n            },\r\n            boxmode: 'group'\r\n        }, { responsive: true });\r\n    }\r\n\r\n    async plotConfusionMatrix(y, predictedLabels, labels, uniqueClasses, tab_index) {\r\n\r\n        const confusionMatrix = await metrics.confusionMatrix(y, predictedLabels, uniqueClasses.length);\r\n        let metric = await ClassificationMetric(y.arraySync(), predictedLabels.arraySync(), uniqueClasses)\r\n        let accuracy = metric.accuracy.toFixed(2);\r\n        let f1Micro = metric.f1_micro.toFixed(2)\r\n        let f1Macro = metric.f1_macro.toFixed(2)\r\n\r\n        let len = confusionMatrix[0].length\r\n        let preceissions = [];\r\n        let recalls = [];\r\n        for (let j = 0; j < len; j++) {\r\n            preceissions.push(parseFloat(metric.precision[j].toFixed(2)))\r\n        }\r\n        for (let j = 0; j < len; j++) {\r\n            recalls.push(parseFloat(metric.recall[j].toFixed(2)))\r\n        }\r\n        tensorflow.dispose(y)\r\n        tensorflow.dispose(predictedLabels)\r\n        const metric_labels = [\"Precession\", \"Recall\", \"F1 score\", \"Support\"]\r\n        labels.push(\"Precession\")\r\n        recalls.push(0)\r\n        confusionMatrix.push(preceissions)\r\n        let items_labels = labels.filter(x => !metric_labels.includes(x))\r\n        let formatted_matrix = []\r\n        for (let i = 0; i < confusionMatrix.length; i++) {\r\n            const element = confusionMatrix[i];\r\n            if (i < confusionMatrix.length - 1) {\r\n                element.push(recalls[i])\r\n            }\r\n            for (let j = 0; j < element.length; j++) {\r\n                const item = element[j];\r\n                formatted_matrix.push([j, i, item])\r\n            }\r\n        }\r\n        items_labels.push(\"Recall\")\r\n\r\n        Highcharts.chart(\"confusion_matrix_\" + tab_index, {\r\n            credits: {\r\n                enabled: false\r\n            },\r\n            exporting: {\r\n                enabled: true\r\n            },\r\n            chart: {\r\n                type: 'heatmap',\r\n                plotBorderWidth: 1\r\n            },\r\n            title: {\r\n                text: '',\r\n                style: {\r\n                    fontSize: '0.75em'\r\n                }\r\n            },\r\n\r\n            xAxis: [{\r\n                categories: items_labels,\r\n                title: {\r\n                    text: 'Predicted Class'\r\n                }\r\n            }, {\r\n                linkedTo: 0,\r\n                opposite: true,\r\n                tickLength: 0,\r\n                labels: {\r\n                    formatter: function () {\r\n                        var chart = this.chart,\r\n                            each = Highcharts.each,\r\n                            series = chart.series[0],\r\n                            sum = 0,\r\n                            x = this.value;\r\n\r\n                        series.options.data.forEach(function (p, i) {\r\n                            if (p[0] === x) {\r\n                                if (p[1] < uniqueClasses.length) {\r\n                                    sum += p[2];\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        return +sum.toFixed(2);\r\n                    }\r\n                }\r\n            }],\r\n            yAxis: [{\r\n                categories: labels,\r\n                title: {\r\n                    text: 'Actual Class'\r\n                },\r\n                reversed: true, endOnTick: false\r\n            }, {\r\n                linkedTo: 0,\r\n                opposite: true,\r\n                tickLength: 0,\r\n                labels: {\r\n                    formatter: function () {\r\n                        var chart = this.chart,\r\n                            each = Highcharts.each,\r\n                            series = chart.series[0],\r\n                            sum = 0,\r\n                            x = this.value;\r\n                        series.options.data.forEach(function (p, i) {\r\n                            if (p[1] < uniqueClasses.length) {\r\n                                if (p[1] === x) {\r\n                                    if (p[0] < uniqueClasses.length) {\r\n                                        sum += p[2];\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        });\r\n                        return +sum.toFixed(2);\r\n                    }\r\n                },\r\n                title: null\r\n            }],\r\n            colorAxis: {\r\n                min: 0,\r\n                minColor: '#FFFFFF',\r\n                maxColor: Highcharts.getOptions().colors[0]\r\n            },\r\n            legend: {\r\n                enabled: false,\r\n                align: 'center',\r\n                layout: 'horizontal',\r\n                margin: 0,\r\n                verticalAlign: 'top',\r\n                y: 5,\r\n                symbolHeight: 10\r\n            },\r\n            series: [{\r\n                name: '',\r\n                borderWidth: 1,\r\n                data: formatted_matrix,\r\n                dataLabels: {\r\n                    enabled: true,\r\n                    useHTML: true,\r\n                    color: '#000000',\r\n                    formatter: function () {\r\n                        var totalCount = this.series.data.reduce(function (acc, cur, i) {\r\n                            if ((i + 1) % (uniqueClasses.length + 1) === 0) {\r\n                                return acc\r\n                            }\r\n                            return +(acc + cur?.value).toFixed(2);\r\n                        }, 0);\r\n                        var count = this.point.value;\r\n                        var skip = this.point.index >= this.series.data.length - (1 * (uniqueClasses.length + 1));\r\n\r\n                        if (!skip && !((this.point.index + 1) % (uniqueClasses.length + 1) === 0)) {\r\n                            var percentage = +((count / totalCount) * 100).toFixed(2);\r\n                            return '<p style=\"margin:auto; text-align:center;\">' + (+count.toFixed(2)) + '<br/>(' + (+percentage).toFixed(2) + '%)</p> ';\r\n                        } else {\r\n                            return '<p style=\"margin:auto; text-align:center;\">' + (+count.toFixed(2)) + '</p>';\r\n                        }\r\n                    }\r\n                }\r\n            }],\r\n            responsive: {\r\n                rules: [{\r\n                    condition: {\r\n                        maxWidth: 200\r\n                    },\r\n                    chartOptions: {\r\n                        yAxis: {\r\n                            labels: {\r\n                                format: '{substr value 0 1}',\r\n                                padding: 0,\r\n                                style: {\r\n                                    fontSize: '6px'\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }]\r\n            }\r\n        });\r\n        return [accuracy, f1Micro, f1Macro]\r\n    }\r\n\r\n\r\n\r\n\r\n    plot_regularization(weights, alphas, names, tab_index) {\r\n        let content = `\r\n                    <div class=\"column is-6\" id=\"regularization_${tab_index}\" style=\"height: 40vh;\">\r\n                    </div>\r\n    `\r\n        $(\"#tabs_info li[data-index='\" + tab_index + \"'] #results_\" + tab_index + \"\").append(content);\r\n\r\n        let serieses = []\r\n        for (let i = 0; i < names.length; i++) {\r\n            serieses.push({\r\n                name: names[i],\r\n                data: weights.map(m => m[i])\r\n            })\r\n        }\r\n        const alphas_formatted = [];\r\n        for (let i = 0; i < alphas.length; i++) {\r\n            alphas_formatted.push(alphas[i].toFixed(2));\r\n        }\r\n        Highcharts.chart(\"regularization_\" + tab_index, {\r\n\r\n            title: {\r\n                text: '',\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Coefficients'\r\n                }\r\n            },\r\n            xAxis: {\r\n                title: {\r\n                    text: 'penalty weight'\r\n                },\r\n                categories: alphas_formatted,\r\n            },\r\n            legend: {\r\n                layout: 'vertical',\r\n                align: 'right',\r\n                verticalAlign: 'middle'\r\n            },\r\n\r\n            plotOptions: {\r\n                series: {\r\n                    label: {\r\n                        connectorAllowed: false\r\n                    },\r\n                }\r\n            },\r\n            series: serieses,\r\n            responsive: {\r\n                rules: [{\r\n                    condition: {\r\n                        maxWidth: 500\r\n                    },\r\n                    chartOptions: {\r\n                        legend: {\r\n                            layout: 'horizontal',\r\n                            align: 'center',\r\n                            verticalAlign: 'bottom'\r\n                        }\r\n                    }\r\n                }]\r\n            }\r\n        });\r\n    }\r\n    yhat_plot(y_test, predictions, container, title = '') {\r\n        Plotly.newPlot(container, [{\r\n            x: y_test,\r\n            y: predictions,\r\n            type: 'scatter',\r\n            name: \"y\",\r\n            mode: 'markers',\r\n            marker: {\r\n                color: 'blue',\r\n                size: 4\r\n            },\r\n        }, {\r\n            x: y_test,\r\n            y: y_test,\r\n            mode: 'lines',\r\n            type: 'scatter',\r\n            line: { color: 'red', dash: 'solid' },\r\n            name: 'y = x line'\r\n        }], {\r\n            height: 300,\r\n            width: 300,\r\n            title: {\r\n                text: title,\r\n                font: {\r\n                    size: 14\r\n                },\r\n                xref: 'paper',\r\n                x: 0.05,\r\n            },\r\n            showlegend: false,\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'y',\r\n                    font: {\r\n                        size: 14,\r\n                    }\r\n                },\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'Predictions',\r\n                    font: {\r\n                        size: 14,\r\n                    }\r\n                }\r\n            },\r\n            margin: {\r\n                l: 40,\r\n                r: 10,\r\n                b: 40,\r\n                t: 40,\r\n                pad: 0\r\n            }\r\n        }, {\r\n            responsive: true, staticPlot: false, ...plotlyImageExportConfig\r\n        });\r\n    }\r\n    comparison(x, y, container, title = '', yLabel = '') {\r\n        Plotly.newPlot(container, [{\r\n            x: x,\r\n            y: y,\r\n            type: 'scatter',\r\n            name: \"y\",\r\n            mode: 'line',\r\n            marker: {\r\n                color: 'blue',\r\n                size: 4\r\n            },\r\n        }], {\r\n            height: 300,\r\n            width: 300,\r\n            title: {\r\n                text: title,\r\n                font: {\r\n                    size: 14\r\n                },\r\n                xref: 'paper',\r\n                x: 0.05,\r\n            },\r\n            showlegend: false,\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                tickangle: -45,\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    font: {\r\n                        size: 14,\r\n                    }\r\n                },\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: yLabel,\r\n                    font: {\r\n                        size: 14,\r\n                    }\r\n                }\r\n            },\r\n            margin: {\r\n                l: 40,\r\n                r: 10,\r\n                b: 80,\r\n                t: 40,\r\n                pad: 0\r\n            }\r\n        }, {\r\n            responsive: true, staticPlot: false, ...plotlyImageExportConfig\r\n        });\r\n    }\r\n    residual_plot(y, residuals, container, title = '') {\r\n        Plotly.newPlot(container, [\r\n\r\n            {\r\n                x: y,\r\n                y: residuals,\r\n                type: 'scatter',\r\n                name: \"y\",\r\n                mode: 'markers',\r\n                marker: {\r\n                    color: 'blue',\r\n                    size: 4\r\n                },\r\n            },\r\n            {\r\n                x: y,\r\n                y: y.map(m => 0),\r\n                mode: 'lines',\r\n                type: 'scatter',\r\n                line: { color: 'red', dash: 'solid' },\r\n            }\r\n        ],\r\n            {\r\n                height: 300,\r\n                width: 300,\r\n                title: {\r\n                    text: title,\r\n                    font: {\r\n                        size: 14\r\n                    },\r\n                    xref: 'paper',\r\n                    x: 0.05,\r\n                },\r\n                showlegend: false,\r\n                xaxis: {\r\n                    linecolor: 'black',\r\n                    linewidth: 1,\r\n                    mirror: true,\r\n                    title: {\r\n                        text: 'y',\r\n                        font: {\r\n                            size: 14,\r\n                        }\r\n                    },\r\n                },\r\n                yaxis: {\r\n                    linecolor: 'black',\r\n                    linewidth: 1,\r\n                    mirror: true,\r\n                    title: {\r\n                        text: 'Residuals',\r\n                        font: {\r\n                            size: 14,\r\n                        }\r\n                    }\r\n                },\r\n                margin: {\r\n                    l: 40,\r\n                    r: 10,\r\n                    b: 40,\r\n                    t: 40,\r\n                    pad: 0\r\n                }\r\n            }, { responsive: true, ...plotlyImageExportConfig, staticPlot: false });\r\n    }\r\n\r\n    ScatterplotMatrix(items, features, labels, number_of_categoricals, is_classification = true, numeric_columns, categorical_columns, dataset) {\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n\r\n                let unique_labels = [...new Set(labels)];\r\n                if (unique_labels.length === 2) {\r\n                    unique_labels.sort()\r\n                }\r\n                console.log('splom', unique_labels);\r\n\r\n                var colors = labels.map(label => this.indexToColor(unique_labels.indexOf(label), unique_labels.length));\r\n                let traces = []\r\n                let index = 1;\r\n                for (let i = 0; i < features.length; i++) {\r\n                    for (let j = 0; j < features.length; j++) {\r\n                        if (i === j) {\r\n                            let subsets = [];\r\n                            let kde;\r\n                            let breaks = []\r\n                            let allData = []\r\n                            if (is_classification) {\r\n\r\n                                if (i >= features.length - number_of_categoricals) {\r\n                                    if (i === features.length - 1) {\r\n                                        for (let k = 0; k < unique_labels.length; k++) {\r\n                                            subsets.push(items.filter(m => m[items[0].length - 1] === unique_labels[k]).map(m => m[i]));\r\n                                        }\r\n                                        traces.push({\r\n                                            x: unique_labels.map(label => '' + label),\r\n                                            y: subsets.map(set => set.length),\r\n                                            type: 'bar',\r\n                                            xaxis: 'x' + (index),\r\n                                            yaxis: 'y' + (index),\r\n                                            marker: {\r\n                                                color: unique_labels.map((_, z) => this.indexToColor(z, unique_labels.length))\r\n                                                , opacity: 0.7\r\n                                            }\r\n                                        })\r\n                                    } else {\r\n                                        let unique_labels_feature = [...new Set(items.map(m => m[i]))];\r\n                                        for (let k = 0; k < unique_labels.length; k++) {\r\n                                            let lablel_items = items.filter(m => m[items[0].length - 1] === unique_labels[k])\r\n                                            let counts = [];\r\n                                            unique_labels_feature.forEach(label =>\r\n                                                counts.push(lablel_items.filter(m => m[i] === label).length)\r\n                                            )\r\n                                            subsets.push({\r\n                                                items: lablel_items,\r\n                                                counts: counts\r\n                                            });\r\n                                        }\r\n                                        unique_labels.forEach((_, i) => {\r\n                                            traces.push({\r\n                                                x: unique_labels_feature,\r\n                                                y: subsets[i].counts,\r\n                                                type: 'bar',\r\n                                                xaxis: 'x' + (index),\r\n                                                yaxis: 'y' + (index),\r\n                                                marker: {\r\n                                                    color: this.indexToColor(i, unique_labels.length)\r\n                                                    , opacity: 0.7\r\n                                                }\r\n                                            })\r\n                                        })\r\n                                    }\r\n                                } else {\r\n                                    for (let k = 0; k < unique_labels.length; k++) {\r\n                                        subsets.push(items.filter(m => m[items[0].length - 1] === unique_labels[k]).map(m => m[i]));\r\n                                    }\r\n                                    for (let ii = 0; ii < subsets.length; ii++) {\r\n                                        if (subsets[ii].length > 2) {\r\n                                            let default_bandwidth = this.nrd(subsets[ii]).toFixed(2);\r\n                                            breaks = ss.equalIntervalBreaks(subsets[ii], 100);\r\n\r\n                                            let ys = [];\r\n                                            kde = ss.kernelDensityEstimation(subsets[ii], 'gaussian', 'nrd');\r\n                                            let data = [];\r\n                                            breaks.forEach((item) => {\r\n                                                ys.push(kde(item, default_bandwidth));\r\n                                                data.push([item, ys[ys.length - 1]]);\r\n                                            });\r\n                                            allData.push(data);\r\n                                        } else {\r\n                                            allData.push([]);\r\n                                        }\r\n                                    }\r\n                                    for (let i = 0; i < allData.length; i++) {\r\n                                        traces.push({\r\n                                            type: 'scatter',\r\n                                            x: allData[i].map(m => m[0]),\r\n                                            y: allData[i].map(m => m[1]),\r\n                                            xaxis: 'x' + (index),\r\n                                            yaxis: 'y' + (index),\r\n                                            mode: 'lines',\r\n                                            name: 'Red',\r\n                                            fill: 'tozeroy',\r\n                                            line: {\r\n                                                color: this.indexToColor(i, unique_labels.length),\r\n                                                opacity: 0.7,\r\n                                                width: 3\r\n                                            }\r\n                                        })\r\n\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                if (categorical_columns.includes(features[i])) {\r\n                                    let column_items = items.map(m => m[i]);\r\n                                    let unique_classes = [...new Set(column_items)];\r\n                                    let class_frequencies = []\r\n                                    for (let i = 0; i < unique_classes.length; i++) {\r\n                                        const class_label = unique_classes[i];\r\n                                        class_frequencies.push(column_items.filter(m => m === class_label).length)\r\n                                    }\r\n                                    traces.push({\r\n                                        x: unique_classes,\r\n                                        y: class_frequencies,\r\n                                        type: 'bar',\r\n                                        name: 'Trace 1',\r\n                                        xaxis: 'x' + (index),\r\n                                        yaxis: 'y' + (index),\r\n                                    })\r\n                                } else {\r\n                                    subsets.push(items.map(m => m[i]));\r\n                                    for (let i = 0; i < subsets.length; i++) {\r\n                                        if (subsets[i].length > 2) {\r\n                                            let ys = [];\r\n                                            let default_bandwidth = this.nrd(subsets[i]).toFixed(2);\r\n                                            breaks = ss.equalIntervalBreaks(subsets[i], 100);\r\n                                            kde = ss.kernelDensityEstimation(subsets[i], 'gaussian', 'nrd');\r\n                                            let data = [];\r\n                                            breaks.forEach((item) => {\r\n                                                ys.push(kde(item, default_bandwidth));\r\n                                                data.push([item, ys[ys.length - 1]]);\r\n                                            });\r\n                                            allData.push(data);\r\n                                        } else {\r\n                                            allData.push([]);\r\n                                        }\r\n                                    }\r\n                                    traces.push({\r\n                                        type: 'scatter',\r\n                                        x: allData[0].map(m => m[0]),\r\n                                        y: allData[0].map(m => m[1]),\r\n                                        mode: 'lines',\r\n                                        fill: 'tozeroy',\r\n                                        xaxis: 'x' + (index),\r\n                                        yaxis: 'y' + (index),\r\n                                        name: 'Red',\r\n                                        line: {\r\n                                            color: 'rgb(219, 64, 82)',\r\n                                            opacity: 0.7,\r\n                                            width: 3\r\n                                        }\r\n                                    })\r\n                                }\r\n\r\n                            }\r\n                        }\r\n                        else if (i === features.length - 1) {\r\n                            traces.push({\r\n                                y: items.map(m => m[i]),\r\n                                x: items.map(m => m[j]),\r\n                                color: colors,\r\n                                marker: {\r\n                                    colorscale: 'Portland',\r\n                                    color: is_classification ? colors : labels,\r\n                                    opacity: 0.7,\r\n                                    size: 2,\r\n                                },\r\n                                type: 'scattergl',\r\n                                mode: 'markers',\r\n                                xaxis: 'x' + (index),\r\n                                yaxis: 'y' + (index),\r\n                            })\r\n                        } else if (j >= features.length - number_of_categoricals) {\r\n                            if (!is_classification) {\r\n                                traces.push({\r\n                                    x: [],\r\n                                    y: [],\r\n                                    mode: 'lines',\r\n                                    name: 'Trace 1'\r\n                                })\r\n                            } else {\r\n\r\n                                let boxplot_labels = [...new Set(items.map(m => m[j]))].sort((a, b) => a - b)\r\n                                let boxtraces = []\r\n                                for (let m = 0; m < unique_labels.length; m++) {\r\n                                    for (let n = 0; n < boxplot_labels.length; n++) {\r\n\r\n                                        let box_items = items.filter(item => item[j] === boxplot_labels[n] && item[features.length - 1] === unique_labels[m])\r\n                                        if (box_items) {\r\n                                            boxtraces.push({\r\n                                                y: box_items.map(item => item[i]),\r\n                                                marker: {\r\n                                                    color: this.indexToColor(m, unique_labels.length),\r\n                                                    size: 2,\r\n                                                    line: {\r\n                                                        outlierwidth: 0.3\r\n                                                    }\r\n                                                },\r\n                                                type: 'box',\r\n                                                xaxis: 'x' + (index),\r\n                                                yaxis: 'y' + (index),\r\n                                                line: {\r\n                                                    width: 0.5\r\n                                                }\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (j < features.length - 1) {\r\n                                    for (let i = 0; i < (boxtraces.length) / 2; i++) {\r\n                                        boxtraces[i]['x'] = Array(boxtraces[i]['y'].length).fill(i);\r\n                                        if (boxtraces[((boxtraces.length) / 2) + i]) {\r\n                                            boxtraces[((boxtraces.length) / 2) + i]['x'] = Array(boxtraces[i]['y'].length).fill(i + 0.5);\r\n                                        }\r\n                                    }\r\n                                    traces = traces.concat(boxtraces)\r\n                                } else {\r\n                                    traces = traces.concat(boxtraces)\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (j > i) {\r\n                                let arr1 = items.map(m => m[i])\r\n                                let arr2 = items.map(m => m[j])\r\n                                traces.push({\r\n                                    x: [1.5],\r\n                                    y: [1.5],\r\n                                    text: [jStat.corrcoeff(arr1, arr2).toFixed(2)],\r\n                                    mode: 'text',\r\n                                    textfont: {\r\n                                        size: 12, // Font size for the text\r\n                                        color: 'black'\r\n                                    },\r\n                                    xaxis: 'x' + (index),\r\n                                    yaxis: 'y' + (index),\r\n                                    type: 'scatter'\r\n                                });\r\n\r\n                            } else {\r\n                                traces.push({\r\n                                    y: items.map(m => m[i]),\r\n                                    x: items.map(m => m[j]),\r\n                                    color: colors,\r\n\r\n                                    type: 'scattergl',\r\n                                    mode: 'markers',\r\n                                    marker: {\r\n                                        colorscale: 'Portland',\r\n                                        color: is_classification ? colors : labels,\r\n                                        size: 2,\r\n                                    },\r\n                                    xaxis: 'x' + (index),\r\n                                    yaxis: 'y' + (index),\r\n                                })\r\n                            }\r\n                        }\r\n                        index++\r\n                    }\r\n\r\n                }\r\n\r\n                var layout = {\r\n                    width: features.length * 100,\r\n                    height: features.length * 100,\r\n                    spacing: 0,\r\n                    showlegend: false,\r\n                    boxmode: 'overlay',\r\n                    grid: { rows: features.length, xgap: 0.0, ygap: 0.0, columns: features.length, pattern: 'independent' },\r\n                    margin: { t: 20, r: 20 },\r\n\r\n                };\r\n                for (var i = 0; i < features.length; i++) {\r\n                    for (var j = 0; j < features.length; j++) {\r\n                        var xAxisKey = 'xaxis' + ((i * features.length) + j + 1);\r\n                        var yAxisKey = 'yaxis' + ((i * features.length) + j + 1);\r\n                        let fontSize = 10;\r\n                        layout[xAxisKey] = {\r\n                            linecolor: 'black',\r\n                            linewidth: 1,\r\n                            mirror: true,\r\n                            showgrid: false,\r\n                            showticklabels: false,\r\n                            tickfont: {\r\n                                size: fontSize\r\n                            },\r\n                        };\r\n                        layout[yAxisKey] = {\r\n                            linecolor: 'black',\r\n                            linewidth: 1,\r\n                            mirror: true,\r\n                            showgrid: false,\r\n                            showticklabels: false,\r\n                            tickfont: {\r\n                                size: fontSize\r\n                            },\r\n                        };\r\n                        if (i === features.length - 1) {\r\n                            layout[xAxisKey] = {\r\n                                linecolor: 'black',\r\n                                linewidth: 1,\r\n                                mirror: true,\r\n                                tickfont: {\r\n                                    size: fontSize\r\n                                },\r\n                                title: {\r\n                                    text: features[j], font: {\r\n                                        size: fontSize\r\n                                    },\r\n                                }\r\n                            };\r\n\r\n                        }\r\n                        if (j === 0) {\r\n                            layout[yAxisKey] = {\r\n                                linecolor: 'black',\r\n                                linewidth: 1,\r\n                                mirror: true,\r\n                                tickfont: {\r\n                                    size: fontSize\r\n                                },\r\n                                title: {\r\n                                    text: features[i], font: {\r\n                                        size: fontSize\r\n                                    },\r\n                                }\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n\r\n                Plotly.react('scatterplot_mtx', traces, layout, {\r\n                    ...plotlyImageExportConfig,\r\n                    staticPlot: true,\r\n                    modeBarButtonsToRemove: ['resetScale2d', 'select2d', 'resetViews', 'sendDataToCloud', 'hoverCompareCartesian', 'lasso2d', 'drawopenpath ']\r\n                })\r\n                resolve()\r\n            }, 1000);\r\n        })\r\n    }\r\n\r\n    KNNPerformancePlot(results, best_n, id, label = \"Accuracy\") {\r\n        let traces = []\r\n        traces.push({\r\n            x: results.map(m => m[1]),\r\n            y: results.filter(n => n[0] === 'manhattan').map(m => Number(m[2])),\r\n            mode: 'lines',\r\n            name: 'manhattan test set',\r\n            line: {\r\n                color: 'rgb(55, 128, 191)',\r\n                width: 2\r\n            }\r\n        });\r\n\r\n        traces.push({\r\n            x: results.map(m => m[1]),\r\n            y: results.filter(n => n[0] === 'euclidean').map(m => Number(m[2])),\r\n            mode: 'lines',\r\n            name: 'euclidean test set',\r\n            line: {\r\n                color: 'rgb(219, 64, 82)',\r\n                width: 2\r\n            }\r\n        });\r\n\r\n        var layout = {\r\n            showlegend: true,\r\n            legend: {\r\n                x: 0.1,\r\n                y: 0.2,\r\n                traceorder: 'normal',\r\n                orientation: \"h\",\r\n                font: {\r\n                    size: 12,\r\n                },\r\n                bgcolor: 'rgba(0,0,0,0)',\r\n            },\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'K',\r\n                },\r\n            },\r\n            yaxis: {\r\n                range: [0, 1],\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: label,\r\n                }\r\n            },\r\n            shapes: [\r\n                {\r\n                    type: 'line',\r\n                    x0: best_n,\r\n                    y0: 0,\r\n                    x1: best_n,\r\n                    y1: 1,\r\n                    line: {\r\n                        dash: 'dot',\r\n                        color: 'rgb(55, 128, 191)',\r\n                        width: 1\r\n                    }\r\n                },]\r\n        };\r\n        Plotly.newPlot(\"knn_table_\" + id, traces, layout, { responsive: true });\r\n    }\r\n    KNNPerformancePlotRegression(results, optimalTrainSpec, optimalTestSpec, id) {\r\n        let traces = []\r\n        traces.push({\r\n            x: results.map(m => m.k),\r\n            y: results.filter(n => n.metric === 'manhattan').map(m => Number((m.evaluation).toFixed(2))),\r\n            mode: 'lines',\r\n            name: 'manhattan test set',\r\n            line: {\r\n                color: 'rgb(55, 128, 191)',\r\n                width: 2\r\n            }\r\n        });\r\n\r\n        traces.push({\r\n            x: results.map(m => m.k),\r\n            y: results.filter(n => n.metric === 'euclidean').map(m => Number((m.evaluation).toFixed(2))),\r\n            mode: 'lines',\r\n            name: 'euclidean test set',\r\n            line: {\r\n                color: 'rgb(219, 64, 82)',\r\n                width: 2\r\n            }\r\n        });\r\n        traces.push({\r\n            x: results.map(m => m.k),\r\n            y: results.filter(n => n.metric === 'manhattan').map(m => Number((m.evaluation_train).toFixed(2))),\r\n            mode: 'lines',\r\n            name: 'manhattan train set',\r\n            line: {\r\n                color: 'rgb(55, 128, 191)',\r\n                width: 1\r\n            }\r\n        });\r\n        traces.push({\r\n            x: results.map(m => m.k),\r\n            y: results.filter(n => n.metric === 'euclidean').map(m => Number((m.evaluation_train).toFixed(2))),\r\n            mode: 'lines',\r\n            name: 'euclidean train set',\r\n            line: {\r\n                color: 'rgb(219, 64, 82)',\r\n                width: 1\r\n            }\r\n        });\r\n        var min_y = Number.POSITIVE_INFINITY;\r\n        var max_y = Number.NEGATIVE_INFINITY;\r\n        traces.forEach(trace => {\r\n            let min = Math.min(...trace.y)\r\n            let max = Math.max(...trace.y)\r\n            if (min < min_y) {\r\n                min_y = min\r\n            }\r\n            if (max > max_y) {\r\n                max_y = max\r\n            }\r\n\r\n        })\r\n        var layout = {\r\n            showlegend: true,\r\n            legend: {\r\n                x: 0.1,\r\n                y: 0.2,\r\n                traceorder: 'normal',\r\n                orientation: \"h\",\r\n                font: {\r\n                    size: 10,\r\n                },\r\n                bgcolor: 'rgba(0,0,0,0)',\r\n            },\r\n            xaxis: {\r\n                title: {\r\n                    text: 'K',\r\n                },\r\n            },\r\n            yaxis: {\r\n                title: {\r\n                    text: 'MSE',\r\n                }\r\n            },\r\n            shapes: [\r\n                {\r\n                    type: 'line',\r\n                    x0: optimalTrainSpec.k,\r\n                    y0: min_y,\r\n                    x1: optimalTrainSpec.k,\r\n                    y1: max_y,\r\n                    line: {\r\n                        color: 'rgb(55, 128, 191)',\r\n                        width: 1\r\n                    }\r\n                }, {\r\n                    type: 'line',\r\n                    x0: optimalTestSpec.k,\r\n                    y0: min_y,\r\n                    x1: optimalTestSpec.k,\r\n                    y1: max_y,\r\n                    line: {\r\n                        color: 'rgb(55, 128, 191)',\r\n                        width: 1\r\n                    }\r\n                },]\r\n        };\r\n        Plotly.newPlot(\"knn_table_\" + id, traces, layout);\r\n    }\r\n    correaltoinMatrixColorscale(correlations) {\r\n        let featuresCount = correlations[0].length;\r\n        let corrs = [];\r\n\r\n        for (let i = 0; i < featuresCount; i++) {\r\n            corrs.push(...correlations[i])\r\n        }\r\n        corrs.sort()\r\n        let countNegatives = 0\r\n        for (let i = 0; i < corrs.length; i++) {\r\n            if (corrs[i] < 0) {\r\n                countNegatives += 1\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        let portionOfNegativeValues = Math.round(((countNegatives - 1) / corrs.length) * 100) / 100\r\n\r\n        let colorscale = [\r\n            [0, 'rgb(0, 0, 100)'],\r\n            [portionOfNegativeValues, 'rgb(161, 161, 255)'],\r\n            [portionOfNegativeValues + 0.001, 'rgb(253, 237, 237)'],\r\n            [1.0, 'rgb(255, 0, 0)']\r\n        ]\r\n        return colorscale\r\n    }\r\n    async correlationHeatmap(id, correlations, names) {\r\n\r\n        var data = [\r\n            {\r\n                z: correlations,\r\n                x: names,\r\n                y: names,\r\n                type: 'heatmap',\r\n                zmin: -1,\r\n                zmax: 1,\r\n                hoverongaps: false,\r\n                colorscale: [\r\n                    [0, 'rgb(74,141,255)'],\r\n                    [0.10, 'rgb(102,151,255)'],\r\n                    [0.20, 'rgb(121,170,255)'],\r\n                    [0.30, 'rgb(137,187,255)'],\r\n                    [0.40, 'rgb(205,221,255)'],\r\n                    [0.50, 'rgb(255,255,255)'],\r\n                    [0.51, 'rgb(253, 237, 237)'],\r\n                    [0.6, 'rgb(255,169,169)'],\r\n                    [0.75, 'rgb(249,100,100)'],\r\n                    [0.95, 'rgb(225,0,0)'],\r\n                    [1.0, 'rgb(165,0,0)']\r\n                ],\r\n                showscale: false,\r\n            }\r\n        ];\r\n        var layout = {\r\n\r\n            annotations: [],\r\n            font: {\r\n                size: 10\r\n            },\r\n            xaxis: {\r\n                ticks: '',\r\n                side: 'bottom',\r\n                tickangle: -90,\r\n            },\r\n            yaxis: {\r\n                autorange: \"reversed\",\r\n                tickangle: -45,\r\n                ticks: '',\r\n                ticksuffix: ' ',\r\n            },\r\n            autosize: true,\r\n\r\n        };\r\n        for (var i = 0; i < names.length; i++) {\r\n            for (var j = names.length - 1; j >= 0; j--) {\r\n                var currentValue = correlations[i][j];\r\n                let textColor\r\n                if (currentValue <= 0.0) {\r\n                    textColor = 'black';\r\n                } else {\r\n                    textColor = 'black';\r\n                }\r\n                var result = {\r\n                    xref: 'x1',\r\n                    yref: 'y1',\r\n                    x: names[i],\r\n                    y: names[j],\r\n                    text: currentValue.toFixed(2),\r\n                    font: {\r\n                        family: 'Arial',\r\n                        size: 8,\r\n                        color: textColor\r\n                    },\r\n                    showarrow: false,\r\n                };\r\n                layout.annotations.push(result);\r\n            }\r\n        }\r\n\r\n        await Plotly.newPlot(id, data, layout, { ...plotlyImageExportConfig, responsive: true });\r\n    }\r\n    async dendogramPlot(id, correlations, linkage, names, originalColumns) {\r\n\r\n        var trace4 = {\r\n            x: names,\r\n            y: names,\r\n            z: correlations,\r\n            type: 'heatmap',\r\n            zmin: -1,\r\n            zmax: 1,\r\n            hoverongaps: false,\r\n            colorscale: [\r\n                [0, 'rgb(74,141,255)'],\r\n                [0.10, 'rgb(102,151,255)'],\r\n                [0.20, 'rgb(121,170,255)'],\r\n                [0.30, 'rgb(137,187,255)'],\r\n                [0.40, 'rgb(205,221,255)'],\r\n                [0.50, 'rgb(255,255,255)'],\r\n                [0.51, 'rgb(253, 237, 237)'],\r\n                [0.6, 'rgb(255,169,169)'],\r\n                [0.75, 'rgb(249,100,100)'],\r\n                [0.95, 'rgb(225,0,0)'],\r\n                [1.0, 'rgb(165,0,0)']\r\n            ],\r\n            xaxis: 'x',\r\n            yaxis: 'y',\r\n            colorbar: {\r\n                thickness: 10,\r\n                len: 0.5,\r\n            }\r\n        };\r\n        let indices = []\r\n        let linksLength = linkage.length + 1;\r\n        let currentLimitY = 0;\r\n        let prevLimitY = 0;\r\n        let clusterY = 0\r\n        let clusterX = 0\r\n        for (let i = 0; i < originalColumns.length; i++) {\r\n            indices.push(names.findIndex(name => name == originalColumns[i]))\r\n        }\r\n        let tickValues = []\r\n        for (let i = 0; i < linksLength; i++) {\r\n            tickValues.push((i + 1) * 10)\r\n        }\r\n\r\n        let dendrogramUP = {\r\n            'data': [],\r\n            'layout': {\r\n                'width': '100%', 'showlegend': false,\r\n                'xaxis': {\r\n                    'showticklabels': true, 'tickmode': 'array', 'ticks': 'outside',\r\n                    'showgrid': false, 'mirror': 'allticks', 'zeroline': false, 'showline': true, 'rangemode': 'tozero',\r\n                    'type': 'linear'\r\n                }, 'yaxis': {\r\n                    'showticklabels': true, 'ticks': 'outside', 'showgrid': false, 'mirror': 'allticks', 'zeroline':\r\n                        false, 'showline': true, 'rangemode': 'tozero', 'type': 'linear'\r\n                }, 'hovermode': 'closest', 'autosize': false, 'height': '100%'\r\n            }\r\n        }\r\n\r\n        let dendrogramRIGHT = {\r\n            'data': [],\r\n            'layout': {\r\n                'width': '100%', 'showlegend': false,\r\n                'xaxis': {\r\n                    'showticklabels': true, 'ticks': 'outside', 'showgrid': false, 'mirror': 'allticks', 'zeroline': false, 'showline': true,\r\n                    'rangemode': 'tozero', 'type': 'linear'\r\n                }, 'yaxis': {\r\n                    'showticklabels': true, 'tickmode': 'array', 'ticks': 'outside', 'showgrid': false,\r\n                    'mirror': 'allticks', 'zeroline': false, 'showline': true, 'rangemode': 'tozero',\r\n                    'type': 'linear'\r\n                }, 'hovermode': 'closest', 'autosize': false,\r\n                'height': '100%'\r\n            }\r\n        }\r\n        let history = {}\r\n\r\n        linkage.forEach((link, i) => {\r\n            let l0, l1;\r\n            if (indices[link[0]] + 1) {\r\n                l0 = indices[link[0]] + 1 ?? link[0] + 1\r\n            }\r\n            if (indices[link[1]] + 1) {\r\n                l1 = indices[link[1]] + 1 ?? link[1] + 1\r\n            }\r\n            if (currentLimitY == 0) {\r\n                currentLimitY = (parseFloat(i + 1) / linksLength);\r\n            }\r\n            if (l0 <= linksLength && l1 <= linksLength) {\r\n                clusterX = ((l0 * (Math.max(...tickValues) / linksLength) + l1 * (Math.max(...tickValues) / linksLength)) / 2)\r\n                dendrogramUP.data.push({\r\n                    'yaxis': 'y2', 'x': [l0 * 10, l0 * 10, l1 * 10, l1 * 10],\r\n                    'mode': 'lines', 'xaxis': 'x', 'marker': { 'color': `${this.indexToColor(i)}` },\r\n                    'y': [\r\n                        prevLimitY, currentLimitY,\r\n                        currentLimitY, prevLimitY\r\n                    ],\r\n                    'type': 'scatter'\r\n                })\r\n\r\n            } else {\r\n                prevLimitY = l0 <= linksLength ? currentLimitY : history[link[0]]?.y_current;\r\n                currentLimitY = (parseFloat(i + 1) / linksLength);\r\n                let x = [\r\n                    (l0 <= linksLength ? l0 * 10. : history[link[0]]?.x),\r\n                    (l0 <= linksLength ? l0 * 10. : history[link[0]]?.x),\r\n                    (l1 <= linksLength ? l1 * 10. : history[link[1]]?.x),\r\n                    (l1 <= linksLength ? l1 * 10. : history[link[1]]?.x),\r\n                ]\r\n                let y = [\r\n                    history[link[0]]?.y_current ?? 0, currentLimitY,\r\n                    currentLimitY, history[link[1]]?.y_current ?? 0\r\n                ]\r\n                dendrogramUP.data.push({\r\n                    'yaxis': 'y2', 'x': x,\r\n                    'mode': 'lines', 'xaxis': 'x', 'marker': { 'color': `${this.indexToColor(i)}` },\r\n                    'y': y,\r\n                    'type': 'scatter'\r\n                })\r\n                clusterX = x.reduce((prev, curr) => prev + curr, 0) / 4;\r\n\r\n            }\r\n            history[linksLength + i] = { x: clusterX, y_current: currentLimitY }\r\n\r\n        })\r\n\r\n\r\n\r\n        let currentLimitX = 0;\r\n        let prevLimitX = 0;\r\n        history = []\r\n        linkage.forEach((link, i) => {\r\n            let l0 = indices[link[0]] + 1\r\n            let l1 = indices[link[1]] + 1\r\n\r\n            if (currentLimitX == 0) {\r\n                currentLimitX = (parseFloat(i + 1) / linksLength);\r\n            }\r\n            if (l0 <= linksLength && l1 <= linksLength) {\r\n                clusterY = ((l0 * -10 + l1 * -10) / 2) - 2\r\n                dendrogramRIGHT.data.push({\r\n                    'yaxis': 'y', 'y': [l0 * -10, l0 * -10, l1 * -10, l1 * -10],\r\n                    'mode': 'lines', 'xaxis': 'x2', 'marker': { 'color': `${this.indexToColor(i)}` },\r\n                    'x': [\r\n                        prevLimitX, currentLimitX,\r\n                        currentLimitX, prevLimitX\r\n                    ],\r\n                    'type': 'scatter'\r\n                })\r\n            } else {\r\n                prevLimitX = l0 <= linksLength ? currentLimitX : history[link[0]].x;\r\n                currentLimitX = (parseFloat(i + 1) / linksLength);\r\n                let y = [\r\n                    (l0 <= linksLength ? l0 * -10. : history[link[0]]?.y),\r\n                    (l0 <= linksLength ? l0 * -10. : history[link[0]]?.y),\r\n                    (l1 <= linksLength ? l1 * -10. : history[link[1]]?.y),\r\n                    (l1 <= linksLength ? l1 * -10. : history[link[1]]?.y),\r\n                ]\r\n                dendrogramRIGHT.data.push({\r\n                    'yaxis': 'y', 'y': y,\r\n                    'mode': 'lines', 'xaxis': 'x2', 'marker': { 'color': `${this.indexToColor(i)}` },\r\n                    'x': [\r\n                        history[link[0]]?.x ?? 0, currentLimitX,\r\n                        currentLimitX, history[link[1]]?.x ?? 0\r\n                    ],\r\n                    'type': 'scatter'\r\n                })\r\n                clusterY = y.reduce((prev, curr) => prev + curr, 0) / 4\r\n            }\r\n            history[linksLength + i] = { y: clusterY, x: currentLimitX }\r\n        })\r\n\r\n        var layout2 = {\r\n            annotations: [],\r\n            font: {\r\n                size: 10\r\n            },\r\n            autosize: true,\r\n\r\n            yaxis: {\r\n                domain: [0, 0.75],\r\n                mirror: false,\r\n                showgrid: false,\r\n                showline: false,\r\n                zeroline: false,\r\n                showticklabels: true,\r\n                ticks: \"\",\r\n                tickvals: tickValues.map(tick => -tick),\r\n                ticktext: names,\r\n                tickangle: -45,\r\n\r\n            },\r\n            xaxis: {\r\n                domain: [0, 0.75],\r\n                mirror: false,\r\n                showgrid: false,\r\n                showline: false,\r\n                zeroline: false,\r\n                showticklabels: true,\r\n                ticks: \"\",\r\n                tickvals: tickValues,\r\n                ticktext: names,\r\n                tickangle: -90,\r\n\r\n            },\r\n            xaxis2: {\r\n                domain: [0.75, 1],\r\n                mirror: false,\r\n                showgrid: false,\r\n                showline: false,\r\n                zeroline: false,\r\n                showticklabels: false,\r\n                ticks: \"\",\r\n                ticktext: names,\r\n            },\r\n            yaxis2: {\r\n                domain: [0.75, 1],\r\n                mirror: false,\r\n                showgrid: false,\r\n                showline: false,\r\n                zeroline: false,\r\n                showticklabels: false,\r\n                ticktext: names,\r\n            },\r\n            showlegend: false,\r\n            coloraxis: {\r\n                colorscale: 'YlGnBu',\r\n                showscale: true,\r\n                cmin: -1,\r\n                cmax: 1\r\n            },\r\n            margin: { l: 60, r: 30, b: 60, t: 30 },\r\n\r\n        };\r\n        for (var i = 0; i < names.length; i++) {\r\n            for (var j = names.length - 1; j >= 0; j--) {\r\n                var currentValue = correlations[i][j];\r\n                let textColor\r\n                if (currentValue <= 0.0) {\r\n                    textColor = 'black';\r\n                } else {\r\n                    textColor = 'black';\r\n                }\r\n                var result = {\r\n                    xref: 'x',\r\n                    yref: 'y',\r\n                    x: tickValues[i],\r\n                    y: -tickValues[j],\r\n                    text: currentValue.toFixed(2),\r\n                    font: {\r\n                        family: 'Arial',\r\n                        size: 8,\r\n                        color: textColor\r\n                    },\r\n                    showarrow: false,\r\n                };\r\n                layout2.annotations.push(result);\r\n            }\r\n        }\r\n        let data = dendrogramUP['data']\r\n        data = data.concat(dendrogramRIGHT['data'])\r\n\r\n        trace4['x'] = tickValues\r\n        trace4['y'] = tickValues.map(tick => -tick)\r\n\r\n        data = data.concat(trace4)\r\n\r\n        Plotly.newPlot(id, data, layout2, { ...plotlyImageExportConfig, responsive: true });\r\n    }\r\n    PFIBoxplot(id, importances, columns) {\r\n        let traces = []\r\n        let avgs = []\r\n        importances.forEach(importance => {\r\n            const importancesMean = importance.reduce((a, b) => a + b, 0)\r\n            avgs.push((importancesMean / importance.length))\r\n        });\r\n        let max = Math.max(...avgs)\r\n        let min = Math.min(...avgs)\r\n\r\n        importances.forEach((importance, index) => {\r\n\r\n            traces.push(\r\n                {\r\n                    x: Array.from(importance),\r\n                    type: 'box',\r\n                    name: columns[index],\r\n                    marker: { color: this.indexToColor(index, importances.length) },\r\n                }\r\n            )\r\n        });\r\n        var layout = {\r\n            title: {\r\n                text: 'Permutation Feature Importance',\r\n                font: {\r\n                    size: 14\r\n                },\r\n                xref: 'paper',\r\n                x: 0.05,\r\n            },\r\n            showlegend: false,\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                zeroline: false,\r\n\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                automargin: true,\r\n                zeroline: false,\r\n\r\n            },\r\n        };\r\n\r\n        Plotly.newPlot('pfi_boxplot_' + id, traces, layout, { responsive: true });\r\n    }\r\n    plotPDP(id, averages, grids, labels, columns, categorical_columns) {\r\n        let pfiChartId = 'pdp_containers_' + id;\r\n        id = 'pdp_plot_' + id\r\n\r\n        grids.forEach((grid, i) => {\r\n            let element = document.getElementById(pfiChartId);\r\n            let chartContainer = document.createElement(\"div\");\r\n            chartContainer.classList.add(\"column\", \"is-6\");\r\n            let chartId = id + '_' + i;\r\n            chartContainer.id = chartId\r\n            chartContainer.style.height = \"400px\";\r\n            element.after(chartContainer)\r\n            let traces = []\r\n            const isCategorical = categorical_columns.includes(columns[i])\r\n            averages[i].forEach((average, index) => {\r\n                if (isCategorical) {\r\n                    traces.push(\r\n                        {\r\n                            x: grid,\r\n                            y: Array.from(average),\r\n                            type: 'bar',\r\n                            name: labels[index],\r\n                            marker: { color: this.indexToColor(index, averages[i].length) }\r\n                        }\r\n                    )\r\n                } else {\r\n                    traces.push(\r\n                        {\r\n                            x: grid,\r\n                            y: Array.from(average),\r\n                            mode: 'line',\r\n                            name: labels[index],\r\n                            marker: { color: this.indexToColor(index, averages[i].length) }\r\n                        }\r\n                    )\r\n                }\r\n\r\n            });\r\n            var layout = {\r\n\r\n                title: {\r\n                    text: 'Partial Dependence Plot - ' + columns[i],\r\n                    font: {\r\n                        size: 14\r\n                    },\r\n                    xref: 'paper',\r\n                    x: 0.05,\r\n                },\r\n                legend: { \"orientation\": \"h\" },\r\n\r\n                font: {\r\n                    size: 10\r\n                },\r\n                autosize: true,\r\n                xaxis: {\r\n                    linecolor: 'black',\r\n                    linewidth: 1,\r\n                    mirror: true,\r\n                    zeroline: false,\r\n                },\r\n                yaxis: {\r\n                    linecolor: 'black',\r\n                    zeroline: false,\r\n                    linewidth: 1,\r\n                    mirror: true,\r\n                    title: {\r\n                        text: 'Prediction',\r\n                    }\r\n                },\r\n            };\r\n\r\n            Plotly.newPlot(chartId, traces, layout, { ...plotlyImageExportConfig, responsive: true });\r\n        });\r\n    }\r\n    plotPDPRegression(id, averages, grids, labels, columns, categoricals) {\r\n        let pfiChartId = 'pfi_boxplot_' + id;\r\n        let element = document.getElementById(pfiChartId);\r\n        let chartContainer = document.createElement(\"div\");\r\n        chartContainer.classList.add(\"column\", \"is-6\");\r\n        const chartId = id + '_number';\r\n        chartContainer.id = chartId\r\n        chartContainer.style.height = \"400px\";\r\n        element.after(chartContainer);\r\n        element = document.getElementById(chartId);\r\n\r\n        chartContainer = document.createElement(\"div\");\r\n        chartContainer.classList.add(\"column\", \"is-6\");\r\n        const chartIdCategorical = id + '_class';\r\n        chartContainer.id = chartIdCategorical\r\n        chartContainer.style.height = \"400px\";\r\n        element.after(chartContainer);\r\n\r\n        let traces = []\r\n        let traces_categoricals = []\r\n        let allxs = []\r\n        // grids.forEach((grid, i) => {\r\n        //     if (!categoricals.includes(columns[i])) {\r\n        //         allxs = allxs.concat(grid)\r\n        //     }\r\n        // })\r\n        // scaler.fit(allxs)\r\n        grids.forEach((grid, i) => {\r\n            if (!categoricals.includes(columns[i])) {\r\n                averages[i].forEach((average, index) => {\r\n                    let scaler = new MinMaxScaler();\r\n                    scaler.fit(grid)\r\n                    // let xs = scaler.transform(grid)\r\n                    let xs = grid\r\n\r\n                    traces.push(\r\n                        {\r\n                            x: xs,\r\n                            y: Array.from(average),\r\n                            mode: 'line',\r\n                            name: columns[i],\r\n                            marker: { color: this.indexToColor(i, averages.length) }\r\n                        }\r\n                    )\r\n                });\r\n            } else {\r\n                averages[i].forEach((average, index) => {\r\n                    traces_categoricals.push(\r\n                        {\r\n                            x: grid,\r\n                            y: Array.from(average),\r\n                            type: 'bar',\r\n                            name: columns[i],\r\n                            marker: { color: this.indexToColor(i, averages.length), opacity: 0.7 }\r\n                        }\r\n                    )\r\n                });\r\n            }\r\n\r\n        });\r\n        var layout = {\r\n            title: {\r\n                text: 'Partial Dependence Plot',\r\n                font: {\r\n                    size: 14\r\n                },\r\n                xref: 'paper',\r\n                x: 0.05,\r\n            },\r\n            legend: {\r\n                x: 0.1,\r\n                y: 1,\r\n                orientation: \"h\",\r\n                font: {\r\n                    size: 8\r\n                },\r\n                bgcolor: 'rgba(0,0,0,0)',\r\n            },\r\n\r\n            font: {\r\n                size: 10\r\n            },\r\n            autosize: true,\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                zeroline: false,\r\n                title: {\r\n                    text: 'Feature',\r\n                }\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                zeroline: false,\r\n                title: {\r\n                    text: 'Prediction',\r\n                }\r\n            },\r\n        };\r\n        Plotly.newPlot(chartId, traces, layout, { ...plotlyImageExportConfig, responsive: true });\r\n        var layout2 = {\r\n            title: {\r\n                text: 'Partial Dependence Plot',\r\n                font: {\r\n                    size: 14\r\n                },\r\n                xref: 'paper',\r\n                x: 0.05,\r\n            },\r\n\r\n            barmode: 'group',\r\n            font: {\r\n                size: 10\r\n            },\r\n            autosize: true,\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'Feature',\r\n                }\r\n            },\r\n            bargap: 0.05,\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                title: {\r\n                    text: 'Prediction',\r\n                }\r\n            },\r\n        };\r\n\r\n        Plotly.newPlot(chartIdCategorical, traces_categoricals, layout2);\r\n    }\r\n    drawAutoencoder(points, xIndex = 1, yIndex = 0, labels, is_classification) {\r\n        labels = labels.map(l => l[0])\r\n        let colors = [];\r\n        if (is_classification) {\r\n            var uniqueLabels = [...new Set(labels)];\r\n            colors = points.map((_, i) => this.indexToColor(uniqueLabels.indexOf(labels[i]), uniqueLabels.length))\r\n        } else {\r\n            let min = Math.min(...labels);\r\n            let max = Math.max(...labels);\r\n            colors = labels.map(label => this.indexToColorSequential(label, min, max))\r\n        }\r\n        var trace1 = {\r\n            x: points.map(point => point[xIndex]),\r\n            y: points.map(point => point[yIndex]),\r\n            mode: 'markers',\r\n            type: 'scatter',\r\n            name: 'Team A',\r\n            marker: {\r\n                size: 3,\r\n                color: colors\r\n            }\r\n        };\r\n\r\n        var data = [trace1];\r\n\r\n        var layout = {\r\n            legend: {\r\n                y: 0.5,\r\n                yref: 'paper',\r\n                font: {\r\n                    family: 'Arial, sans-serif',\r\n                    size: 20,\r\n                    color: 'grey',\r\n                }\r\n            },\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                zeroline: false,\r\n\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                zeroline: false,\r\n                mirror: true,\r\n            },\r\n            margin: {\r\n                l: 50,\r\n                r: 40,\r\n                b: 50,\r\n                t: 40,\r\n                pad: 20\r\n            },\r\n        };\r\n\r\n        Plotly.newPlot('autoencoder', data, layout);\r\n    }\r\n    plotROC(id, fprs, tprs, labels, auc) {\r\n\r\n        let traces = []\r\n        fprs.forEach((fpr, index) => {\r\n            traces.push(\r\n                {\r\n                    x: fpr,\r\n                    y: tprs[index],\r\n                    mode: 'line',\r\n                    name: labels[index],\r\n                    marker: { color: this.indexToColor(index, labels.length) }\r\n                }\r\n            )\r\n        });\r\n        traces.push(\r\n            {\r\n                x: [0, 1],\r\n                y: [0, 1],\r\n                mode: 'line',\r\n                name: 'Chance Line',\r\n                marker: { color: 'black' },\r\n                line: {\r\n                    dash: 'dot',\r\n                    width: 1\r\n                }\r\n            }\r\n        )\r\n        var layout = {\r\n            title: {\r\n                text: (labels.length > 2 ? ' One-vs-Rest Strategy ROC Curve' : 'ROC Curve') + ' AUC: ' + (+auc).toFixed(2),\r\n                font: {\r\n                    size: 14\r\n                },\r\n            },\r\n            margin: {\r\n                b: 40,\r\n            },\r\n            legend: {\r\n                x: 1,\r\n                xanchor: 'right',\r\n                y: 0.1,\r\n                bgcolor: 'rgba(0,0,0,0)',\r\n\r\n            },\r\n            showlegend: true,\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                range: [-0.1, 1.1],\r\n                mirror: true,\r\n                title: {\r\n                    text: 'False positive rate',\r\n                },\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n                range: [-0.1, 1.1],\r\n                title: {\r\n                    text: 'True positive rate',\r\n                }\r\n            },\r\n        };\r\n\r\n        Plotly.newPlot('roc_plot_' + id, traces, layout, { responsive: true });\r\n    }\r\n\r\n    uniformSplist(n) {\r\n        let numbers = []\r\n        for (let i = 0; i < n; i++) {\r\n            numbers.push(i / (n - 1))\r\n        }\r\n        return numbers;\r\n    }\r\n    parallelCoordinatePlot(features, labels, column_names, is_classification) {\r\n        let labelEncoder = new LabelEncoder()\r\n        if (is_classification) {\r\n            labelEncoder.fit(labels)\r\n            labels = labelEncoder.transform(labels)\r\n        }\r\n        var uniqueLabels = [...new Set(labels)];\r\n        if (uniqueLabels.length === 2) {\r\n            uniqueLabels.sort()\r\n        }\r\n        console.log('pc labels', uniqueLabels);\r\n\r\n        let points = this.uniformSplist(uniqueLabels.length)\r\n        let colorMapping = uniqueLabels.map((label, i) => [points[i], this.indexToColor(uniqueLabels.indexOf(label), uniqueLabels.length)])\r\n\r\n        var data = [{\r\n            type: 'parcoords',\r\n            pad: [20, 20, 20, 20],\r\n            line: {\r\n                color: labels,\r\n                colorscale: is_classification ? colorMapping : 'jet',\r\n            },\r\n            dimensions: []\r\n        }];\r\n\r\n        column_names.forEach((column_name, i) => {\r\n            data[0].dimensions.push({\r\n                label: column_name,\r\n                values: features.map(m => m[i])\r\n            })\r\n\r\n        })\r\n        var layout = {\r\n            title: {\r\n                text: 'Parallel Coordinate Plot',\r\n                font: {\r\n                    size: 14\r\n                },\r\n                xref: 'paper',\r\n                x: 0.05,\r\n            },\r\n            xaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n            },\r\n            yaxis: {\r\n                linecolor: 'black',\r\n                linewidth: 1,\r\n                mirror: true,\r\n            },\r\n        };\r\n\r\n        Plotly.newPlot('parallel_coordinate_plot', data, layout, { ...plotlyImageExportConfig, responsive: true, modeBarButtonsToRemove: ['resetScale2d', 'select2d', 'resetViews', 'sendDataToCloud', 'hoverCompareCartesian', 'lasso2d', 'drawopenpath '] });\r\n    }\r\n}","/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-undef */\r\n\r\nimport { MinMaxScaler, StandardScaler } from 'danfojs/dist/danfojs-base';\r\nimport { encode_name } from './utils';\r\nimport { FeatureCategories, Settings } from \"./settings.js\";\r\nexport default class UI {\r\n    constructor(parser, chart_controller) {\r\n        this.data_parser = parser\r\n        this.chart_controller = chart_controller\r\n    }\r\n\r\n    get_model_settings() {\r\n        let model_settings = {};\r\n        let model_name = parseInt(document.getElementById('model_name').value);\r\n        const target = document.getElementById(\"target\").value;\r\n        let is_classification = document.getElementById(target).value !== FeatureCategories.Numerical;\r\n        var model;\r\n        if (is_classification) {\r\n            for (const m in Settings.classification) {\r\n                if (Settings.classification[m].value === model_name) {\r\n                    model_name = m\r\n                    model_settings.name = Settings.classification[m].label\r\n                    model = Settings.classification[model_name];\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            for (const m in Settings.regression) {\r\n                if (Settings.regression[m].value === model_name) {\r\n                    model_name = m\r\n                    model_settings.name = Settings.regression[m].label\r\n                    model = Settings.regression[model_name];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        model_name = parseInt(document.getElementById('model_name').value);\r\n        for (const option in model?.options) {\r\n            if (model.options[option].type === \"select\") {\r\n                let option_value = document.getElementById(option + \"_\" + model_name)?.value;\r\n                model_settings[option] = option_value ?? model.options[option].default\r\n            } else {\r\n                if (model.options[option].type === \"number\") {\r\n                    let option_value = document.getElementById(option + \"_\" + model_name)?.value;\r\n                    model_settings[option] = !option_value ? model.options[option].default : parseFloat(option_value)\r\n                } else {\r\n                    let option_value = document.getElementById(option + \"_\" + model_name)?.value;\r\n                    model_settings[option] = option_value ?? model.options[option].default\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return model_settings\r\n    }\r\n\r\n    scale_data(dataset, column, normalization_type) {\r\n        switch (normalization_type) {\r\n            case \"1\": {\r\n                let scaler = new MinMaxScaler()\r\n                scaler.fit(dataset[column])\r\n                dataset.addColumn(column, scaler.transform(dataset[column]), { inplace: true })\r\n                break;\r\n            }\r\n            case \"2\":\r\n                dataset.addColumn(column, dataset[column].apply((x) => x * x), { inplace: true })\r\n                break;\r\n            case \"3\":\r\n                dataset.addColumn(column, dataset[column].apply((x) => Math.log(x)), { inplace: true })\r\n                break;\r\n            case \"4\": {\r\n                let scaler = new StandardScaler()\r\n                scaler.fit(dataset[column])\r\n                dataset.addColumn(column, scaler.transform(dataset[column]), { inplace: true })\r\n                break;\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    createAlgorithmsSelect(category) {\r\n        let result = '<div id=\"algorithm\" class=\"column is-9\"><div class=\"select is-small mb-1\"> <select id=\"model_name\" class=\"select\">'\r\n        const label = category == 1 ? \"regression\" : \"classification\"\r\n        for (const key in Settings[label]) {\r\n            if (Settings.hasOwnProperty.call(Settings[label], key)) {\r\n                const item = Settings[label][key];\r\n                result += `<option value=\"${item.value}\">${item.label}</option>`\r\n            }\r\n        }\r\n        result += '</select></div></div>'\r\n\r\n        return result\r\n    }\r\n    updateAlgorithmsSelect(category) {\r\n        let result = '<div class=\"select is-small mb-1\"> <select id=\"model_name\" class=\"select\">'\r\n        const label = category == 1 ? \"regression\" : \"classification\"\r\n        for (const key in Settings[label]) {\r\n            if (Settings.hasOwnProperty.call(Settings[label], key)) {\r\n                const item = Settings[label][key];\r\n                result += `<option value=\"${item.value}\">${item.label}</option>`\r\n            }\r\n        }\r\n        result += '</select></div>'\r\n        return result\r\n    }\r\n\r\n    find_selected_columns(columns, get_all = false) {\r\n        const selected_columns = [];\r\n        columns.forEach(column => {\r\n            let key = encode_name(column)\r\n            if (document.getElementById(key + '-checkbox').checked || get_all) {\r\n                selected_columns.push(column);\r\n            }\r\n        });\r\n        return selected_columns;\r\n    }\r\n    find_selected_columns_types(columns, include_target = true) {\r\n        if (include_target === false) {\r\n            const target = document.getElementById(\"target\").value;\r\n            columns = columns.filter(column => column !== target)\r\n        }\r\n        const column_types = []\r\n        columns.forEach(column => {\r\n            let key = encode_name(column)\r\n            column_types.push({\r\n                name: column,\r\n                type: document.getElementById(key).value\r\n            })\r\n        });\r\n        return column_types\r\n    }\r\n    createTargetDropdown(items) {\r\n        let result = '<div  class=\"column is-12\"><div class=\"label is-size-7\">Target</div><div class=\"select is-fullwidth is-small mb-1\"> <select id=\"target\">'\r\n        items.columns.forEach(column => {\r\n            let key = encode_name(column)\r\n            result += `<option value=\"${key}\">${key}</option>`\r\n\r\n        });\r\n        result += '</select></div></div>'\r\n        return result\r\n    }\r\n    createFeaturesDropdown(items) {\r\n        let result = '<div  class=\"column is-4\"><h4>Target</h4><div class=\"select mb-1\"> <select class=\"select\" id=\"kde_feature\">'\r\n        for (const key in items) {\r\n            result += `<option value=\"${key}\">${key}</option>`\r\n        }\r\n        result += '</select></div></div>'\r\n        return result\r\n    }\r\n    insertSpaces(string) {\r\n        string = string.replace(/([a-z])([A-Z])/g, '$1 $2');\r\n        string = string.replace(/([A-Z])([A-Z][a-z])/g, '$1 $2')\r\n        return string;\r\n    }\r\n    renderDatasetStats(data, continuousFeatures, categoricalFeatures) {\r\n        //build numerical feature table table\r\n        let continuousFeaturesStats = []\r\n        let categoricalFeaturesStats = []\r\n\r\n        const continuousHeaders =\r\n            [{ field: 'name', label: '#' }, { field: 'min', label: 'Min' }, { field: 'max', label: 'Max' },\r\n            { field: 'mean', label: 'Mean' },\r\n            { field: 'median', label: 'Median' }\r\n                , { field: 'std', label: 'std' }, { field: 'missingVlauesCount', label: '# NAs' }\r\n                , { field: 'type', label: 'type' }\r\n            ];\r\n        const categoricalHeaders =\r\n            [{ field: 'name', label: '#' }, { field: 'shape', label: 'Shape' }, { field: 'mode', label: 'Mode' }, { field: 'percentage', label: 'Mode Percentage' }\r\n                , { field: 'missingVlauesCount', label: '# NAs' }\r\n            ];\r\n\r\n        for (let i = 0; i < continuousFeatures.length; i++) {\r\n            const column = continuousFeatures[i].name;\r\n            continuousFeaturesStats.push({\r\n                name: column,\r\n                min: data.column(column).min().toFixed(2),\r\n                max: data.column(column).max().toFixed(2),\r\n                median: data.column(column).median().toFixed(2),\r\n                mean: data.column(column).mean().toFixed(2),\r\n                std: data.column(column).std().toFixed(2),\r\n                missingValuesCount: data.column(column).isNa().sum(),\r\n                type: 1,\r\n                selected: continuousFeatures[i].selected\r\n            })\r\n        }\r\n\r\n\r\n        categoricalFeatures.forEach((item) => {\r\n            let column = item.name\r\n            const shape = [...new Set(data.column(column).values)];\r\n            const category_info = this.getCategoricalMode(data.column(column).values)\r\n            categoricalFeaturesStats.push({\r\n                name: column,\r\n                shape: shape.length,\r\n                mode: category_info['mode'],\r\n                percentage: ((category_info[category_info['mode']] / category_info['total'])).toFixed(2),\r\n                missingValuesCount: data.column(column).isNa().sum(),\r\n                type: 2,\r\n                selected: item.selected\r\n            })\r\n\r\n        });\r\n        return [\r\n            continuousHeaders,\r\n            continuousFeaturesStats,\r\n            categoricalHeaders,\r\n            categoricalFeaturesStats,\r\n        ]\r\n\r\n    }\r\n    getCategoricalMode(arr) {\r\n        if (arr.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const categoryCount = {};\r\n        categoryCount['total'] = 0\r\n        categoryCount['mode'] = ''\r\n        for (let i = 0; i < arr.length; i++) {\r\n            const category = arr[i];\r\n            if (category === null || category === undefined) {\r\n                continue\r\n            }\r\n            categoryCount['total']++\r\n            if (category in categoryCount) {\r\n                categoryCount[category]++;\r\n            } else {\r\n                categoryCount[category] = 1;\r\n            }\r\n        }\r\n\r\n        let modeCategory = null;\r\n        let modeCount = 0;\r\n        for (const category in categoryCount) {\r\n            if (category === 'total') {\r\n                continue\r\n            }\r\n            if (categoryCount[category] > modeCount) {\r\n                modeCategory = category;\r\n                modeCount = categoryCount[category];\r\n            }\r\n        }\r\n        categoryCount['mode'] = modeCategory;\r\n        return categoryCount;\r\n    }\r\n\r\n    get_numeric_columns(dataset, filter) {\r\n        let selected_columns = this.find_selected_columns(dataset.columns, !filter)\r\n        let selected_columns_types = this.find_selected_columns_types(selected_columns);\r\n        selected_columns = selected_columns.filter(column => {\r\n            let i = selected_columns_types.findIndex(col => col.name === column)\r\n            if (selected_columns_types[i]?.type === FeatureCategories.Numerical) {\r\n                return true;\r\n            }\r\n            return false;\r\n        })\r\n        let numericColumns = []\r\n        dataset.columns.forEach(column => {\r\n            if (dataset.column(column).dtype !== 'string' && column !== \"Id\" && selected_columns.includes(column)) {\r\n                numericColumns.push(column)\r\n            }\r\n        });\r\n        return numericColumns\r\n    }\r\n    get_categorical_columns(dataset, filter) {\r\n        let selected_columns = this.find_selected_columns(dataset.columns, !filter)\r\n        let selected_columns_types = this.find_selected_columns_types(selected_columns);\r\n        selected_columns = selected_columns.filter(column => {\r\n            let i = selected_columns_types.findIndex(col => col.name === column)\r\n            if (i !== -1 && selected_columns_types[i]?.type !== FeatureCategories.Numerical) {\r\n                return true;\r\n            }\r\n            return false;\r\n        })\r\n        let categorical_columns = []\r\n        dataset.columns.forEach(column => {\r\n            if (column !== \"Id\" && selected_columns.includes(column)) {\r\n                categorical_columns.push(column)\r\n            }\r\n        });\r\n        return categorical_columns\r\n    }\r\n    column_types(columns) {\r\n        let selected_columns = this.find_selected_columns(columns, false)\r\n        return this.find_selected_columns_types(selected_columns);\r\n    }\r\n    async visualize(dataset, file_name) {\r\n        this.renderDatasetStats(dataset);\r\n        let numericColumns = this.get_numeric_columns(dataset, true)\r\n        let categorical_columns = this.get_categorical_columns(dataset, true)\r\n        const target = document.getElementById(\"target\").value;\r\n        let columns = [...new Set(numericColumns.concat(categorical_columns))];\r\n\r\n        const filterd_dataset = dataset.loc({ columns: columns })\r\n        filterd_dataset.dropNa({ axis: 1, inplace: true })\r\n        numericColumns = numericColumns.filter(m => m !== target)\r\n        let is_classification = document.getElementById(target).value !== FeatureCategories.Numerical;\r\n        //draw kdes\r\n        let limit = 0\r\n        if (numericColumns.length > 0 && limit < 10) {\r\n            document.getElementById(\"container\").innerHTML = \"\";\r\n            numericColumns.forEach(col => {\r\n                if (col !== target) {\r\n                    this.chart_controller.draw_kde(filterd_dataset, col, target, \"nrd\", is_classification);\r\n                }\r\n            });\r\n            limit++;\r\n        }\r\n        limit = 0\r\n        //draw categories barplot\r\n        if (categorical_columns.length > 0 && limit < 10) {\r\n            document.getElementById(\"categories_barplots\").innerHTML = \"\";\r\n            categorical_columns.forEach(col => {\r\n                if (col !== target) {\r\n                    this.chart_controller.draw_categorical_barplot(filterd_dataset.loc({ columns: [col] }).values, target, col);\r\n                }\r\n            });\r\n            limit++;\r\n        }\r\n        if (is_classification) {\r\n            let labels = dataset.column(target).values;\r\n            let unique_labels = [...new Set(labels)];\r\n            let counts = [];\r\n            for (let i = 0; i < unique_labels.length; i++) {\r\n                counts.push(labels.filter(m => m === unique_labels[i]).length);\r\n            }\r\n            this.chart_controller.classification_target_chart(counts, unique_labels, file_name, \"target_chart\", target);\r\n        } else {\r\n            this.chart_controller.regression_target_chart(dataset.column(target).values, \"target_chart\", target);\r\n        }\r\n\r\n        numericColumns = this.get_numeric_columns(dataset, true)\r\n        categorical_columns = this.get_categorical_columns(dataset, true)\r\n        // features = Object.values(numericColumns).concat(Object.values(categorical_columns))\r\n\r\n        dataset = this.data_parser.handle_missing_values(dataset)\r\n        // this.chart_controller.ScatterplotMatrix(dataset.loc({ columns: features }).values, features, dataset.column(target).values, categorical_columns.length,\r\n        //     is_classification, numericColumns, categorical_columns, dataset).then(() => {\r\n        //         document.getElementById('splom_update').addEventListener('click', async function (e) {\r\n        //             console.log('update');\r\n        //             Plotly.purge('scatterplot_mtx');\r\n        //             $('#scatterplot_mtx').empty()\r\n        //             await current_class.visualize(dataset);\r\n        //         });\r\n        //     })\r\n\r\n    }\r\n\r\n\r\n    // async createSampleDataTable(dataset) {\r\n    //     let cols = []\r\n    //     let column_names = dataset.columns\r\n    //     for (let i = 0; i < column_names.length; i++) {\r\n    //         cols.push({ title: column_names[i] })\r\n    //     }\r\n    //     new DataTable('#sample_data_table', {\r\n    //         responsive: true,\r\n    //         columns: cols,\r\n    //         data: dataset.head(5).values,\r\n    //         info: false,\r\n    //         search: false,\r\n    //         ordering: false,\r\n    //         dom: '<\"my-class\">',\r\n    //         initComplete: function (settings, json) {\r\n    //             $('.my-class').html('Sample Data');\r\n    //         },\r\n    //         searching: false,\r\n    //         paging: false,\r\n    //         bDestroy: true,\r\n    //     });\r\n\r\n    // }\r\n    toggle_loading_progress(show = false) {\r\n        let element = document.getElementById(\"progress\");\r\n        if (!show) {\r\n            element.style.display = \"block\";\r\n        } else {\r\n            element.style.display = \"none\";\r\n        }\r\n\r\n    }\r\n    // show_settings(settings, numeric_columns, categorical_columns, target, dataset_name, i) {\r\n    //     let columns = numeric_columns.concat(categorical_columns)\r\n    //     let column_types = [];\r\n    //     for (let i = 0; i < columns.length; i++) {\r\n    //         const column = columns[i];\r\n    //         column_types.push({ column: column, type: document.getElementById(column + '--normal') })\r\n    //     }\r\n    //     let columns_transformation = '';\r\n    //     for (let i = 0; i < columns.length; i++) {\r\n    //         const column_name = encode_name(columns[i]);\r\n    //         let normalization_type = document.getElementById(column_name + '--normal')?.value;\r\n    //         if (normalization_type && normalization_type !== \"0\") {\r\n    //             columns_transformation += columns[i] + ': ' + normalization_type + ' '\r\n    //         }\r\n    //     }\r\n\r\n    //     let content = `\r\n    //     <div class=\"column is-12\">\r\n    //     <div class=\"notification\">\r\n    //     <p class=\"title my-1 is-5\">${settings.name}</p>\r\n    //     <div class=\"columns is-multiline is-gapless\">`;\r\n    //     for (const key in settings) {\r\n    //         if (key !== 'name') {\r\n    //             if (Object.hasOwnProperty.call(settings, key)) {\r\n    //                 const element = settings[key];\r\n    //                 content += `<div class=\"column is-12 \"><p><strong>${key}</strong>: ${element}</p></div>`\r\n    //             }\r\n    //         }\r\n\r\n    //     }\r\n    //     content += `<div class=\"column is-12 \"><p><strong>Dataset name :</strong> ${dataset_name}</p></div>`\r\n    //     content += `<div class=\"column is-12 \"><p><strong>Target :</strong> ${target}</p></div>`\r\n    //     content += `<div class=\"column is-12 \"><p><strong>Continuous featues :</strong> ${numeric_columns}</p></div>`\r\n    //     content += `<div class=\"column is-12 \"><p><strong>Categorical featues :</strong> ${categorical_columns}</p></div>`\r\n    //     content += `<div class=\"column is-12 \"><p><strong>Transformations :</strong> ${columns_transformation}</p></div>`\r\n    //     content += `<div class=\"column is-12 \">\r\n    //     <button class=\"button is-danger\" id=\"remove_${i}\"> Remove results </button>\r\n    //     </div>`\r\n\r\n    //     content += `</div></div></div>`\r\n    //     $(\"#tabs_info li[data-index='\" + i + \"'] #results_\" + i + \"\").append(content);\r\n\r\n    //     document.getElementById(\"remove_\" + i).addEventListener('click', () => {\r\n    //         $('#' + 'tab_' + i).remove();\r\n    //         if (document.getElementById(target).value !== FeatureCategories.Numerical) {\r\n    //             Plotly.purge('pca_results_' + i)\r\n    //             $('#predictions_table_' + i).DataTable().destroy();\r\n    //             $('#' + 'info_' + i).remove();\r\n    //         } else {\r\n    //             Plotly.purge('regression_y_yhat_' + i)\r\n    //             $('#predictions_table_' + i).DataTable().destroy();\r\n    //             $('#' + 'info_' + i).remove();\r\n    //         }\r\n\r\n    //     });\r\n    // }\r\n    // create_model_result_tab(index) {\r\n    //     $(\"#tabs_content\").append(`\r\n    //     <li data-index=\"${index}\" id=\"tab_${index}\">\r\n    //        <a>${index}</a>\r\n    //     </li>`)\r\n    //     $(\"#tabs_info\").append(`\r\n    //     <li data-index=\"${index}\" id=\"info_${index}\"  class=\" tabs-li\">\r\n    //     <div id=\"results_${index}\" class=\"columns is-multiline\"></div>\r\n    //     </li>`)\r\n    //     $(\"#tabs_content li\").removeClass(\"is-active\");\r\n    //     $(\"#tabs_info li\").removeClass(\"is-active\");\r\n    //     $(\"#tabs_info li[data-index='\" + index + \"']\").addClass(\"is-active\");\r\n    //     $(\"#tabs_content li[data-index='\" + index + \"']\").addClass(\"is-active\");\r\n    // }\r\n\r\n    init_tooltips(tippy) {\r\n        tippy('#kde_help', {\r\n            interactive: true,\r\n            popperOptions: {\r\n                positionFixed: true,\r\n            },\r\n            content: 'Default bandwidth method :Silverman’s rule of thumb',\r\n        });\r\n        tippy('#normalization_help', {\r\n            interactive: true,\r\n            popperOptions: {\r\n                positionFixed: true,\r\n            },\r\n            content: '<p>not functional yet</p><p>standard scaler uses z = (x - u) / s</p><p>Transform features by scaling each feature to a given range</p>',\r\n            allowHTML: true,\r\n        });\r\n        tippy('#imputation_help', {\r\n            interactive: true,\r\n            popperOptions: {\r\n                positionFixed: true,\r\n            },\r\n            content: 'currently we are just deleting rows with missing values',\r\n            allowHTML: true,\r\n        });\r\n        tippy('#cv_help', {\r\n            interactive: true,\r\n            popperOptions: {\r\n                positionFixed: true,\r\n            },\r\n            content: 'option 1 and 2 are working',\r\n            allowHTML: true,\r\n        });\r\n    }\r\n\r\n    // init_tabs_events() {\r\n    //     $(\"#tabs_content\").on(\"click\", \"li\", function () {\r\n    //         var index = $(this).data(\"index\");\r\n    //         $(\"#tabs_content li\").not(this).removeClass(\"is-active\");\r\n    //         $(\"#tabs_info li\").removeClass(\"is-active\");\r\n    //         $(\"#tabs_info li[data-index='\" + index + \"']\").addClass(\"is-active\");\r\n    //         $(this).toggleClass(\"is-active \");\r\n    //     });\r\n    //     $(\".tabs ul li\").click(function () {\r\n    //         window.dispatchEvent(new Event('resize'));\r\n    //     });\r\n    // }\r\n    predictions_table_regression(x, y, predictions, tab_index) {\r\n        let table_columns = [];\r\n        x.addColumn(\"residuals: \", y.map((item, i) => item - predictions[i]), { inplace: true });\r\n        x.addColumn(\"predictions: \", predictions, { inplace: true });\r\n        x.addColumn(\"y\", y, { inplace: true });\r\n\r\n\r\n        x.columns.forEach(element => {\r\n            table_columns.push({ title: element });\r\n        });\r\n        let columns = x.columns.slice().reverse();\r\n        new DataTable('#predictions_table_' + tab_index, {\r\n            pageLength: 5,\r\n            responsive: false,\r\n            paging: true,\r\n            columnDefs: [\r\n                {\r\n                    render: function (data) {\r\n                        return data.toFixed(2);\r\n                    },\r\n                    targets: \"_all\",\r\n                }\r\n            ],\r\n            bPaginate: true,\r\n            columns: table_columns.reverse(),\r\n            data: x.loc({ columns: columns }).values,\r\n            bDestroy: true,\r\n        });\r\n    }\r\n    removeTable(tableId) {\r\n        $(tableId).DataTable().destroy()\r\n\r\n    }\r\n    predictions_table(x, y, predictions, probs = null, tab_index = 0) {\r\n        let table_columns = [];\r\n        if (probs !== null) {\r\n            x.addColumn(\"probs\", probs, { inplace: true });\r\n        }\r\n        x.addColumn(\"y\", y, { inplace: true });\r\n        x.addColumn(\"predictions\", predictions, { inplace: true });\r\n        x.columns.forEach(element => {\r\n            table_columns.push({ title: element });\r\n        });\r\n        let columns = x.columns.slice().reverse();\r\n        new DataTable('#predictions_table_' + tab_index, {\r\n            pageLength: 10,\r\n            responsive: false,\r\n            paging: true,\r\n            \"bPaginate\": true,\r\n            columns: table_columns.reverse(),\r\n            data: x.loc({ columns: columns }).values,\r\n            bDestroy: true,\r\n            columnDefs: [\r\n                {\r\n                    // render: function (data, type, row) {\r\n                    //     for (let i = 0; i < data.length; i++) {\r\n                    //         data[i] = data[i].toFixed(2);\r\n                    //     }\r\n                    //     return data\r\n                    // },\r\n                    // targets: [-3]\r\n                },\r\n                {\r\n                    render: function (data) {\r\n                        return data.toFixed(2);\r\n                    },\r\n                    targets: [...Array(table_columns.length).keys()].filter(m => m >= 2)\r\n                }\r\n            ],\r\n            rowCallback: function (row, data) {\r\n                var prediction = data[0];\r\n                var y = data[1];\r\n                if (prediction !== y) {\r\n                    $(row).addClass('is-danger');\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n}","\r\nimport ChartController from '@/helpers/charts';\r\nimport { tensorflow } from 'danfojs/dist/danfojs-base';\r\nimport UI from '@/helpers/ui';\r\n// eslint-disable-next-line no-unused-vars\r\nimport { evaluate_classification } from '@/helpers/utils';\r\nimport { metrics } from './utils.js';\r\n\r\nexport class ClassificationModel {\r\n\r\n    constructor() {\r\n        this.chartController = new ChartController();\r\n        this.ui = new UI(null, null)\r\n        this.task = null;\r\n        this.predictions = [];\r\n        this.hasProbability = false;\r\n        this.plots = [];\r\n        this.tables = [];\r\n        this.seed = 1;\r\n        this.hasExplaination = true;\r\n        this.id = null;\r\n        this.helpSectionId = 'help';\r\n\r\n    }\r\n    async train(x, y, x_test, y_test) {\r\n        throw new Error('Not implemented', x, y, x_test, y_test)\r\n    }\r\n    async evaluateModel(y, predictions, uniqueClasses) {\r\n        return await metrics(y, predictions, uniqueClasses);\r\n    }\r\n    generatePythonCode(model_import, model_fit) {\r\n        return `\r\nfrom sklearn.datasets import load_iris\r\n${model_import}\r\nfrom sklearn.inspection import partial_dependence, PartialDependenceDisplay, permutation_importance\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\r\nfrom sklearn.decomposition import PCA\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\n# Load the Iris dataset\r\niris = load_iris()\r\nX, y = iris.data, iris.target\r\nfeature_names = iris.feature_names\r\nclass_names = iris.target_names\r\n\r\n# Split the data into train and test sets\r\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\r\n\r\n# Fit the model\r\n${model_fit}\r\nmodel.fit(X_train,y_train)\r\n# Confusion Matrix\r\ny_pred = model.predict(X_test)\r\nconf_matrix = confusion_matrix(y_test, y_pred, labels=np.unique(y))\r\ndisp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=class_names)\r\ndisp.plot(cmap=plt.cm.Blues, values_format=\"d\")\r\nplt.title(\"Confusion Matrix\")\r\nplt.show()\r\n\r\n# PCA of Results\r\npca = PCA(n_components=2)\r\nX_test_pca = pca.fit_transform(X_test)\r\n\r\n# Plot PCA results with true labels and predicted labels\r\nplt.figure(figsize=(12, 6))\r\n\r\n# Subplot 1: PCA with True Labels\r\nplt.subplot(1, 2, 1)\r\nscatter = plt.scatter(X_test_pca[:, 0], X_test_pca[:, 1], c=y_test, cmap='viridis', s=50)\r\nplt.colorbar(scatter, ticks=np.arange(len(class_names)), label=\"True Labels\")\r\nplt.title(\"PCA of Test Set (True Labels)\")\r\nplt.xlabel(\"Principal Component 1\")\r\nplt.ylabel(\"Principal Component 2\")\r\n\r\n\r\nplt.tight_layout()\r\nplt.show()\r\n# Compute and plot Partial Dependence Plot (PDP)\r\nfig, ax = plt.subplots(figsize=(12, 8))\r\nPartialDependenceDisplay.from_estimator(\r\n    model, X_train, [0, 1,2,3], feature_names=feature_names, ax=ax,target=0\r\n)\r\nplt.show()\r\n\r\n# Compute and plot Permutation Feature Importance (PFI)\r\npfi = permutation_importance(model, X_test, y_test, n_repeats=10, random_state=42)\r\n# Convert PFI results to a DataFrame for easier manipulation\r\npfi_df = pd.DataFrame({\r\n    \"Feature\": np.repeat(feature_names, repeats=pfi.importances.shape[1]),\r\n    \"Importance\": pfi.importances.ravel()\r\n})\r\n\r\n# Create boxplots for Permutation Feature Importance\r\nplt.figure(figsize=(10, 6))\r\npfi_df.boxplot(by=\"Feature\", column=\"Importance\", grid=False, vert=False, showmeans=False)\r\nplt.xlabel(\"Permutation Importance\")\r\nplt.ylabel(\"Feature\")\r\nplt.title(\"Permutation Feature Importance (PFI)\")\r\nplt.suptitle(\"\")  # Remove automatic suptitle from boxplot\r\nplt.show()\r\n        `.trim()\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder) {\r\n        // const evaluation_result = evaluate_classification(predictions, y_test, encoder);\r\n        const classes = Object.keys(encoder.$labels);\r\n\r\n        await this.chartController.plotConfusionMatrix(tensorflow.tensor(predictions), tensorflow.tensor(y_test), classes, Object.values(encoder.$labels), this.id);\r\n        // await this.chartController.classificationPCA(x_test.values, encoder.inverseTransform(y_test), evaluation_result, uniqueLabels, this.id, 2);\r\n        this.ui.predictions_table(x_test, encoder.inverseTransform(y_test), encoder.inverseTransform(predictions), null, this.id);\r\n        // this.plots.push('pca_results_' + this.id);\r\n        this.tables.push('#predictions_table_' + this.id);\r\n\r\n    }\r\n}","\r\n/* eslint-disable no-undef */\r\n/* eslint-disable no-unused-vars */\r\n\r\n\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\nimport { ClassificationModel } from '../model';\r\n\r\nexport default class LogisticRegression extends ClassificationModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options;\r\n        this.model = null;\r\n        this.summary = null;\r\n        this.model_stats_matrix = null;\r\n\r\n    }\r\n\r\n    async train(x_train, y_train, x_test, y_test, labels, categorical_columns) {\r\n        this.context = {\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            y_test: y_test,\r\n            X_test: x_test,\r\n            seed: this.seed,\r\n            regularization_type: this.options.regularization.value === \"Lasso\" ? 1 : 0,\r\n            labels: labels\r\n        };\r\n\r\n        const webR = window.webr;\r\n        await webR.init();\r\n        await webR.installPackages(['jsonlite', 'ggplot2', 'plotly', 'nnet', 'purrr', 'dplyr', 'ggrepel', 'glmnet', 'modelsummary', 'broom'], { quiet: true });\r\n        await webR.objs.globalEnv.bind('xx', x_train);\r\n        await webR.objs.globalEnv.bind('random_seed', this.seed);\r\n        await webR.objs.globalEnv.bind('x_test', x_test);\r\n\r\n        await webR.objs.globalEnv.bind('y', y_train);\r\n        await webR.objs.globalEnv.bind('names', labels);\r\n        await webR.objs.globalEnv.bind('categorical_columns', categorical_columns?.length === 0 ? ['empty'] : categorical_columns);\r\n\r\n        await webR.objs.globalEnv.bind('is_lasso', this.context.regularization_type);\r\n\r\n\r\n        const plotlyData = await webR.evalR(`\r\n                    library(plotly)\r\n                    library(ggplot2)\r\n                    library(purrr)\r\n                    library(dplyr)\r\n                    library(ggrepel)\r\n                    library(modelsummary)\r\n                    library(jsonlite)\r\n                    library(glmnet)\r\n                    library(broom)\r\n                    set.seed(random_seed)\r\n                    # Select all columns except the first as predictors. \r\n                    x <- as.matrix(xx)  \r\n                    colnames(x) <- names\r\n                    scale_df <- as.data.frame(x)\r\n                    cols_to_scale <- setdiff(names, categorical_columns)\r\n                    scale_df[cols_to_scale] <- scale(scale_df[cols_to_scale])\r\n                    if(is_lasso){\r\n                        cvfit = cv.glmnet(as.matrix(scale_df), y, alpha = 1, family = \"multinomial\", type.measure = \"class\")\r\n                    }else{\r\n                       cvfit = cv.glmnet(as.matrix(scale_df), y, alpha = 0, family = \"multinomial\", type.measure = \"class\")\r\n                    }\r\n                    betas = as.matrix(cvfit$glmnet.fit$beta)\r\n                    lambdas = cvfit$lambda\r\n                    names(lambdas) = colnames(betas)\r\n                    \r\n                    df  <- data.frame(\r\n                        log_lambda = log(cvfit$lambda),       \r\n                        mean_cv_error = cvfit$cvm,                \r\n                        lower_error = cvfit$cvup,    \r\n                        upper_error = cvfit$cvlo    \r\n                        )\r\n                    lambda_min <- log(cvfit$lambda.min) \r\n                    lambda_1se <- log(cvfit$lambda.1se)  \r\n            \r\n                    p <-ggplot(df,aes(x=log_lambda,y=mean_cv_error)) + \r\n                    geom_point(col=\"#f05454\") + \r\n                    geom_errorbar(aes(ymin = lower_error,ymax=upper_error),col=\"#30475e\") + \r\n                    geom_vline(xintercept=c(lambda_1se,lambda_min),\r\n                                linetype=\"dashed\")+\r\n                    annotate(\"text\", x = lambda_min, y = max(df$mean_cv_error), \r\n                            label = \"Min\", color = \"black\", hjust = -0.1) +\r\n                    annotate(\"text\", x = lambda_1se, y = max(df$mean_cv_error) - 0.02, \r\n                            label = \"1-SE\", color = \"black\", hjust = -0.1) +\r\n                    xlab(\"log lambda\") +\r\n                    ylab(\"Error\")+\r\n                    theme_bw()\r\n\r\n\r\n                    colnames(x_test) <- names\r\n                    model <- nnet::multinom(y ~ . , data = as.data.frame(x))\r\n                    s <- summary(model)\r\n                    coefs <- s$coefficients\r\n                    stds <- s$standard.errors\r\n                    z_scores <- coefs / stds\r\n                    p_values <- 2 * (1 - pnorm(abs(z_scores)))\r\n                    preds <- predict(model,newdata=as.data.frame(x_test))\r\n                    preds_probs <- predict(model,type = 'probs',newdata=as.data.frame(x_test))\r\n                    # confidence interval\r\n                    z <- 1.96  \r\n                    conf_int <- list()\r\n\r\n                    for (class in rownames(coef(model))) {\r\n                    conf_int[[class]] <- cbind(\r\n                        class = class,\r\n                        Estimate = coefs[class, ],\r\n                        Lower = coefs[class, ] - z * stds[class, ],\r\n                        Upper = coefs[class, ] + z * stds[class, ]\r\n                    )\r\n                    }\r\n                    conf_int_df <- do.call(rbind, conf_int)\r\n                    best_model <- glmnet(x, y, alpha =is_lasso,family = \"multinomial\", type.measure = \"class\", lambda = cvfit$lambda.min)\r\n                    coefficients <- coef(best_model)\r\n\r\n                    non_zero_features <- list()\r\n                    for (class_name in names(coefficients)) {\r\n                    class_coefficients <- coefficients[[class_name]]\r\n                    dense_coefficients <- as.matrix(class_coefficients)\r\n                    non_zero_indices <- which(dense_coefficients != 0, arr.ind = TRUE)\r\n                    non_zero_features <- c(non_zero_features,rownames(dense_coefficients)[non_zero_indices[, 1]])\r\n                    }\r\n                    non_zero_features <- unique(non_zero_features)\r\n                    non_zero_features <- unlist(Filter(function(x) x != \"\", non_zero_features))\r\n                    x_filterd <- x[,unlist(non_zero_features)]\r\n                    x_test_filterd <- x_test[,unlist(non_zero_features)]\r\n\r\n\r\n                    model_lambda_min <- nnet::multinom(y ~ . , data = as.data.frame(x_filterd))\r\n                    s <- summary(model_lambda_min)\r\n                    coefs_lambda_min <- s$coefficients\r\n                    stds_lambda_min <- s$standard.errors\r\n                    z_scores_lambda_min <- coefs_lambda_min / stds_lambda_min\r\n                    p_values_lambda_min <- 2 * (1 - pnorm(abs(z_scores_lambda_min)))\r\n                    preds_lambda_min <- predict(model_lambda_min,newdata=as.data.frame(x_test_filterd))\r\n                    preds_probs_lambda_min <- predict(model_lambda_min,type = 'probs',newdata=as.data.frame(x_test_filterd))\r\n                    # confidence interval\r\n                    z <- 1.96  \r\n                    conf_int <- list()\r\n\r\n                    for (class in rownames(coef(model_lambda_min))) {\r\n                    conf_int[[class]] <- cbind(\r\n                        class = class,\r\n                        Estimate = coefs_lambda_min[class, ],\r\n                        Lower = coefs_lambda_min[class, ] - z * stds_lambda_min[class, ],\r\n                        Upper = coefs_lambda_min[class, ] + z * stds_lambda_min[class, ]\r\n                    )\r\n                    }\r\n\r\n\r\n                    \r\n                    conf_int_lambda_min_df <- do.call(rbind, conf_int)\r\n\r\n                    best_model <- glmnet(x, y, alpha =is_lasso,family = \"multinomial\", type.measure = \"class\", lambda = cvfit$lambda.1se)\r\n                    coefficients <- coef(best_model)\r\n                    print(\"got here\")\r\n                    non_zero_features <- list()\r\n                    for (class_name in names(coefficients)) {\r\n                    class_coefficients <- coefficients[[class_name]]\r\n                    dense_coefficients <- as.matrix(class_coefficients)\r\n                    non_zero_indices <- which(dense_coefficients != 0, arr.ind = TRUE)\r\n                    non_zero_features <- c(non_zero_features,rownames(dense_coefficients)[non_zero_indices[, 1]])\r\n                    }\r\n                    non_zero_features <- unique(non_zero_features)\r\n                    non_zero_features <- unlist(Filter(function(x) x != \"\", non_zero_features))\r\n\r\n                    x_filterd <- x[,unlist(non_zero_features)]\r\n                    x_test_filterd <- x_test[,unlist(non_zero_features)]\r\n                    model_lambda_1se <- nnet::multinom(y ~ . , data = as.data.frame(x_filterd))\r\n                    s <- summary(model_lambda_1se)\r\n                    coefs_lambda_1se <- s$coefficients\r\n                    stds_lambda_1se <- s$standard.errors\r\n                    z_scores_lambda_1se <- coefs_lambda_1se / stds_lambda_1se\r\n                    p_values_lambda_1se <- 2 * (1 - pnorm(abs(z_scores_lambda_1se)))\r\n                    preds_lambda_1se <- predict(model_lambda_1se,newdata=as.data.frame(x_test_filterd))\r\n                    preds_probs_lambda_1se <- predict(model_lambda_1se,type = 'probs',newdata=as.data.frame(x_test_filterd))\r\n                    # confidence interval\r\n                    z <- 1.96  \r\n                    conf_int <- list()\r\n\r\n                    for (class in rownames(coef(model_lambda_1se))) {\r\n                    conf_int[[class]] <- cbind(\r\n                        class = class,\r\n                        Estimate = coefs_lambda_1se[class, ],\r\n                        Lower = coefs_lambda_1se[class, ] - z * stds_lambda_1se[class, ],\r\n                        Upper = coefs_lambda_1se[class, ] + z * stds_lambda_1se[class, ]\r\n                    )\r\n                    }\r\n                    conf_int_lambda_1se_df <- do.call(rbind, conf_int)\r\n\r\n                    lambda_values <- cvfit$glmnet.fit$lambda\r\n\r\n                    coef_list <- coef(cvfit$glmnet.fit)\r\n\r\n                    cv_summary <- map_df(names(coef_list), function(class) {\r\n                    coef_matrix <- as.matrix(coef_list[[class]])[-1, ]  # Remove intercept\r\n                    data.frame(\r\n                        lambda = rep(lambda_values, each = nrow(coef_matrix)),\r\n                        predictor = rep(rownames(coef_matrix), length(lambda_values)),\r\n                        coefficient = as.vector(coef_matrix),\r\n                        class = class\r\n                    )\r\n                    })\r\n\r\n                    list(\r\n                    plotly_json(p, pretty = FALSE)\r\n                    ,rownames(coefs)\r\n                    ,toJSON(coefs,pretty = TRUE)\r\n                    ,toJSON(stds,pretty = TRUE)\r\n                    ,toJSON(z_scores,pretty = TRUE)\r\n                    ,toJSON(p_values,pretty = TRUE)\r\n                    ,preds_probs\r\n                    ,preds \r\n                    ,toJSON(conf_int_df)\r\n                    ,rownames(conf_int_df)\r\n\r\n                    ,rownames(conf_int_lambda_min_df)\r\n                    ,toJSON(coefs_lambda_min,pretty = TRUE)\r\n                    ,toJSON(stds_lambda_min,pretty = TRUE)\r\n                    ,toJSON(p_values_lambda_min,pretty = TRUE)\r\n\r\n                    ,rownames(conf_int_lambda_1se_df)\r\n                    ,toJSON(coefs_lambda_1se,pretty = TRUE)\r\n                    ,toJSON(stds_lambda_1se,pretty = TRUE)\r\n                    ,toJSON(p_values_lambda_1se,pretty = TRUE)\r\n                    ,model[[\"AIC\"]]\r\n                    ,model_lambda_min[[\"AIC\"]]\r\n                    ,model_lambda_1se[[\"AIC\"]]\r\n                    ,toJSON(cv_summary)\r\n                    ,toJSON(conf_int_lambda_min_df)\r\n                    ,toJSON(conf_int_lambda_1se_df)\r\n                    ,lambda_min\r\n                    ,lambda_1se\r\n                    )\r\n\r\n                    `);\r\n        let results = await plotlyData.toArray()\r\n\r\n        this.summary = {\r\n            regularization_plot: JSON.parse(await results[0].toString()),\r\n            classes: await results[1].toArray(),\r\n            coefs: JSON.parse(await results[2].toArray()),\r\n            stds: JSON.parse(await results[3].toArray()),\r\n            z_scores: JSON.parse(await results[4].toArray()),\r\n            p_values: JSON.parse(await results[5].toArray()),\r\n            probabities: await results[6].toArray(),\r\n            predictions: (await results[7].toArray()).map(pred => pred - 1),\r\n            confidence_intervals: JSON.parse(await results[8].toString()),\r\n            confidence_intervals_row_names: await results[9].toArray(),\r\n            aic: await results[18].toNumber(),\r\n            best_fit_min: {\r\n                names: await results[10].toArray(),\r\n                confidence_intervals: JSON.parse(await results[22].toString()),\r\n                coefs: JSON.parse(await results[11].toArray()),\r\n                stds: JSON.parse(await results[12].toArray()),\r\n                p_values: JSON.parse(await results[13].toArray()),\r\n                aic: await results[19].toNumber(),\r\n\r\n            },\r\n            best_fit_1se: {\r\n                names: await results[14].toArray(),\r\n                confidence_intervals: JSON.parse(await results[23].toString()),\r\n                coefs: JSON.parse(await results[15].toArray()),\r\n                stds: JSON.parse(await results[16].toArray()),\r\n                p_values: JSON.parse(await results[17].toArray()),\r\n                aic: await results[20].toNumber(),\r\n            },\r\n            fit: JSON.parse(await results[21].toArray()),\r\n            lambda_min: await results[24].toNumber(),\r\n            lambda_1se: await results[25].toNumber(),\r\n\r\n        };\r\n\r\n        this.model_stats_matrix = [];\r\n        let cols = [...labels]\r\n        cols.unshift(\"(Intercept)\")\r\n        let min_ols_columns = [...new Set(this.summary['best_fit_min'].names)].map(m => m.replace(/^`|`$/g, ''));\r\n        let se_ols_columns = [...new Set(this.summary['best_fit_1se'].names)].map(m => m.replace(/^`|`$/g, ''));\r\n\r\n\r\n\r\n        this.summary.regularization_plot.layout['showlegend'] = false;\r\n        this.summary.regularization_plot.layout['autosize'] = true;\r\n        this.summary.regularization_plot.layout.legend = {\r\n            font: {\r\n                size: 8,\r\n                color: '#000'\r\n            },\r\n        };\r\n\r\n\r\n        for (let j = 0; j < this.summary.classes.length; j++) {\r\n            for (let i = 0; i < cols.length; i++) {\r\n                let row = [];\r\n                row.push(cols[i])\r\n                row.push((isNaN(this.summary['coefs'][j][i]) ? ' ' : this.summary['coefs'][j][i].toFixed(2)))\r\n                row.push((isNaN(this.summary['stds'][j][i]) ? ' ' : this.summary['stds'][j][i].toFixed(2)))\r\n                row.push((isNaN(this.summary['p_values'][j][i]) ? ' ' : this.summary['p_values'][j][i].toFixed(2)))\r\n\r\n                let index = min_ols_columns.findIndex(m => m === cols[i])\r\n                if (index !== -1) {\r\n                    let coef = this.summary['best_fit_min']['coefs'][j][index]\r\n                    let std = this.summary['best_fit_min']['stds'][j][index]\r\n                    let pval = this.summary['best_fit_min']['p_values'][j][index]\r\n                    row.push(isNaN(coef) ? 0 : coef.toFixed(2))\r\n                    row.push(isNaN(std) ? 0 : std.toFixed(2))\r\n                    row.push(isNaN(pval) ? 0 : pval.toFixed(2))\r\n                } else {\r\n                    row.push(' ')\r\n                    row.push(' ')\r\n                    row.push(' ')\r\n                }\r\n                index = se_ols_columns.findIndex(m => m === cols[i])\r\n                if (index !== -1) {\r\n                    let coef = this.summary['best_fit_1se']['coefs'][j][index]\r\n                    let std = this.summary['best_fit_1se']['stds'][j][index]\r\n                    let pval = this.summary['best_fit_1se']['p_values'][j][index]\r\n                    row.push(isNaN(coef) ? 0 : coef.toFixed(2))\r\n                    row.push(isNaN(std) ? 0 : std.toFixed(2))\r\n                    row.push(isNaN(pval) ? 0 : pval.toFixed(2))\r\n                } else {\r\n                    row.push(' ')\r\n                    row.push(' ')\r\n                    row.push(' ')\r\n                }\r\n                this.model_stats_matrix.push(row)\r\n            }\r\n            if (j < this.summary.classes.length - 1) {\r\n                let placeholder_row = this.model_stats_matrix[0].map(m => '');\r\n                this.model_stats_matrix.push(placeholder_row)\r\n            }\r\n        }\r\n        return this.summary['predictions'];\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        setTimeout(async () => {\r\n            let current = this;\r\n            new DataTable('#metrics_table_' + current.id, {\r\n                responsive: false,\r\n                \"footerCallback\": function (row, data, start, end, display) {\r\n                    var api = this.api();\r\n                    $(api.column(2).footer()).html(\r\n                        'AIC : ' + current.summary.aic.toFixed(2)\r\n                    );\r\n                    $(api.column(5).footer()).html(\r\n                        'AIC : ' + current.summary[\"best_fit_min\"].aic.toFixed(2)\r\n                    );\r\n                    $(api.column(8).footer()).html(\r\n                        'AIC : ' + current.summary[\"best_fit_1se\"].aic.toFixed(2)\r\n                    );\r\n                },\r\n                data: current.model_stats_matrix,\r\n                info: false,\r\n                search: false,\r\n                ordering: false,\r\n                searching: false,\r\n                paging: false,\r\n                bDestroy: true,\r\n            });\r\n            await Plotly.newPlot('regularization_' + current.id, current.summary.regularization_plot, { autosize: true });\r\n            let y_classes = this.summary.confidence_intervals_row_names\r\n                .map((item, i) => item + '_' + this.summary.confidence_intervals[i][0]).reverse()\r\n            let conf_intervals = this.summary.confidence_intervals.reverse()\r\n            let traces_params = []\r\n            let ols_y = y_classes.map((m, i) => i);\r\n            traces_params.push({\r\n                name: 'OLS',\r\n                x: conf_intervals.map(item => item[1]),\r\n                y: ols_y,\r\n                error_x: {\r\n                    type: 'data',\r\n                    array: conf_intervals.map(item => Math.abs(item[3] - item[1])),\r\n                },\r\n                type: 'scatter', mode: 'markers',\r\n                showlegend: true,  // Make sure the trace appears in the legend\r\n            })\r\n            let y_classes_min = this.summary.best_fit_min.names\r\n                .map((item, i) => item + '_' + this.summary.best_fit_min.confidence_intervals[i][0]).reverse()\r\n            let conf_intervals_min = this.summary.best_fit_min.confidence_intervals.reverse()\r\n            let lasso_y = y_classes_min.map((m, i) => i + 0.2);\r\n            traces_params.push({\r\n                name: 'lasso min',\r\n                x: conf_intervals_min.map(item => item[1]),\r\n                y: lasso_y,\r\n                error_x: {\r\n                    type: 'data',\r\n                    array: conf_intervals_min.map(item => Math.abs(item[3] - item[1])),\r\n                },\r\n                type: 'scatter', mode: 'markers',\r\n                showlegend: true,  // Make sure the trace appears in the legend\r\n            })\r\n            let _1se_y = y_classes_min.map((m, i) => i + 0.4);\r\n            let y_classes_1se = this.summary.best_fit_1se.names\r\n                .map((item, i) => item + '_' + this.summary.best_fit_1se.confidence_intervals[i][0]).reverse()\r\n            let conf_intervals_1se = this.summary.best_fit_1se.confidence_intervals.reverse()\r\n            traces_params.push({\r\n                name: 'lasso 1se',\r\n                x: conf_intervals_1se.map(item => item[1]),\r\n                y: _1se_y,\r\n                error_x: {\r\n                    type: 'data',\r\n                    array: conf_intervals_1se.map(item => Math.abs(item[3] - item[1])),\r\n                },\r\n                type: 'scatter', mode: 'markers',\r\n                showlegend: true,  // Make sure the trace appears in the legend\r\n            })\r\n            await Plotly.newPlot('parameters_plot_' + current.id, {\r\n                'data': traces_params,\r\n                'layout': {\r\n                    margin: {\r\n                        l: 80,\r\n                        r: 40,\r\n                        b: 40,\r\n                        t: 40,\r\n                        pad: 10\r\n                    },\r\n                    showlegend: true,\r\n                    legend: {\r\n                        xanchor: 'left',\r\n                        yanchor: 'top',\r\n                        x: 0.02,\r\n                        y: 0.98,\r\n                        font: {\r\n                            size: 8,  // Set font size for legend\r\n                            color: \"black\" // Change font color if needed\r\n                        },\r\n                        bgcolor: \"rgba(0,0,0,0)\"\r\n                    },\r\n                    xaxis: {\r\n                        linecolor: 'black',\r\n                        linewidth: 1,\r\n                        zeroline: true,\r\n                        mirror: true,\r\n                        title: 'Confidence interval',\r\n                    },\r\n                    yaxis: {\r\n                        linecolor: 'black',\r\n                        linewidth: 1,\r\n                        zeroline: false,\r\n                        mirror: true,\r\n                        tickvals: lasso_y,\r\n                        ticktext: y_classes_1se,\r\n                        tickfont: { size: 10 }\r\n                    },\r\n                }\r\n            });\r\n\r\n            this.summary.fit.sort((a, b) => a.lambda - b.lambda);\r\n            let subset = this.summary.fit.filter(m => m.class == '1')\r\n            let params = new Set(...[subset.filter(m => !!m.predictor).map(m => m.predictor)])\r\n            let traces = []\r\n            let annotations = []\r\n            params.forEach(param => {\r\n                let coefs = subset.filter(m => m.predictor == param).map(m => m.coefficient)\r\n                let lambdas = subset.filter(m => m.predictor == param).map(m => Math.log(m.lambda))\r\n                traces.push({\r\n                    name: param,\r\n                    y: coefs,\r\n                    x: lambdas,\r\n                    mode: 'lines',\r\n                });\r\n                annotations.push({\r\n                    xref: 'paper',\r\n                    x: .01,\r\n                    y: coefs[0],\r\n                    xanchor: 'left',\r\n                    yanchor: 'middle',\r\n                    text: param,\r\n                    font: {\r\n                        family: 'Arial',\r\n                        size: 8,\r\n                        color: 'black'\r\n                    },\r\n                    showarrow: false\r\n                });\r\n                annotations = annotations.concat([\r\n                    {\r\n                        x: this.summary.lambda_min,\r\n                        y: 0.5, // Center the text along the line\r\n                        xref: 'x',\r\n                        yref: 'paper',\r\n                        text: \"Lambda min\",\r\n                        showarrow: false,\r\n                        font: {\r\n                            size: 8,\r\n                            color: \"black\"\r\n                        },\r\n                        textangle: -90, // Rotate text to be vertical\r\n                        align: \"center\"\r\n                    },\r\n                    {\r\n                        x: this.summary.lambda_1se,\r\n                        y: 0.5, // Center the text along the line\r\n                        xref: 'x',\r\n                        yref: 'paper',\r\n                        text: \"Lambda 1se\",\r\n                        showarrow: false,\r\n                        font: {\r\n                            size: 8,\r\n                            color: \"black\"\r\n                        },\r\n                        textangle: -90, // Rotate text to be vertical\r\n                        align: \"center\"\r\n                    }\r\n                ])\r\n            });\r\n\r\n            await Plotly.newPlot('errors_' + current.id, {\r\n\r\n                'data': traces,\r\n                'layout': {\r\n                    shapes: [\r\n                        {\r\n                            type: 'line',\r\n                            x0: this.summary.lambda_min,\r\n                            x1: this.summary.lambda_min,\r\n                            y0: 0,\r\n                            y1: 1,\r\n                            xref: 'x',\r\n                            yref: 'paper',\r\n                            line: {\r\n                                color: 'black',\r\n                                dash: 'dashdot',\r\n                                width: 1\r\n                            }\r\n                        },\r\n                        {\r\n                            type: 'line',\r\n                            x0: this.summary.lambda_1se,\r\n                            x1: this.summary.lambda_1se,\r\n                            y0: 0,\r\n                            y1: 1,\r\n                            xref: 'x',\r\n                            yref: 'paper',\r\n                            line: {\r\n                                color: 'black',\r\n                                dash: 'dashdot',\r\n                                width: 1\r\n                            }\r\n                        },\r\n                    ],\r\n                    annotations: annotations,\r\n                    showlegend: false,\r\n                    margin: {\r\n                        l: 40,\r\n                        r: 40,\r\n                        b: 40,\r\n                        t: 40,\r\n                        pad: 10\r\n                    },\r\n                    autosize: true,\r\n                    xaxis: {\r\n                        linecolor: 'black',\r\n                        linewidth: 1,\r\n                        zeroline: false,\r\n                        mirror: true,\r\n                        title: 'log lambda'\r\n                    },\r\n                    yaxis: {\r\n                        linecolor: 'black',\r\n                        linewidth: 1,\r\n                        zeroline: false,\r\n                        mirror: true,\r\n                        title: 'coefficient'\r\n                    }\r\n                }\r\n            });\r\n            window.dispatchEvent(new Event('resize'));\r\n        }, 500);\r\n\r\n    }\r\n}","\r\nimport ChartController from '@/helpers/charts';\r\nimport UI from '@/helpers/ui';\r\nimport { calculateMSE, calculateRSquared } from './utils.js';\r\n\r\nexport class RegressionModel {\r\n\r\n    constructor() {\r\n        this.chartController = new ChartController();\r\n        this.ui = new UI(null, null)\r\n        this.task = null;\r\n        this.predictions = [];\r\n        this.id = null;\r\n        this.plots = [];\r\n        this.tables = [];\r\n        this.helpSectionId = 'help';\r\n        this.hasExplaination = true;\r\n        this.seed = 123;\r\n\r\n    }\r\n    async train(x, y, x_test, y_test) {\r\n        throw new Error('Not implemented', x, y, x_test, y_test)\r\n    }\r\n    async evaluateModel(y, predictions) {\r\n        return { mse: calculateMSE(y, predictions), rsquared: calculateRSquared(y, predictions) };\r\n    }\r\n    async visualize(x_test, y_test, _, predictions) {\r\n        let current = this;\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                let y = y_test\r\n                let residuals = [];\r\n                predictions.forEach((element, i) => {\r\n                    residuals.push(y[i] - element)\r\n                });\r\n                current.chartController.yhat_plot(y, predictions, 'regression_y_yhat_' + current.id, 'Predictions vs y')\r\n                current.chartController.residual_plot(predictions, residuals, 'errors_' + current.id, 'Residuals vs y')\r\n                this.ui.predictions_table_regression(x_test, y_test, predictions, this.id);\r\n                this.plots.push('regression_y_yhat_' + current.id);\r\n                this.plots.push('errors_' + current.id);\r\n                this.tables.push('#predictions_table_' + this.id);\r\n                resolve('resolved');\r\n            }, 500);\r\n        });\r\n    }\r\n}","\r\n/* eslint-disable no-undef */\r\n/* eslint-disable no-unused-vars */\r\n\r\n\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\nimport { RegressionModel } from '../regression_model';\r\n\r\nexport default class LinearRegression extends RegressionModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options;\r\n        this.model = null;\r\n        this.summary = null;\r\n        this.model_stats_matrix = null;\r\n        this.hasExplaination = false;\r\n\r\n    }\r\n\r\n    async train(x_train, y_train, x_test, y_test, labels, categorical_columns) {\r\n        this.context = {\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            y_test: y_test,\r\n            X_test: x_test,\r\n            regularization_type: this.options.regularization.value === \"Lasso\" ? 1 : 0,\r\n            labels: labels\r\n        };\r\n\r\n        const webR = window.webr;\r\n        await webR.init();\r\n        await webR.installPackages(['jsonlite', 'iml', 'ggplot2', 'plotly', 'tidyr', 'dplyr', 'ggrepel', 'glmnet', 'modelsummary'], { quiet: true });\r\n        await webR.objs.globalEnv.bind('xx', x_train);\r\n        await webR.objs.globalEnv.bind('x_test', x_test);\r\n        await webR.objs.globalEnv.bind('random_seed', this.seed);\r\n        await webR.objs.globalEnv.bind('y', y_train);\r\n        await webR.objs.globalEnv.bind('names', labels);\r\n        await webR.objs.globalEnv.bind('categorical_columns', categorical_columns?.length === 0 ? ['empty'] : categorical_columns);\r\n\r\n        await webR.objs.globalEnv.bind('is_lasso', this.context.regularization_type);\r\n\r\n\r\n        const plotlyData = await webR.evalR(`\r\n                    library(plotly)\r\n                    library(ggplot2)\r\n                    library(tidyr)\r\n                    library(iml)\r\n                    library(dplyr)\r\n                    library(ggrepel)\r\n                    library(modelsummary)\r\n                    library(glmnet)\r\n                    set.seed(random_seed)\r\n\r\n                    # Select all columns except the first as predictors. \r\n                    x <- as.matrix(xx)  \r\n                    colnames(x) <- names\r\n                    scale_df <- as.data.frame(x)\r\n\r\n                    cols_to_scale <- setdiff(names, categorical_columns)\r\n                    scale_df[cols_to_scale] <- scale(scale_df[cols_to_scale])\r\n                    scaled_y <- scale(y)\r\n                    base_model = cv.glmnet(as.matrix(scale_df), scaled_y)\r\n                    weights <- 1 / abs(coef(base_model)[-1])\r\n                    if(is_lasso){\r\n                        cvfit = cv.glmnet(as.matrix(scale_df), scaled_y, alpha = 1,penalty.factor = weights)\r\n                    }else{\r\n                       cvfit = cv.glmnet(as.matrix(scale_df), scaled_y, alpha = 0)\r\n                    }\r\n                    betas = as.matrix(cvfit$glmnet.fit$beta)\r\n                    lambdas = cvfit$lambda\r\n                    names(lambdas) = colnames(betas)\r\n                    \r\n                    \r\n                    p <- as.data.frame(betas) %>% \r\n                      tibble::rownames_to_column(\"variable\") %>% \r\n                      pivot_longer(-variable) %>% \r\n                      mutate(lambda=lambdas[name]) %>% \r\n                    ggplot(aes(x=lambda,y=value,col=variable)) + \r\n                      geom_line() + \r\n                      geom_label_repel(data=~subset(.x,lambda==min(lambda)),\r\n                                       aes(label=variable),nudge_x=-0.5) +\r\n                      geom_vline(xintercept=c(cvfit$lambda.1se,cvfit$lambda.min),\r\n                                linetype=\"dashed\")+\r\n                      scale_x_log10()+ labs(y = \"Coefficients\") + theme_bw()\r\n                    df = with(cvfit,\r\n                            data.frame(lambda = lambdas,MSE = cvm,MSEhi=cvup,MSElow=cvlo))\r\n\r\n                    p2<-ggplot(df,aes(x=lambda,y=MSE)) + \r\n                    geom_point(col=\"#f05454\") + \r\n                    scale_x_log10(\"lambda\") + \r\n                    geom_errorbar(aes(ymin = MSElow,ymax=MSEhi),col=\"#30475e\") + \r\n                    geom_vline(xintercept=c(cvfit$lambda.1se,cvfit$lambda.min),\r\n                                linetype=\"dashed\")+\r\n                    theme_bw()\r\n\r\n                    # Get lambda.min and lambda.1se\r\n                    lambda_min = cvfit$lambda.min\r\n                    lambda_1se = cvfit$lambda.1se\r\n\r\n                    # Get the coefficients at lambda.min and lambda.1se\r\n                    coef_lambda_min = coef(cvfit, s = \"lambda.min\")\r\n                    coef_lambda_1se = coef(cvfit, s = \"lambda.1se\")\r\n\r\n                    # Convert the sparse matrix to a regular matrix to make indexing easier\r\n                    coef_lambda_min_matrix = as.matrix(coef_lambda_min)\r\n                    coef_lambda_1se_matrix = as.matrix(coef_lambda_1se)\r\n                    coef_lambda_min_matrix = coef_lambda_min_matrix[-1, , drop = FALSE]\r\n                    coef_lambda_1se_matrix = coef_lambda_1se_matrix[-1, , drop = FALSE]\r\n                    # Find the non-zero features at lambda.min and lambda.1se\r\n                    non_zero_features_min = rownames(coef_lambda_min_matrix)[coef_lambda_min_matrix != 0]\r\n                    non_zero_features_1se = rownames(coef_lambda_1se_matrix)[coef_lambda_1se_matrix != 0]\r\n\r\n                    print(non_zero_features_min)\r\n                    print(non_zero_features_1se)\r\n\r\n                    model <- lm(y ~ ., data = as.data.frame(x))\r\n                    x <- as.matrix(x_test)  \r\n                    colnames(x) <- names\r\n                    predictions <- predict(model, newdata = as.data.frame(x))\r\n                    # Get coefficients, p-values, and standard errors\r\n                    coefs <- coef(model)\r\n                    pvals <- summary(model)$coefficients[,4]\r\n                    std_error <- summary(model)$coefficients[,2]\r\n                    aic_value <- AIC(model)\r\n                    bic_value <- BIC(model)\r\n                    rsquared <- summary(model)$r.squared\r\n                    residuals_ols <- resid(model)\r\n                    fitted_values_ols <- fitted(model)\r\n\r\n                    x <- as.matrix(xx)  \r\n                    colnames(x) <- names\r\n                    X_reduced <- x[, non_zero_features_min]\r\n                    linear_model_min_features <- non_zero_features_min\r\n\r\n                    # Fit a linear regression model using the non-zero features\r\n                    linear_model_min <- lm(y ~ ., data = as.data.frame(X_reduced))\r\n                    coefs_min <- coef(linear_model_min)\r\n                    pvals_min <- summary(linear_model_min)$coefficients[,4]\r\n                    std_error_min <- summary(linear_model_min)$coefficients[,2]\r\n                    aic_min <- AIC(linear_model_min)\r\n                    rsquared_min <- summary(linear_model_min)$r.squared\r\n                    best_lambda <- cvfit$lambda.1se\r\n                    best_model <- glmnet(x, y, alpha =is_lasso, lambda = best_lambda)\r\n                    coefficients <- as.matrix(coef(best_model))\r\n                    residuals_min <- resid(linear_model_min)\r\n                    fitted_values_min <- fitted(linear_model_min)\r\n\r\n\r\n                    x <- as.matrix(x_test)  \r\n                    colnames(x) <- names\r\n                    x <- x[, non_zero_features_min]\r\n                    predictions_min <- predict(linear_model_min, newdata = as.data.frame(x))\r\n\r\n\r\n\r\n                    x <- as.matrix(xx)  \r\n                    colnames(x) <- names\r\n\r\n                    X_reduced <- x[, non_zero_features_1se]\r\n                    linear_model_1se_features <- non_zero_features_1se\r\n                    linear_model_1se <- lm(y ~ ., data = as.data.frame(X_reduced))\r\n                    coefs_1se <- coef(linear_model_1se)\r\n                    print(coefs_1se)\r\n                    pvals_1se <- summary(linear_model_1se)$coefficients[,4]\r\n                    aic_1se<- AIC(linear_model_1se)\r\n                    rsquared_1se <- summary(linear_model_1se)$r.squared\r\n                    std_error_1se <- summary(linear_model_1se)$coefficients[,2]\r\n                    residuals_1se <- resid(linear_model_1se)\r\n                    fitted_values_1se <- fitted(linear_model_1se)\r\n                    \r\n                    x <- as.matrix(x_test)  \r\n                    colnames(x) <- names\r\n                    x <- x[, non_zero_features_1se]\r\n                    predictions_1se <- predict(linear_model_1se, newdata = as.data.frame(x))\r\n\r\n\r\n                    models <- list(\r\n                        \"OLS\" = model,\r\n                        \"Lasso Min \" = linear_model_min,\r\n                        \"Lasso 1se \" = linear_model_1se\r\n                        )\r\n                    z <- modelplot(models =models,coef_omit = 'Interc')\r\n                    qqplot_ols <-ggplot(data.frame(residuals = residuals_ols), aes(sample = residuals_ols)) +\r\n                        stat_qq(color = \"blue\") +\r\n                        stat_qq_line(col = \"red\") +\r\n                        labs(title = \"QQ Plot of Residuals\",\r\n                            x = \"Theoretical Quantiles\",\r\n                            y = \"Sample Quantiles\") +\r\n                        theme_bw()\r\n                    qqplot_1se <-ggplot(data.frame(residuals = residuals_1se), aes(sample = residuals_1se)) +\r\n                        stat_qq(color = \"blue\") +\r\n                        stat_qq_line(col = \"red\") +\r\n                        labs(title = \"QQ Plot of Residuals\",\r\n                            x = \"Theoretical Quantiles\",\r\n                            y = \"Sample Quantiles\") +\r\n                        theme_bw()\r\n                    qqplot_min <-ggplot(data.frame(residuals = residuals_min), aes(sample = residuals_min)) +\r\n                        stat_qq(color = \"blue\") +\r\n                        stat_qq_line(col = \"red\") +\r\n                        labs(title = \"QQ Plot of Residuals\",\r\n                            x = \"Theoretical Quantiles\",\r\n                            y = \"Sample Quantiles\") +\r\n                        theme_bw()\r\n                        \r\n\r\n\r\n\r\n                    list(plotly_json(p, pretty = FALSE),plotly_json(p2, pretty = FALSE),coefs,\r\n                    pvals,std_error,predictions,aic_value,bic_value,rsquared\r\n                    ,coefs_min,pvals_min,std_error_min\r\n                    ,coefs_1se,pvals_1se,std_error_1se,plotly_json(z, pretty = FALSE),linear_model_min_features,linear_model_1se_features\r\n                    ,residuals_ols,residuals_1se,residuals_min,predictions_1se,predictions_min,rsquared_1se,aic_1se,rsquared_min,aic_min\r\n                    ,plotly_json(qqplot_ols, pretty = FALSE)\r\n                    ,plotly_json(qqplot_1se, pretty = FALSE)\r\n                    ,plotly_json(qqplot_min, pretty = FALSE)\r\n                    \r\n                    )\r\n                    `);\r\n        let results = await plotlyData.toArray()\r\n\r\n        this.summary = {\r\n            params: await results[2].toArray(),\r\n            bse: await results[4].toArray(),\r\n            pvalues: await results[3].toArray(),\r\n            predictions: await results[5].toArray(),\r\n            predictions1se: await results[21].toArray(),\r\n            predictionsmin: await results[22].toArray(),\r\n            residuals_ols: await results[18].toArray(),\r\n            residuals_1se: await results[19].toArray(),\r\n            residuals_min: await results[20].toArray(),\r\n            aic: await results[6].toNumber(),\r\n            bic: await results[7].toNumber(),\r\n            r2: await results[8].toNumber(),\r\n            best_fit_min: {\r\n                r2: await results[25].toNumber(),\r\n                aic: await results[26].toNumber(),\r\n                names: await results[16].toArray(),\r\n                coefs: await results[9].toArray(),\r\n                bse: await results[11].toArray(),\r\n                pvalues: await results[10].toArray(),\r\n            },\r\n            best_fit_1se: {\r\n                r2: await results[23].toNumber(),\r\n                aic: await results[24].toNumber(),\r\n                names: await results[17].toArray(),\r\n                coefs: await results[12].toArray(),\r\n                bse: await results[14].toArray(),\r\n                pvalues: await results[13].toArray(),\r\n            },\r\n        };\r\n        this.model_stats_matrix = [];\r\n        let cols = [...labels]\r\n        cols.unshift(\"intercept\")\r\n        let min_ols_columns = this.summary['best_fit_min'].names;\r\n\r\n        min_ols_columns.unshift('intercept');\r\n        let se_ols_columns = this.summary['best_fit_1se'].names;\r\n        se_ols_columns.unshift('intercept');\r\n\r\n        for (let i = 0; i < cols.length; i++) {\r\n            let row = [];\r\n            row.push(cols[i])\r\n            row.push(this.summary['params'][i]?.toFixed(2) ?? ' ')\r\n            row.push(this.summary['bse'][i]?.toFixed(2) ?? ' ')\r\n            row.push(this.summary['pvalues'][i]?.toFixed(2) ?? ' ')\r\n            let index = min_ols_columns.findIndex(m => m === cols[i])\r\n            if (index !== -1) {\r\n                row.push(this.summary['best_fit_min']['coefs'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_min']['bse'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_min']['pvalues'][index]?.toFixed(2) ?? ' ')\r\n            } else {\r\n                row.push(' ')\r\n                row.push(' ')\r\n                row.push(' ')\r\n            }\r\n            index = se_ols_columns.findIndex(m => m === cols[i])\r\n            if (index !== -1) {\r\n                row.push(this.summary['best_fit_1se']['coefs'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_1se']['bse'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_1se']['pvalues'][index]?.toFixed(2) ?? ' ')\r\n            } else {\r\n                row.push(' ')\r\n                row.push(' ')\r\n                row.push(' ')\r\n            }\r\n            this.model_stats_matrix.push(row)\r\n        }\r\n        this.model_stats_matrix.reverse()\r\n        let reg_plot = JSON.parse(await results[0].toString())\r\n\r\n        reg_plot.layout['showlegend'] = false;\r\n        reg_plot.layout.legend = {\r\n            font: {\r\n\r\n                size: 8,\r\n                color: '#000'\r\n            },\r\n        };\r\n        let coefs_plot = JSON.parse(await results[15].toString())\r\n        coefs_plot.layout.legend = {\r\n            x: 0,\r\n            y: 1,\r\n            traceorder: 'normal',\r\n            font: {\r\n                size: 8,\r\n                color: '#000'\r\n            },\r\n            bgcolor: 'rgba(0,0,0,0)',\r\n        };\r\n        coefs_plot.layout.xaxis.title.font = {\r\n            size: 10\r\n        };\r\n\r\n        coefs_plot.layout.xaxis.linecolor = 'rgba(235, 235, 235, 1)';\r\n        coefs_plot.layout.xaxis.linewidth = 3;\r\n        coefs_plot.layout.xaxis.mirror = true;\r\n        coefs_plot.layout.xaxis.zeroline = true;\r\n\r\n        coefs_plot.layout.yaxis.linecolor = 'rgba(235, 235, 235, 1)';\r\n        coefs_plot.layout.yaxis.linewidth = 2;\r\n        coefs_plot.layout.yaxis.mirror = true;\r\n        coefs_plot.layout.yaxis.zeroline = true;\r\n\r\n        this.summary.coefs_plot = coefs_plot;\r\n\r\n        this.summary.regularization_plot = reg_plot;\r\n        this.summary.errors_plot = JSON.parse(await results[1].toString());\r\n        this.summary.qqplot_ols_plot = JSON.parse(await results[27].toString());\r\n        this.summary.qqplot_1se_plot = JSON.parse(await results[28].toString());\r\n        this.summary.qqplot_min_plot = JSON.parse(await results[29].toString());\r\n        this.summary.qqplot_ols_plot.layout.title.font = {\r\n\r\n            size: 10\r\n        };\r\n\r\n\r\n\r\n        this.summary.qqplot_ols_plot.data[0].marker.size = 3;\r\n        this.summary.qqplot_ols_plot.data[0].marker.color = \"blue\";\r\n        this.summary.qqplot_ols_plot.layout.height = 300\r\n        this.summary.qqplot_ols_plot.layout.width = 300\r\n\r\n        this.summary.qqplot_ols_plot.layout.xaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_ols_plot.layout.yaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n\r\n        this.summary.qqplot_1se_plot.layout.height = 300\r\n        this.summary.qqplot_1se_plot.layout.width = 300\r\n        this.summary.qqplot_1se_plot.layout.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_1se_plot.data[0].marker.size = 3;\r\n\r\n        this.summary.qqplot_1se_plot.layout.xaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_1se_plot.layout.yaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n\r\n\r\n        this.summary.qqplot_min_plot.layout.height = 300\r\n        this.summary.qqplot_min_plot.layout.width = 300\r\n        this.summary.qqplot_min_plot.layout.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_min_plot.layout.xaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_min_plot.layout.yaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n\r\n\r\n        this.summary.qqplot_min_plot.data[0].marker.size = 1;\r\n        return this.summary['predictions'];\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions)\r\n        let current = this;\r\n        new DataTable('#metrics_table_' + current.id, {\r\n            responsive: false,\r\n            \"footerCallback\": function (row, data, start, end, display) {\r\n                var api = this.api();\r\n                $(api.column(2).footer()).html(\r\n                    'R2 : ' + current.summary.r2.toFixed(2) + ' AIC: ' + current.summary.aic.toFixed(2)\r\n                );\r\n                $(api.column(5).footer()).html(\r\n                    'R2 : ' + current.summary['best_fit_min'].r2.toFixed(2) + ' AIC: ' + current.summary['best_fit_min'].aic.toFixed(2)\r\n                );\r\n                $(api.column(8).footer()).html(\r\n                    'R2 : ' + current.summary['best_fit_1se'].r2.toFixed(2) + ' AIC: ' + current.summary['best_fit_1se'].aic.toFixed(2)\r\n                );\r\n            },\r\n            data: current.model_stats_matrix,\r\n            info: false,\r\n            search: false,\r\n            ordering: false,\r\n            searching: false,\r\n            paging: false,\r\n            bDestroy: true,\r\n            columnDefs: [\r\n                {\r\n                    \"targets\": 3,\r\n                    \"createdCell\": function (td, cellData, rowData, row, col) {\r\n                        if (rowData[3] <= 0.05) {\r\n                            $(td).css('color', 'red')\r\n                            $(td).css('font-weight', '700')\r\n\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"targets\": 6,\r\n                    \"createdCell\": function (td, cellData, rowData, row, col) {\r\n                        if (rowData[6] <= 0.05) {\r\n                            $(td).css('color', 'red')\r\n                            $(td).css('font-weight', '700')\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"targets\": 9,\r\n                    \"createdCell\": function (td, cellData, rowData, row, col) {\r\n                        if (rowData[9] <= 0.05) {\r\n                            $(td).css('color', 'red')\r\n                            $(td).css('font-weight', '700')\r\n                        }\r\n                    }\r\n                }\r\n            ],\r\n        });\r\n\r\n        await Plotly.newPlot('parameters_plot_' + current.id, current.summary.coefs_plot, { autosize: true, responsive: true });\r\n        await Plotly.newPlot('regularization_' + current.id, current.summary.regularization_plot, { autosize: true, responsive: true });\r\n        await Plotly.newPlot('errors_' + current.id, current.summary.errors_plot, { autosize: true, responsive: true });\r\n        await Plotly.newPlot('qqplot_ols_' + current.id, current.summary.qqplot_ols_plot, { autosize: true, staticPlot: true, });\r\n        await Plotly.newPlot('qqplot_min_' + current.id, current.summary.qqplot_min_plot, { autosize: true, staticPlot: true, });\r\n        await Plotly.newPlot('qqplot_1se_' + current.id, current.summary.qqplot_1se_plot, { autosize: true, staticPlot: true, });\r\n        current.chartController.yhat_plot(y_test, this.summary['predictions'], 'regression_y_yhat_' + current.id, 'OLS predictions')\r\n        current.chartController.yhat_plot(y_test, this.summary['predictionsmin'], 'regression_y_yhat_min_' + current.id, 'lasso min predictions')\r\n        current.chartController.yhat_plot(y_test, this.summary['predictions1se'], 'regression_y_yhat_1se_' + current.id, 'lasso 1se predictions')\r\n        current.chartController.residual_plot(y_test, this.summary['residuals_ols'], 'regression_residual_' + current.id, 'OLS residuals')\r\n        current.chartController.residual_plot(y_test, this.summary['residuals_min'], 'regression_residual_min_' + current.id, 'lasso min residuals')\r\n        current.chartController.residual_plot(y_test, this.summary['residuals_1se'], 'regression_residual_1se_' + current.id, 'lasso 1se residuals')\r\n        this.ui.predictions_table_regression(x_test, y_test, predictions, this.id);\r\n        window.dispatchEvent(new Event('resize'));\r\n\r\n    }\r\n}","import { asyncRun } from \"@/helpers/py-worker\";\nimport { RegressionModel } from \"../regression_model\";\n\n\nexport default class BSplineRegression extends RegressionModel {\n    constructor(options) {\n        super();\n        this.options = options;\n        this.model = null;\n        this.hasExplaination = false;\n\n    }\n    async train(x_train, y_train, x_test, y_test, columns) {\n        this.context = {\n            X_train: x_train,\n            y_train: y_train,\n            X_test: x_test,\n            y_test: y_test,\n            knots: +this.options.knots.value,\n            explain: this.hasExplaination,\n            degree: +this.options.degree.value,\n            features: [...Array(columns.length).keys()]\n\n\n        };\n        const script = `\n        from sklearn.preprocessing import SplineTransformer\n        from sklearn.inspection import PartialDependenceDisplay\n        from sklearn.inspection import permutation_importance\n        from sklearn.ensemble import GradientBoostingRegressor\n        import pandas as pd\n        import matplotlib\n        matplotlib.use(\"AGG\")\n        from sklearn import linear_model\n        from sklearn.metrics import mean_squared_error\n        from sklearn.pipeline import make_pipeline\n        from js import X_train,y_train,X_test,knots,degree,y_test,features,explain\n\n\n        features_importance = []\n        partial_dependence_plot_grids = []\n        partial_dependence_plot_avgs = []\n        \n        model = make_pipeline(\n            SplineTransformer(n_knots=knots, degree=degree), \n            linear_model.LinearRegression()\n            )\n        model.fit(X_train, y_train)\n        pred_train = model.predict(X_train)\n        rmse_train = mean_squared_error(y_train, pred_train, squared=True)\n        y_pred = model.predict(X_test)\n        if explain:\n            pdp = PartialDependenceDisplay.from_estimator(model, X_train, features,method ='brute')\n            fi = permutation_importance(model,X_test,y_test,n_repeats=10)\n            partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\n            grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\n            features_importance = list(fi.importances)\n            partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\n        y_pred,partial_dependence_plot_avgs,partial_dependence_plot_grids, features_importance\n\n        `;\n        try {\n            const { results, error } = await asyncRun(script, this.context);\n            if (results) {\n                this.predictions = Array.from(results[0]);\n                this.pdp_averages = Array.from(results[1]);\n                this.pdp_grid = Array.from(results[2]);\n                this.importances = Array.from(results[3]);\n                return Array.from(results[0]);\n            } else if (error) {\n                console.log(\"pyodideWorker error: \", error);\n            }\n        } catch (e) {\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\n\n        }\n    }\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\n        if (this.hasExplaination) {\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\n            this.chartController.plotPDPRegression(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\n        }\n    }\n}","import { ClassificationModel } from \"../model\";\r\nimport { asyncRun } from \"@/helpers/py-worker\";\r\n\r\nexport default class SupportVectorMachine extends ClassificationModel {\r\n    constructor(opt) {\r\n        super();\r\n        // eslint-disable-next-line no-unused-vars\r\n        this.options = {\r\n            kernel: opt.kernel.value.toLowerCase(),\r\n            coef: opt.bias.value,\r\n            degree: opt.degree.value,\r\n            c: opt.c.value,\r\n            quiet: true\r\n        };\r\n        this.helpSectionId = 'svm_help';\r\n    }\r\n    // eslint-disable-next-line no-unused-vars\r\n    async train(x_train, y_train, x_test, y_test, columns, __, pdpIndex) {\r\n\r\n        this.context = {\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            X_test: x_test,\r\n            y_test: y_test,\r\n            pdpIndex: pdpIndex,\r\n            explain: this.hasExplaination,\r\n            kernel: this.options.kernel,\r\n            coef: this.options.coef,\r\n            c: +this.options.c,\r\n            degree: this.options.degree,\r\n            seed: this.seed,\r\n            features: [...Array(columns.length).keys()]\r\n\r\n        };\r\n        const script = `\r\n        from sklearn import svm\r\n        from js import X_train,y_train,X_test,y_test,kernel,coef,degree,features,seed,c,explain\r\n        import matplotlib\r\n        matplotlib.use(\"AGG\")\r\n        from sklearn.inspection import PartialDependenceDisplay\r\n        from sklearn.inspection import permutation_importance\r\n        features_importance = []\r\n        partial_dependence_plot_grids = []\r\n        partial_dependence_plot_avgs = []\r\n\r\n        model = svm.SVC(kernel=kernel,random_state = seed,C=c,degree=degree)\r\n        model.fit(X_train, y_train)\r\n        y_pred = model.predict(X_test)\r\n\r\n        if explain:\r\n            pdp = PartialDependenceDisplay.from_estimator(model, X_train, features,target=0,method ='brute')\r\n            fi = permutation_importance(model,X_test,y_test,n_repeats=10)\r\n            partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\r\n            grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\r\n            features_importance = list(fi.importances)\r\n            partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\r\n        y_pred,partial_dependence_plot_avgs,partial_dependence_plot_grids,features_importance\r\n    `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                return Array.from(results[0]);\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\r\n\r\n        }\r\n    }\r\n    generatePythonCode() {\r\n        let model_import = \"from sklearn import svm\"\r\n        let model_fit = `\r\nmodel = model = svm.SVC(kernel=\"${this.options.kernel}\",random_state = ${this.seed})`\r\n        return super.generatePythonCode(model_import, model_fit)\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        if (this.hasExplaination) {\r\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n            this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\r\n        }\r\n    }\r\n}","import { RegressionModel } from \"../regression_model\";\nimport { asyncRun } from \"@/helpers/py-worker\";\nexport default class SupportVectorMachineRegression extends RegressionModel {\n    constructor(opt, chartControler) {\n        super(chartControler);\n        let options = {\n            kernel: opt.kernel.value ?? \"linear\",\n            gamma: opt.gamma.value,\n            degree: opt.degree.value,\n        }\n        this.options = options;\n        this.helpSectionId = 'svm_help';\n\n    }\n    async train(x_train, y_train, x_test, y_test, columns) {\n\n        this.context = {\n            X_train: x_train,\n            y_train: y_train,\n            X_test: x_test,\n            y_test: y_test,\n            kernel: this.options.kernel,\n            gamma: this.options.gamma,\n            degree: this.options.degree,\n            explain: this.hasExplaination,\n            seed: this.seed,\n            features: [...Array(columns.length).keys()]\n        };\n        const script = `\n        from sklearn import svm\n        import matplotlib\n        matplotlib.use(\"AGG\")\n        from js import X_train,y_train,X_test,y_test,kernel,gamma,degree,seed,features,explain\n        from sklearn.inspection import PartialDependenceDisplay\n        from sklearn.inspection import permutation_importance\n\n        \n        features_importance = []\n        partial_dependence_plot_grids = []\n        partial_dependence_plot_avgs = []\n        model = svm.SVR(kernel=kernel)\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n\n        if explain:\n            pdp = PartialDependenceDisplay.from_estimator(model, X_train, features)\n            fi = permutation_importance(model,X_test,y_test,n_repeats=10)\n            partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\n            grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\n            features_importance = list(fi.importances)\n            partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\n        y_pred,partial_dependence_plot_avgs,partial_dependence_plot_grids, features_importance\n    `;\n        try {\n            const { results, error } = await asyncRun(script, this.context);\n            if (results) {\n                this.predictions = Array.from(results[0]);\n                this.pdp_averages = Array.from(results[1]);\n                this.pdp_grid = Array.from(results[2]);\n                this.importances = Array.from(results[3]);\n                return Array.from(results[0]);\n            } else if (error) {\n                console.log(\"pyodideWorker error: \", error);\n            }\n        } catch (e) {\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\n\n        }\n    }\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\n        if (this.hasExplaination) {\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\n            this.chartController.plotPDPRegression(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\n        }\n    }\n}","\nimport { ClassificationModel } from '../model';\nimport { asyncRun } from \"@/helpers/py-worker\";\n\nexport default class KNNModel extends ClassificationModel {\n    constructor(options) {\n        super();\n        this.options = options\n        this.model = null;\n        this.helpSectionId = 'knn_help';\n\n\n    }\n    // eslint-disable-next-line no-unused-vars\n    async train(x, y, x_test, y_test, columns, __, pdpIndex) {\n        this.context = {\n            X_train: x,\n            y_train: y,\n            X_test: x_test,\n            y_test: y_test,\n            min: +this.options.min.value,\n            max: +this.options.max.value,\n            explain: this.hasExplaination,\n            features: [...Array(columns.length).keys()]\n        };\n        const script = `\n        import matplotlib\n        matplotlib.use(\"AGG\")\n        from js import X_train,y_train,X_test,y_test,features,min,max,explain\n        from sklearn.inspection import PartialDependenceDisplay\n        from sklearn.inspection import permutation_importance\n        from sklearn.neighbors import KNeighborsClassifier\n        from sklearn.metrics import accuracy_score\n\n        features_importance = []\n        partial_dependence_plot_grids = []\n        partial_dependence_plot_avgs = []\n\n        k_neighbor_results=[]\n        best_model = None\n        best_accuracy = 0\n        best_preds = []\n        for i,metric in enumerate(['manhattan','euclidean']):\n            for n in range(min,max+1):\n                model = KNeighborsClassifier(n_neighbors=n,metric=metric)\n                model.fit(X_train, y_train)\n                preds = model.predict(X_test)\n                accuracy = accuracy_score(y_test,preds)\n                k_neighbor_results.append([metric,n,accuracy])\n                if accuracy > best_accuracy:\n                    best_accuracy = accuracy\n                    best_model = model\n                    best_n = n\n                    best_preds = preds\n        if explain:\n            pdp = PartialDependenceDisplay.from_estimator(best_model, X_train, features,target=0,method ='brute')\n            fi = permutation_importance(best_model,X_test,y_test,n_repeats=10)\n            partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\n            grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\n            features_importance = list(fi.importances)\n            partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\n        best_preds,partial_dependence_plot_avgs,partial_dependence_plot_grids, features_importance,k_neighbor_results,best_n\n    `;\n        try {\n            const { results, error } = await asyncRun(script, this.context);\n            if (results) {\n                this.predictions = Array.from(results[0]);\n                this.pdp_averages = Array.from(results[1]);\n                this.pdp_grid = Array.from(results[2]);\n                this.importances = Array.from(results[3]);\n                this.k_neighbor_results = Array.from(results[4]);\n                this.best_n = results[5];\n                return Array.from(results[0]);\n            } else if (error) {\n                console.log(\"pyodideWorker error: \", error);\n            }\n        } catch (e) {\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\n\n        }\n    }\n    generatePythonCode() {\n        let model_import = `\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score`.trim();\n        let model_fit = `\nbest_model = None\nbest_accuracy = 0\nbest_preds = []\nfor i,metric in enumerate(['manhattan','euclidean']):\n    for n in range(${+this.options.min.value},${+this.options.max.value + 1}):\n        model = KNeighborsClassifier(n_neighbors=n,metric=metric)\n        model.fit(X_train, y_train)\n        preds = model.predict(X_test)\n        accuracy = accuracy_score(y_test,preds)\n        if accuracy > best_accuracy:\n            best_accuracy = accuracy\n            best_model = model\n            best_n = n\n            best_preds = preds\nmodel = best_model\n`.trim();\n        return super.generatePythonCode(model_import, model_fit)\n    }\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\n        this.chartController.KNNPerformancePlot(this.k_neighbor_results, this.best_n, this.id);\n        this.plots.push('knn_table_' + this.id);\n        if (this.hasExplaination) {\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\n            this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\n        }\n\n    }\n\n}","\nimport { RegressionModel } from '../regression_model'\nimport { asyncRun } from \"@/helpers/py-worker\";\n\nexport default class KNNRegressor extends RegressionModel {\n    constructor(options) {\n        super();\n        this.options = options\n        this.model = null;\n        this.helpSectionId = 'knn_help';\n\n\n    }\n    // eslint-disable-next-line no-unused-vars\n    async train(x, y, x_test, y_test, columns, __, pdpIndex) {\n        this.context = {\n            X_train: x,\n            y_train: y,\n            X_test: x_test,\n            y_test: y_test,\n            min: +this.options.min.value,\n            max: +this.options.max.value,\n            explain: this.hasExplaination,\n            features: [...Array(columns.length).keys()]\n        };\n        const script = `\n        import matplotlib\n        matplotlib.use(\"AGG\")\n        from js import X_train,y_train,X_test,y_test,features,min,max,explain\n        from sklearn.inspection import PartialDependenceDisplay\n        from sklearn.inspection import permutation_importance\n        from sklearn.neighbors import KNeighborsRegressor\n\n        features_importance = []\n        partial_dependence_plot_grids = []\n        partial_dependence_plot_avgs = []\n        k_neighbor_results=[]\n        best_model = None\n        best_r2 = 0\n        best_preds = []\n\n        for i,metric in enumerate(['manhattan','euclidean']):\n            for n in range(min,max+1):\n                model = KNeighborsRegressor(n_neighbors=n,metric=metric)\n                model.fit(X_train, y_train)\n                preds = model.predict(X_test)\n                r2 = model.score(X_test,y_test)\n                k_neighbor_results.append([metric,n,r2])\n                if r2 > best_r2:\n                    best_r2 = r2\n                    best_model = model\n                    best_n = n\n                    best_preds = preds\n\n        if explain:\n            pdp = PartialDependenceDisplay.from_estimator(best_model, X_train, features)\n            fi = permutation_importance(best_model,X_test,y_test,n_repeats=10)\n            partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\n            grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\n            features_importance = list(fi.importances)\n            partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\n        best_preds,partial_dependence_plot_avgs,partial_dependence_plot_grids, features_importance,k_neighbor_results,best_n\n    `;\n        try {\n            const { results, error } = await asyncRun(script, this.context);\n            if (results) {\n                this.predictions = Array.from(results[0]);\n                this.pdp_averages = Array.from(results[1]);\n                this.pdp_grid = Array.from(results[2]);\n                this.importances = Array.from(results[3]);\n                this.k_neighbor_results = Array.from(results[4]);\n                this.best_n = results[5];\n                return Array.from(results[0]);\n            } else if (error) {\n                console.log(\"pyodideWorker error: \", error);\n            }\n        } catch (e) {\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\n\n        }\n    }\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\n        this.chartController.KNNPerformancePlot(this.k_neighbor_results, this.best_n, this.id, \"MSE\");\n        this.plots.push('knn_table_' + this.id);\n        if (this.hasExplaination) {\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\n            this.chartController.plotPDPRegression(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\n        }\n    }\n}","import { asyncRun } from \"@/helpers/py-worker\";\nimport { ClassificationModel } from \"../model\";\n\n\nexport default class RandomForest extends ClassificationModel {\n    constructor(options, chartController) {\n        super(chartController)\n        this.helpSectionId = 'cart_help';\n        this.options = options;\n        this.model = null;\n        this.predictions = [];\n        this.hasProbability = true;\n\n    }\n    // eslint-disable-next-line no-unused-vars\n    async train(x_train, y_train, x_test, y_test, columns, __, pdpIndex) {\n        this.context = {\n            X_train: x_train,\n            y_train: y_train,\n            X_test: x_test,\n            y_test: y_test,\n            pdpIndex: pdpIndex,\n            explain: this.hasExplaination,\n            rf_type: this.options.criteria.value,\n            max_features: this.options.features.value,\n            num_estimators: this.options.estimators.value <= 0 || !this.options.estimators.value ? 100 : +this.options.estimators.value,\n            max_depth: this.options.depth.value <= 0 ? 5 : +this.options.depth.value,\n            seed: this.seed,\n            features: [...Array(columns.length).keys()],\n            num_classes: [...new Set(y_train)].length,\n\n\n        };\n        const script = `\n            from sklearn.model_selection import train_test_split\n            from sklearn.ensemble import RandomForestClassifier\n            from sklearn.metrics import accuracy_score\n            import matplotlib\n            matplotlib.use(\"AGG\")\n            from sklearn.inspection import PartialDependenceDisplay\n            from sklearn.inspection import permutation_importance\n            from js import seed,X_train,y_train,X_test,y_test,rf_type,max_features,num_estimators,max_depth, features,explain,num_classes\n            from sklearn.metrics import roc_auc_score\n            from sklearn.metrics import roc_curve\n            from sklearn.preprocessing import LabelBinarizer\n\n\n            features_importance = []\n            partial_dependence_plot_grids = []\n            partial_dependence_plot_avgs = []\n            model = RandomForestClassifier(criterion=rf_type,max_features = max_features,n_estimators=num_estimators,max_depth = max_depth, random_state=seed)\n            model.fit(X_train, y_train)\n            y_pred = model.predict(X_test)\n            \n            probas = model.predict_proba(X_test)\n            tprs=[]\n            fprs=[]\n            aucs=[]\n            label_binrize = LabelBinarizer().fit(y_train)\n            y_test_one_hot = label_binrize.transform(y_test)\n            \n            try:\n                fpr,tpr,_  = roc_curve(y_test,probas[:,1])\n                fprs.append(fpr)\n                tprs.append(tpr)\n                auc = roc_auc_score(y_test,probas[:,1])\n                aucs.append(auc)\n            except Exception as e:\n                auc = roc_auc_score(y_test,probas,multi_class = 'ovr')\n                aucs.append(auc)\n                for i in range(num_classes):\n                    fpr,tpr,_ = roc_curve(y_test_one_hot[:,i],probas[:,i])\n                    fprs.append(fpr)\n                    tprs.append(tpr)\n\n            if explain:\n                pdp = PartialDependenceDisplay.from_estimator(model, X_train, features,target=0,method ='brute')\n                fi = permutation_importance(model,X_test,y_test,n_repeats=10)\n                partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\n                grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\n                features_importance = list(fi.importances)\n                partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\n            y_pred,partial_dependence_plot_avgs,partial_dependence_plot_grids,features_importance,fprs,tprs,aucs,probas\n        `;\n        try {\n            const { results, error } = await asyncRun(script, this.context);\n            if (results) {\n                this.predictions = Array.from(results[0]);\n                this.pdp_averages = Array.from(results[1]);\n                this.pdp_grid = Array.from(results[2]);\n                this.importances = Array.from(results[3]);\n                this.fpr = Array.from(results[4]);\n                this.tpr = Array.from(results[5]);\n                this.auc = Array.from(results[6]);\n                this.probas = Array.from(results[7]);\n\n            } else if (error) {\n                throw Error(\"Faced errot fitting Random Forest\")\n            }\n        } catch (e) {\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\n        }\n        return this.predictions\n    }\n    generatePythonCode() {\n        let model_import = \"from sklearn.ensemble import RandomForestClassifier\"\n        let model_fit = `\nmodel = RandomForestClassifier(criterion=\"${this.options.criteria.value}\",max_features = ${this.options.features.value},n_estimators=${this.options.estimators.value},max_depth = ${this.options.depth.value}, random_state=${this.seed})`\n        return super.generatePythonCode(model_import, model_fit)\n    }\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\n        if (this.hasExplaination) {\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\n            this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\n        }\n        this.chartController.plotROC(this.id, this.fpr, this.tpr, uniqueLabels, this.auc);\n        this.chartController.probabilities_boxplot(this.probas, encoder.inverseTransform(predictions), uniqueLabels, this.id);\n    }\n    predict() {\n        return this.predictions;\n    }\n}","\n/* eslint-disable no-undef */\n/* eslint-disable no-unused-vars */\n\nimport { asyncRun } from \"@/helpers/py-worker\";\nimport { RegressionModel } from \"../regression_model\";\n\n\nexport default class RandomForestRegressor extends RegressionModel {\n    constructor(options) {\n        super();\n        this.options = options;\n        this.model = null;\n        this.helpSectionId = 'cart_help';\n\n    }\n    async train(x_train, y_train, x_test, y_test, columns, __, pdpIndex) {\n        this.context = {\n            X_train: x_train,\n            y_train: y_train,\n            X_test: x_test,\n            y_test: y_test,\n            rf_type: this.options.criteria.value,\n            max_features: this.options.features.value,\n            num_estimators: this.options.estimators.value <= 0 || !this.options.estimators.value ? 100 : +this.options.estimators.value,\n            max_depth: this.options.depth.value <= 0 ? 5 : +this.options.depth.value,\n            seed: this.seed,\n            explain: this.hasExplaination,\n            features: [...Array(columns.length).keys()]\n        };\n        const script = `\n            from sklearn.model_selection import train_test_split\n            from sklearn.ensemble import RandomForestRegressor\n            import matplotlib\n            matplotlib.use(\"AGG\")\n            from sklearn.metrics import accuracy_score\n            from js import X_train,y_train,X_test,y_test,rf_type,max_features,num_estimators,max_depth,seed,features,explain\n            from sklearn.inspection import PartialDependenceDisplay\n            from sklearn.inspection import permutation_importance\n\n            features_importance = []\n            partial_dependence_plot_grids = []\n            partial_dependence_plot_avgs = []\n            model = RandomForestRegressor(criterion=rf_type,max_features = max_features,n_estimators=num_estimators,max_depth = max_depth, random_state=seed)\n            model.fit(X_train, y_train)\n            y_pred = model.predict(X_test)\n\n            if explain:\n                pdp = PartialDependenceDisplay.from_estimator(model, X_train, features)\n                fi = permutation_importance(model,X_test,y_test,n_repeats=10)\n                partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\n                grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\n                features_importance = list(fi.importances)\n                partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\n            y_pred,partial_dependence_plot_avgs,partial_dependence_plot_grids, features_importance           \n        `;\n        try {\n            const { results, error } = await asyncRun(script, this.context);\n            if (results) {\n                this.predictions = Array.from(results[0]);\n                this.pdp_averages = Array.from(results[1]);\n                this.pdp_grid = Array.from(results[2]);\n                this.importances = Array.from(results[3]);\n                return Array.from(results[0]);\n            } else if (error) {\n                console.log(\"pyodideWorker error: \", error);\n            }\n        } catch (e) {\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\n\n        }\n\n    }\n\n    predict(x_test) {\n        const result = this.model.predict(x_test);\n        return result\n    }\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\n        if (this.hasExplaination) {\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\n            this.chartController.plotPDPRegression(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\n        }\n    }\n}","import { asyncRun } from \"@/helpers/py-worker\";\r\nimport { ClassificationModel } from '../model';\r\n\r\nexport default class NaiveBayes extends ClassificationModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options\r\n        this.model = null;\r\n        this.helpSectionId = 'naive_bayes_help';\r\n        this.hasProbability = true;\r\n\r\n\r\n    }\r\n    // eslint-disable-next-line no-unused-vars\r\n    async train(x_train, y_train, x_test, y_test, columns, __, pdpIndex) {\r\n        // const priors = this.options.priors.value ? this.options.priors?.value.split(',').map((m) => parseFloat(m)) : undefined\r\n        this.context = {\r\n            nb_type: this.options.type.value === \"Multinomial\" ? 0 : this.options.type.value === \"Gaussian\" ? 1 : 2,\r\n            priors: this.options.priors.value,\r\n            smoothing: +this.options.laplace.value,\r\n            num_classes: [...new Set(y_train)].length,\r\n            X_train: x_train,\r\n            y_train: y_train,\r\n            y_test: y_test,\r\n            explain: this.hasExplaination,\r\n            X_test: x_test,\r\n\r\n            pdpIndex: pdpIndex,\r\n            features: [...Array(columns.length).keys()]\r\n\r\n        };\r\n        const script = `\r\n            from sklearn.naive_bayes import BernoulliNB\r\n            from sklearn.naive_bayes import MultinomialNB\r\n            import matplotlib\r\n            matplotlib.use(\"AGG\")\r\n            from js import X_train,y_train,X_test,nb_type,priors,smoothing,y_test,num_classes,features,explain\r\n            from sklearn.naive_bayes import GaussianNB\r\n            from sklearn.inspection import PartialDependenceDisplay\r\n            from sklearn.inspection import permutation_importance\r\n            from sklearn.metrics import roc_auc_score\r\n            from sklearn.metrics import roc_curve\r\n            from sklearn.preprocessing import LabelBinarizer\r\n\r\n            features_importance = []\r\n            partial_dependence_plot_grids = []\r\n            partial_dependence_plot_avgs = []\r\n            if priors is not None and priors.strip():\r\n                priors = [float(x) for x in priors.split(',')]\r\n            else:\r\n                priors = None\r\n            print(\"priors\",priors)\r\n            if nb_type == 0:\r\n                model = MultinomialNB(class_prior=priors , alpha = smoothing)\r\n            if nb_type == 1:\r\n                model = GaussianNB(priors=priors)\r\n            else:\r\n                model = BernoulliNB(class_prior=priors , alpha = smoothing)\r\n            model.fit(X_train, y_train)\r\n            y_pred = model.predict(X_test)\r\n            probas = model.predict_proba(X_test)\r\n            tprs=[]\r\n            fprs=[]\r\n            aucs = []\r\n\r\n            label_binrize = LabelBinarizer().fit(y_train)\r\n            y_test_one_hot = label_binrize.transform(y_test)\r\n            \r\n            try:\r\n                fpr,tpr,_  = roc_curve(y_test,probas[:,1])\r\n                auc = roc_auc_score(y_test,probas[:,1])\r\n                aucs.append(auc)\r\n                fprs.append(fpr)\r\n                tprs.append(tpr)\r\n\r\n            except Exception as e:\r\n                print(e)\r\n                auc = roc_auc_score(y_test,probas,multi_class = 'ovr')\r\n                aucs.append(auc)\r\n                for i in range(num_classes):\r\n                    fpr,tpr,_ = roc_curve(y_test_one_hot[:,i],probas[:,i])\r\n                    fprs.append(fpr)\r\n                    tprs.append(tpr)\r\n\r\n            if explain:\r\n                pdp = PartialDependenceDisplay.from_estimator(model, X_train, features,target=0,method ='brute')\r\n                fi = permutation_importance(model,X_test,y_test,n_repeats=10)\r\n                partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\r\n                grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\r\n                features_importance = list(fi.importances)\r\n                partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\r\n            y_pred,partial_dependence_plot_avgs,partial_dependence_plot_grids, features_importance,fprs,tprs,aucs,probas\r\n        `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                this.fpr = Array.from(results[4]);\r\n                this.tpr = Array.from(results[5]);\r\n                this.auc = Array.from(results[6]);\r\n                this.probas = Array.from(results[7]);\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\r\n\r\n        }\r\n        return this.predictions;\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        if (this.hasExplaination) {\r\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n            this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\r\n        }\r\n        this.chartController.plotROC(this.id, this.fpr, this.tpr, uniqueLabels, this.auc);\r\n        this.chartController.probabilities_boxplot(this.probas, encoder.inverseTransform(predictions), uniqueLabels, this.id);\r\n    }\r\n}","import { asyncRun } from \"@/helpers/py-worker\";\r\nimport { ClassificationModel } from \"../model\";\r\nexport default class DiscriminantAnalysis extends ClassificationModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options\r\n        this.hasProbability = true;\r\n        this.helpSectionId = 'discriminant_analysis_help';\r\n\r\n    }\r\n    async train(x, y, x_test, y_test, columns, __, pdpIndex) {\r\n        this.context = {\r\n            lda_type: this.options.type.value,\r\n            priors: this.options.priors.value,\r\n            X_train: x,\r\n            y_train: y,\r\n            X_test: x_test,\r\n            y_test: y_test,\r\n            pdpIndex: pdpIndex,\r\n            explain: this.hasExplaination,\r\n            features: [...Array(columns.length).keys()],\r\n            num_classes: [...new Set(y)].length,\r\n\r\n\r\n        };\r\n        const script = `\r\n        import matplotlib\r\n        matplotlib.use(\"AGG\")\r\n        from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\r\n        from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\r\n        from js import X_train,y_train,X_test,lda_type,priors,y_test,features,explain,num_classes\r\n        from sklearn.inspection import PartialDependenceDisplay\r\n        from sklearn.inspection import permutation_importance\r\n        from sklearn.metrics import roc_auc_score\r\n        from sklearn.metrics import roc_curve\r\n        from sklearn.preprocessing import LabelBinarizer\r\n\r\n\r\n        features_importance = []\r\n        partial_dependence_plot_grids = []\r\n        partial_dependence_plot_avgs = []\r\n        if priors is not None and priors.strip():\r\n            priors = [float(x) for x in priors.split(',')]\r\n        else:\r\n            priors = None\r\n        print(\"priors\",priors)\r\n        if lda_type == 0:\r\n            model = LinearDiscriminantAnalysis(priors=priors)\r\n        else:\r\n            model = QuadraticDiscriminantAnalysis(priors=priors)\r\n        model.fit(X_train, y_train)\r\n        y_pred = model.predict(X_test)\r\n        probas = model.predict_proba(X_test)\r\n        tprs=[]\r\n        fprs=[]\r\n        aucs = []\r\n        label_binrize = LabelBinarizer().fit(y_train)\r\n        y_test_one_hot = label_binrize.transform(y_test)\r\n        \r\n        try:\r\n            fpr,tpr,_  = roc_curve(y_test,probas[:,1])\r\n            auc = roc_auc_score(y_test,probas[:,1])\r\n            aucs.append(auc)\r\n            fprs.append(fpr)\r\n            tprs.append(tpr)\r\n\r\n        except Exception as e:\r\n            auc = roc_auc_score(y_test,probas,multi_class = 'ovr')\r\n            aucs.append(auc)\r\n            for i in range(num_classes):\r\n                fpr,tpr,_ = roc_curve(y_test_one_hot[:,i],probas[:,i])\r\n                fprs.append(fpr)\r\n                tprs.append(tpr)\r\n\r\n        if explain:\r\n            pdp = PartialDependenceDisplay.from_estimator(model, X_train, features,target=0,method ='brute')\r\n            fi = permutation_importance(model,X_test,y_test,n_repeats=10)\r\n            partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\r\n            grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\r\n            features_importance = list(fi.importances)\r\n            partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\r\n        y_pred,partial_dependence_plot_avgs,partial_dependence_plot_grids, features_importance,fprs,tprs,aucs,probas\r\n    `;\r\n        try {\r\n            const { results, error } = await asyncRun(script, this.context);\r\n            if (results) {\r\n                this.predictions = Array.from(results[0]);\r\n                this.pdp_averages = Array.from(results[1]);\r\n                this.pdp_grid = Array.from(results[2]);\r\n                this.importances = Array.from(results[3]);\r\n                this.fpr = Array.from(results[4]);\r\n                this.tpr = Array.from(results[5]);\r\n                this.auc = Array.from(results[6]);\r\n                this.probas = Array.from(results[7]);\r\n                return Array.from(results[0]);\r\n            } else if (error) {\r\n                console.log(\"pyodideWorker error: \", error);\r\n            }\r\n        } catch (e) {\r\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\r\n\r\n        }\r\n    }\r\n\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\r\n        if (this.hasExplaination) {\r\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\r\n            this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\r\n        }\r\n        this.chartController.plotROC(this.id, this.fpr, this.tpr, uniqueLabels, this.auc);\r\n        this.chartController.probabilities_boxplot(this.probas,  encoder.inverseTransform(predictions), uniqueLabels, this.id);\r\n    }\r\n\r\n}\r\n","\r\n/* eslint-disable no-undef */\r\n/* eslint-disable no-unused-vars */\r\n\r\n\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\nimport { RegressionModel } from '../regression_model';\r\n\r\nexport default class PolynomialRegression extends RegressionModel {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options;\r\n        this.model = null;\r\n        this.hasExplaination = false\r\n        this.summary = null;\r\n        this.model_stats_matrix = null;\r\n\r\n    }\r\n\r\n    async train(x_train, y_train, x_test, y_test, labels, categorical_columns) {\r\n\r\n        let regularization_type = this.options?.regularization?.value === \"Lasso\" ? 1 : 0;\r\n        let degree = +this.options?.degree?.value;\r\n\r\n        const webR = window.webr;\r\n        await webR.init();\r\n        await webR.installPackages(['jsonlite', 'ggplot2', 'plotly', 'tidyr', 'broom', 'dplyr', 'ggrepel', 'glmnet', 'modelsummary'], { quiet: true });\r\n        await webR.objs.globalEnv.bind('xx', x_train);\r\n        await webR.objs.globalEnv.bind('x_test', x_test);\r\n        await webR.objs.globalEnv.bind('random_seed', this.seed);\r\n\r\n        await webR.objs.globalEnv.bind('y', y_train);\r\n        await webR.objs.globalEnv.bind('degree', degree);\r\n        await webR.objs.globalEnv.bind('names', labels);\r\n        await webR.objs.globalEnv.bind('categorical_columns', categorical_columns?.length === 0 ? ['empty'] : categorical_columns);\r\n\r\n        await webR.objs.globalEnv.bind('is_lasso', regularization_type);\r\n\r\n\r\n        const plotlyData = await webR.evalR(`\r\n                    library(plotly)\r\n                    library(ggplot2)\r\n                    library(tidyr)\r\n                    library(dplyr)\r\n                    library(broom)\r\n\r\n                    library(ggrepel)\r\n                    library(modelsummary)\r\n                    library(glmnet)\r\n                    set.seed(random_seed)\r\n\r\n                    # Select all columns except the first as predictors. \r\n                    add_powers <- function(df, degree,columns) {\r\n                            new_df <- df  # Copy the original data frame\r\n                            for (col in columns) {\r\n                                for (d in 2:degree){\r\n                                    new_col_name <- paste0(col, \"_\", d)\r\n                                    new_df[[new_col_name]] <- df[[col]]^d\r\n                                }\r\n                            }\r\n                            return(new_df)\r\n                        }\r\n                        \r\n                    x <- as.matrix(xx)  \r\n                    colnames(x) <- names\r\n                    cols_numerical <- setdiff(names, categorical_columns)\r\n                    df_main <- add_powers(as.data.frame(x), degree,cols_numerical)\r\n                    scale_df <- add_powers(as.data.frame(x), degree,cols_numerical)\r\n                    all_column_names <- colnames(scale_df)\r\n                    cols_to_scale <- setdiff(all_column_names, categorical_columns)\r\n                    scale_df[cols_to_scale] <- scale(scale_df[cols_to_scale])\r\n                    \r\n                    x <- as.matrix(x_test)  \r\n                    colnames(x) <- names\r\n                    df_test <- add_powers(as.data.frame(x), degree,cols_numerical)\r\n                    base_model = cv.glmnet(as.matrix(scale_df), y)\r\n                    weights <- 1 / abs(coef(base_model)[-1])\r\n\r\n                    if(is_lasso){\r\n                        cvfit = cv.glmnet(as.matrix(scale_df), y, alpha = 1)\r\n                    }else{\r\n                       cvfit = cv.glmnet(as.matrix(scale_df), y, alpha = 0)\r\n                    }\r\n                    betas = as.matrix(cvfit$glmnet.fit$beta)\r\n                    lambdas = cvfit$lambda\r\n                    names(lambdas) = colnames(betas)\r\n                    \r\n                    p <- as.data.frame(betas) %>% \r\n                      tibble::rownames_to_column(\"variable\") %>% \r\n                      pivot_longer(-variable) %>% \r\n                      mutate(lambda=lambdas[name]) %>% \r\n                      mutate(variable = factor(variable, levels = sort(unique(variable)))) %>%\r\n\r\n                    ggplot(aes(x=lambda,y=value,col=variable)) + \r\n                      geom_line() + \r\n                      geom_label_repel(data=~subset(.x,lambda==min(lambda)),\r\n                                       aes(label=variable),nudge_x=-0.5) +\r\n                      geom_vline(xintercept=c(cvfit$lambda.1se,cvfit$lambda.min),\r\n                                linetype=\"dashed\")+\r\n                      scale_x_log10() +\r\n                      labs(y = \"Coefficient\") +\r\n                    theme_bw()\r\n                    \r\n                    df = with(cvfit,\r\n                            data.frame(lambda = lambdas,MSE = cvm,MSEhi=cvup,MSElow=cvlo))\r\n\r\n                    p2<-ggplot(df,aes(x=lambda,y=MSE)) + \r\n                    geom_point(col=\"#f05454\") + \r\n                    scale_x_log10(\"lambda\") + \r\n                    geom_errorbar(aes(ymin = MSElow,ymax=MSEhi),col=\"#30475e\") + \r\n                    geom_vline(xintercept=c(cvfit$lambda.1se,cvfit$lambda.min),\r\n                                linetype=\"dashed\")+\r\n                    theme_bw()\r\n\r\n                     # Get lambda.min and lambda.1se\r\n                    lambda_min = cvfit$lambda.min\r\n                    lambda_1se = cvfit$lambda.1se\r\n\r\n                    # Get the coefficients at lambda.min and lambda.1se\r\n                    coef_lambda_min = coef(cvfit, s = \"lambda.min\")\r\n                    coef_lambda_1se = coef(cvfit, s = \"lambda.1se\")\r\n\r\n                    # Convert the sparse matrix to a regular matrix to make indexing easier\r\n                    coef_lambda_min_matrix = as.matrix(coef_lambda_min)\r\n                    coef_lambda_1se_matrix = as.matrix(coef_lambda_1se)\r\n                    coef_lambda_min_matrix = coef_lambda_min_matrix[-1, , drop = FALSE]\r\n                    coef_lambda_1se_matrix = coef_lambda_1se_matrix[-1, , drop = FALSE]\r\n                    # Find the non-zero features at lambda.min and lambda.1se\r\n                    non_zero_features_min = rownames(coef_lambda_min_matrix)[coef_lambda_min_matrix != 0]\r\n                    non_zero_features_1se = rownames(coef_lambda_1se_matrix)[coef_lambda_1se_matrix != 0]\r\n                    print(non_zero_features_min)\r\n                    print(non_zero_features_1se)\r\n                    x <- as.matrix(df_main)\r\n                    colnames(x) <- all_column_names\r\n\r\n                    model <- lm(y ~ ., data = as.data.frame(x))\r\n\r\n                    x <- as.matrix(df_test)  \r\n                    colnames(x) <- all_column_names\r\n\r\n                    predictions <- predict(model, newdata = as.data.frame(x))\r\n                    # Get coefficients, p-values, and standard errors\r\n                    coefs <- coef(model)\r\n                    pvals <- summary(model)$coefficients[,4]\r\n                    std_error <- summary(model)$coefficients[,2]\r\n                    aic_value <- AIC(model)\r\n                    bic_value <- BIC(model)\r\n                    rsquared <- summary(model)$r.squared\r\n                    residuals_ols <- resid(model)\r\n                    fitted_values_ols <- fitted(model)\r\n\r\n                    x <- as.matrix(df_main)  \r\n                    colnames(x) <- all_column_names\r\n                    X_reduced <- x[, non_zero_features_min]\r\n                    linear_model_min_features <- non_zero_features_min\r\n                    # Fit a linear regression model using the non-zero features\r\n                    print(colnames(X_reduced))\r\n                    linear_model_min <- lm(y ~ ., data = as.data.frame(X_reduced))\r\n                    coefs_min <- coef(linear_model_min)\r\n                    pvals_min <- summary(linear_model_min)$coefficients[,4]\r\n                    std_error_min <- summary(linear_model_min)$coefficients[,2]\r\n                    aic_min <- AIC(linear_model_min)\r\n                    rsquared_min <- summary(linear_model_min)$r.squared\r\n                    best_lambda <- cvfit$lambda.1se\r\n                    best_model <- glmnet(x, y, alpha =is_lasso, lambda = best_lambda)\r\n                    coefficients <- as.matrix(coef(best_model))\r\n                    residuals_min <- resid(linear_model_min)\r\n                    fitted_values_min <- fitted(linear_model_min)\r\n                    x <- as.matrix(df_test)  \r\n                    colnames(x) <- all_column_names\r\n                    predictions_min <- predict(linear_model_min, newdata = as.data.frame(x))\r\n\r\n\r\n\r\n\r\n\r\n                    x <- as.matrix(df_main)  \r\n                    colnames(x) <- all_column_names\r\n                    \r\n                    X_reduced <- x[, non_zero_features_1se]\r\n                    linear_model_1se_features <- non_zero_features_1se\r\n                    print(colnames(X_reduced))\r\n                    linear_model_1se <- lm(y ~ ., data = as.data.frame(X_reduced))\r\n                    coefs_1se <- coef(linear_model_1se)\r\n                    print(coefs_1se)\r\n                    pvals_1se <- summary(linear_model_1se)$coefficients[,4]\r\n                    aic_1se<- AIC(linear_model_1se)\r\n                    rsquared_1se <- summary(linear_model_1se)$r.squared\r\n                    std_error_1se <- summary(linear_model_1se)$coefficients[,2]\r\n                    residuals_1se <- resid(linear_model_1se)\r\n                    fitted_values_1se <- fitted(linear_model_1se)\r\n                    x <- as.matrix(df_test) \r\n                    colnames(x) <- all_column_names \r\n                    x <- x[, linear_model_1se_features]\r\n                    predictions_1se <- predict(linear_model_1se, newdata = as.data.frame(x))\r\n                    models <- list(\r\n                        \"OLS\" = model,\r\n                        \"Lasso Min \" = linear_model_min,\r\n                        \"Lasso 1se \" = linear_model_1se\r\n                        )\r\n\r\n                    z <- modelplot(models =models,coef_omit = 'Interc')\r\n                    qqplot_ols <-ggplot(data.frame(residuals = residuals_ols), aes(sample = residuals_ols)) +\r\n                        stat_qq(color = \"blue\") +\r\n                        stat_qq_line(col = \"red\") +\r\n                        labs(title = \"QQ Plot of Residuals\",\r\n                            x = \"Theoretical Quantiles\",\r\n                            y = \"Sample Quantiles\") +\r\n                        theme_bw()\r\n                    qqplot_1se <-ggplot(data.frame(residuals = residuals_1se), aes(sample = residuals_1se)) +\r\n                        stat_qq(color = \"blue\") +\r\n                        stat_qq_line(col = \"red\") +\r\n                        labs(title = \"QQ Plot of Residuals\",\r\n                            x = \"Theoretical Quantiles\",\r\n                            y = \"Sample Quantiles\") +\r\n                        theme_bw()\r\n                    qqplot_min <-ggplot(data.frame(residuals = residuals_min), aes(sample = residuals_min)) +\r\n                        stat_qq(color = \"blue\") +\r\n                        stat_qq_line(col = \"red\") +\r\n                        labs(title = \"QQ Plot of Residuals\",\r\n                            x = \"Theoretical Quantiles\",\r\n                            y = \"Sample Quantiles\") +\r\n                        theme_bw()\r\n                    list(plotly_json(p, pretty = FALSE),plotly_json(p2, pretty = FALSE),coefs,\r\n                    pvals,std_error,predictions,aic_value,bic_value,rsquared\r\n                    ,coefs_min,pvals_min,std_error_min\r\n                    ,coefs_1se,pvals_1se,std_error_1se,plotly_json(z, pretty = FALSE),linear_model_min_features,linear_model_1se_features\r\n                    ,residuals_ols,residuals_1se,residuals_min,predictions_1se,predictions_min,rsquared_1se,aic_1se,rsquared_min,aic_min\r\n                    ,plotly_json(qqplot_ols, pretty = FALSE)\r\n                    ,plotly_json(qqplot_1se, pretty = FALSE)\r\n                    ,plotly_json(qqplot_min, pretty = FALSE)\r\n                    ,all_column_names\r\n                    )\r\n                    `);\r\n        let results = await plotlyData.toArray()\r\n\r\n        this.summary = {\r\n            params: await results[2].toArray(),\r\n            bse: await results[4].toArray(),\r\n            pvalues: await results[3].toArray(),\r\n            predictions: await results[5].toArray(),\r\n            predictions1se: await results[21].toArray(),\r\n            predictionsmin: await results[22].toArray(),\r\n            residuals_ols: await results[18].toArray(),\r\n            residuals_1se: await results[19].toArray(),\r\n            residuals_min: await results[20].toArray(),\r\n            aic: await results[6].toNumber(),\r\n            bic: await results[7].toNumber(),\r\n            r2: await results[8].toNumber(),\r\n            best_fit_min: {\r\n                r2: await results[25].toNumber(),\r\n                aic: await results[26].toNumber(),\r\n                names: await results[16].toArray(),\r\n                coefs: await results[9].toArray(),\r\n                bse: await results[11].toArray(),\r\n                pvalues: await results[10].toArray(),\r\n            },\r\n            best_fit_1se: {\r\n                r2: await results[23].toNumber(),\r\n                aic: await results[24].toNumber(),\r\n                names: await results[17].toArray(),\r\n                coefs: await results[12].toArray(),\r\n                bse: await results[14].toArray(),\r\n                pvalues: await results[13].toArray(),\r\n            },\r\n            columnNames: await results[30].toArray()\r\n        };\r\n        this.model_stats_matrix = [];\r\n        let cols = this.summary.columnNames\r\n        cols.unshift(\"intercept\")\r\n        let min_ols_columns = this.summary['best_fit_min'].names;\r\n\r\n        min_ols_columns.unshift('intercept');\r\n        let se_ols_columns = this.summary['best_fit_1se'].names;\r\n        se_ols_columns.unshift('intercept');\r\n        function isNumeric(value) {\r\n            return /^-?\\d+$/.test(value);\r\n        }\r\n\r\n        for (let i = 0; i < cols.length; i++) {\r\n            let row = [];\r\n            row.push(cols[i])\r\n            row.push(this.summary['params'][i]?.toFixed(2) ?? ' ')\r\n            row.push(this.summary['bse'][i]?.toFixed(2) ?? ' ')\r\n            row.push(this.summary['pvalues'][i]?.toFixed(2) ?? ' ')\r\n            let index = min_ols_columns.findIndex(m => m === cols[i])\r\n            if (index !== -1) {\r\n                row.push(this.summary['best_fit_min']['coefs'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_min']['bse'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_min']['pvalues'][index]?.toFixed(2) ?? ' ')\r\n            } else {\r\n                row.push(' ')\r\n                row.push(' ')\r\n                row.push(' ')\r\n            }\r\n            index = se_ols_columns.findIndex(m => m === cols[i])\r\n            if (index !== -1) {\r\n                row.push(this.summary['best_fit_1se']['coefs'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_1se']['bse'][index]?.toFixed(2) ?? ' ')\r\n                row.push(this.summary['best_fit_1se']['pvalues'][index]?.toFixed(2) ?? ' ')\r\n            } else {\r\n                row.push(' ')\r\n                row.push(' ')\r\n                row.push(' ')\r\n            }\r\n            this.model_stats_matrix.push(row)\r\n        }\r\n        this.model_stats_matrix = this.model_stats_matrix.sort(function (a, b) {\r\n            if (a[0] > b[0]) {\r\n                return 1\r\n            }\r\n            if (a[0] < b[0]) {\r\n                return -1\r\n            }\r\n            return 0\r\n        })\r\n        this.model_stats_matrix.reverse()\r\n        let reg_plot = JSON.parse(await results[0].toString())\r\n        reg_plot.layout['showlegend'] = true;\r\n        reg_plot.layout['autosize'] = true;\r\n        reg_plot.layout['responsive'] = true;\r\n        reg_plot.layout.xaxis['side'] = 'top';\r\n        reg_plot.layout.legend = {\r\n            orientation: 'h',\r\n            font: {\r\n\r\n                size: 8,\r\n                color: '#000'\r\n            },\r\n        };\r\n        let coefs_plot = JSON.parse(await results[15].toString())\r\n        coefs_plot.layout.legend = {\r\n            x: 0,\r\n            y: 1,\r\n            traceorder: 'normal',\r\n            font: {\r\n\r\n                size: 8,\r\n                color: '#000'\r\n            },\r\n        };\r\n        this.summary.coefs_plot = coefs_plot;\r\n        this.summary.coefs_plot.layout['autosize'] = true;\r\n        this.summary.coefs_plot.layout['responsive'] = true;\r\n        this.summary.coefs_plot.layout.xaxis.title.font = {\r\n            size: 10\r\n        };\r\n        this.summary.regularization_plot = reg_plot;\r\n        this.summary.errors_plot = JSON.parse(await results[1].toString());\r\n        this.summary.qqplot_ols_plot = JSON.parse(await results[27].toString());\r\n        this.summary.qqplot_1se_plot = JSON.parse(await results[28].toString());\r\n        this.summary.qqplot_min_plot = JSON.parse(await results[29].toString());\r\n\r\n        this.summary.qqplot_ols_plot.layout.height = 300\r\n        this.summary.qqplot_ols_plot.layout.width = 300\r\n        this.summary.qqplot_ols_plot.layout.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_ols_plot.data[0].marker.size = 3;\r\n        this.summary.qqplot_ols_plot.layout.xaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_ols_plot.layout.yaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n\r\n        this.summary.qqplot_1se_plot.layout.height = 300\r\n        this.summary.qqplot_1se_plot.layout.width = 300\r\n        this.summary.qqplot_1se_plot.layout.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_1se_plot.data[0].marker.size = 3;\r\n\r\n        this.summary.qqplot_1se_plot.layout.xaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_1se_plot.layout.yaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n\r\n        this.summary.qqplot_min_plot.layout.height = 300\r\n        this.summary.qqplot_min_plot.layout.width = 300\r\n        this.summary.qqplot_min_plot.layout.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_min_plot.layout.xaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_min_plot.layout.yaxis.title.font = {\r\n\r\n            size: 10\r\n        };\r\n        this.summary.qqplot_min_plot.data[0].marker.size = 3;\r\n        return this.summary['predictions'];\r\n    }\r\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder) {\r\n        await super.visualize(x_test, y_test, uniqueLabels, predictions)\r\n        let current = this;\r\n\r\n        new DataTable('#metrics_table_' + current.id, {\r\n            responsive: false,\r\n            \"footerCallback\": function (row, data, start, end, display) {\r\n                var api = this.api();\r\n                $(api.column(2).footer()).html(\r\n                    'R2 : ' + current.summary.r2.toFixed(2) + ' AIC: ' + current.summary.aic.toFixed(2)\r\n                );\r\n                $(api.column(5).footer()).html(\r\n                    'R2 : ' + current.summary['best_fit_min'].r2.toFixed(2) + ' AIC: ' + current.summary['best_fit_min'].aic.toFixed(2)\r\n                );\r\n                $(api.column(8).footer()).html(\r\n                    'R2 : ' + current.summary['best_fit_1se'].r2.toFixed(2) + ' AIC: ' + current.summary['best_fit_1se'].aic.toFixed(2)\r\n                );\r\n            },\r\n            data: current.model_stats_matrix,\r\n            info: false,\r\n            search: false,\r\n            ordering: false,\r\n            searching: false,\r\n            paging: false,\r\n            bDestroy: true,\r\n            columnDefs: [\r\n                {\r\n                    \"targets\": 3,\r\n                    \"createdCell\": function (td, cellData, rowData, row, col) {\r\n                        if (rowData[3] <= 0.05) {\r\n                            $(td).css('color', 'red')\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"targets\": 6,\r\n                    \"createdCell\": function (td, cellData, rowData, row, col) {\r\n                        if (rowData[6] <= 0.05) {\r\n                            $(td).css('color', 'red')\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"targets\": 9,\r\n                    \"createdCell\": function (td, cellData, rowData, row, col) {\r\n                        if (rowData[9] <= 0.05) {\r\n                            $(td).css('color', 'red')\r\n                        }\r\n                    }\r\n                }\r\n            ],\r\n        });\r\n\r\n        Plotly.newPlot('regularization_' + current.id, current.summary.regularization_plot, { autosize: true, responsive: true });\r\n        Plotly.newPlot('parameters_plot_' + current.id, current.summary.coefs_plot, { autosize: true, responsive: true });\r\n        Plotly.newPlot('errors_' + current.id, current.summary.errors_plot, { autosize: true, responsive: true });\r\n        Plotly.newPlot('qqplot_ols_' + current.id, current.summary.qqplot_ols_plot);\r\n        Plotly.newPlot('qqplot_min_' + current.id, current.summary.qqplot_min_plot);\r\n        Plotly.newPlot('qqplot_1se_' + current.id, current.summary.qqplot_1se_plot);\r\n        current.chartController.yhat_plot(y_test, this.summary['predictions'], 'regression_y_yhat_' + + current.id, 'OLS predictions')\r\n        current.chartController.yhat_plot(y_test, this.summary['predictionsmin'], 'regression_y_yhat_min_' + + current.id, 'lasso min predictions')\r\n        current.chartController.yhat_plot(y_test, this.summary['predictions1se'], 'regression_y_yhat_1se_' + + current.id, 'lasso 1se predictions')\r\n        current.chartController.residual_plot(y_test, this.summary['residuals_ols'], 'regression_residual_' + + current.id, 'OLS residuals')\r\n        current.chartController.residual_plot(y_test, this.summary['residuals_min'], 'regression_residual_min_' + + current.id, 'lasso min residuals')\r\n        current.chartController.residual_plot(y_test, this.summary['residuals_1se'], 'regression_residual_1se_' + + current.id, 'lasso 1se residuals')\r\n        this.ui.predictions_table_regression(x_test, y_test, predictions, this.id);\r\n    }\r\n\r\n}","import { asyncRun } from \"@/helpers/py-worker\";\n\n\nexport default class KernelRegression {\n    constructor(options) {\n        this.options = options;\n        this.model = null;\n        this.hasExplaination = false;\n\n    }\n    async train(x_train, y_train, x_test, _, labels) {\n        this.context = {\n            X_train: x_train,\n            y_train: y_train,\n            X_test: x_test,\n            types: this.options.types,\n            labels: labels\n        };\n        const script = `\n        import numpy as np\n        import statsmodels.api as sm\n        from js import X_train,y_train,X_test,labels,types\n        from statsmodels.nonparametric.kernel_regression import KernelReg\n        import pandas as pd\n\n        df_test = pd.DataFrame(X_test,columns=labels)\n        x_test = df_test.iloc[:,:]\n\n        df_train = pd.DataFrame(X_train,columns=labels)\n        x_train = df_train.iloc[:,:]\n\n        model = KernelReg(endog=np.array(y_train), exog=x_train, var_type=types)\n        \n        preds = model.fit(x_test)\n\n        \n        preds\n        `;\n        try {\n            const { results, error } = await asyncRun(script, this.context);\n            if (results) {\n                return results;\n            } else if (error) {\n                console.log(\"pyodideWorker error: \", error);\n            }\n        } catch (e) {\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\n\n        }\n\n    }\n    predict(x_test) {\n        const result = this.model.predict(x_test);\n        return result\n    }\n}","import { asyncRun } from \"@/helpers/py-worker\";\nimport { ClassificationModel } from '../model';\nexport default class Boosting extends ClassificationModel {\n    constructor(opt, chartControler) {\n        super(chartControler);\n        let options = {\n            booster: opt.booster.value ?? \"gbtree\",\n            objective: \"multi:softmax\",\n            max_depth: +opt.depth.value,\n            eta: +opt.eta.value,\n            estimators: opt.estimators.value ?? 200\n        }\n        this.options = options;\n        this.helpSectionId = 'cart_help';\n\n    }\n    // eslint-disable-next-line no-unused-vars\n    async train(x, y, x_test, y_test, columns, __, pdpIndex) {\n        this.context = {\n            X_train: x,\n            y_train: y,\n            X_test: x_test,\n            y_test: y_test,\n            objective: this.options.objective,\n            max_depth: this.options.max_depth,\n            eta: this.options.eta,\n            estimators: this.options.estimators,\n            seed: this.seed,\n            pdpIndex: pdpIndex,\n            features: [...Array(columns.length).keys()],\n            explain: this.hasExplaination\n        };\n        const script = `\n        import matplotlib\n        matplotlib.use(\"AGG\")\n        from js import X_train,y_train,X_test,y_test,objective,max_depth,eta,estimators,seed,features,explain\n        from sklearn.inspection import PartialDependenceDisplay\n        from sklearn.inspection import permutation_importance\n        from sklearn.ensemble import GradientBoostingClassifier\n\n        features_importance = []\n        partial_dependence_plot_grids = []\n        partial_dependence_plot_avgs = []\n\n        model = GradientBoostingClassifier(learning_rate = eta,n_estimators = estimators,max_depth =max_depth,random_state = seed )\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n        if explain:\n            pdp = PartialDependenceDisplay.from_estimator(model, X_train, features,target=0,method ='brute')\n            fi = permutation_importance(model,X_test,y_test,n_repeats=10)\n            partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\n            grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\n            features_importance = list(fi.importances)\n            partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\n        y_pred,partial_dependence_plot_avgs,partial_dependence_plot_grids, features_importance\n    `;\n        try {\n            const { results, error } = await asyncRun(script, this.context);\n            if (results) {\n                this.predictions = Array.from(results[0]);\n                this.pdp_averages = Array.from(results[1]);\n                this.pdp_grid = Array.from(results[2]);\n                this.importances = Array.from(results[3]);\n                return Array.from(results[0]);\n            } else if (error) {\n                console.log(\"pyodideWorker error: \", error);\n            }\n        } catch (e) {\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\n\n        }\n    }\n    generatePythonCode() {\n        let model_import = \"from sklearn.ensemble import GradientBoostingClassifier\"\n        let model_fit =\n            `model = GradientBoostingClassifier(learning_rate = ${this.options.eta} ,n_estimators = ${this.options.estimators} ,max_depth =${this.options.max_depth} ,random_state = ${this.seed} )`;\n        return super.generatePythonCode(model_import, model_fit)\n    }\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\n        if (this.hasExplaination) {\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\n            this.chartController.plotPDP(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\n        }\n    }\n}\n","\nimport { RegressionModel } from '../regression_model';\nimport { asyncRun } from \"@/helpers/py-worker\";\n\n\nexport default class BoostingRegression extends RegressionModel {\n    constructor(opt, chartControler) {\n        super(chartControler);\n        let options = {\n            booster: opt.booster.value ?? \"gbtree\",\n            objective: \"multi:softmax\",\n            max_depth: +opt.depth.value,\n            eta: +opt.eta.value,\n            estimators: opt.estimators.value ?? 200\n        }\n        this.options = options;\n        this.helpSectionId = 'cart_help';\n\n    }\n    async train(x, y, x_test, y_test, columns) {\n        this.context = {\n            X_train: x,\n            y_train: y,\n            X_test: x_test,\n            y_test: y_test,\n            objective: this.options.objective,\n            max_depth: this.options.max_depth,\n            eta: this.options.eta,\n            estimators: this.options.estimators,\n            seed: this.seed,\n            explain: this.hasExplaination,\n            features: [...Array(columns.length).keys()]\n        };\n        const script = `\n\n        from js import X_train,y_train,X_test,y_test,objective,max_depth,eta,estimators,seed,features,explain\n        from sklearn.inspection import PartialDependenceDisplay\n        from sklearn.inspection import permutation_importance\n        from sklearn.ensemble import GradientBoostingRegressor\n        import pandas as pd\n        import matplotlib\n        matplotlib.use(\"AGG\")\n\n        features_importance = []\n        partial_dependence_plot_grids = []\n        partial_dependence_plot_avgs = []\n        model = GradientBoostingRegressor(learning_rate = eta,n_estimators = estimators,max_depth =max_depth,random_state = seed)\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n\n\n\n        if explain:\n            pdp = PartialDependenceDisplay.from_estimator(model, X_train, features,method ='brute')\n            fi = permutation_importance(model,X_test,y_test,n_repeats=10)\n            partial_dependence_plot_avgs = list(map(lambda item:item['average'],pdp.pd_results))\n            grids = list(map(lambda item:item['grid_values'],pdp.pd_results))\n            features_importance = list(fi.importances)\n            partial_dependence_plot_grids = [item[0].tolist() for item in grids ]\n        y_pred,partial_dependence_plot_avgs,partial_dependence_plot_grids, features_importance\n\n    `;\n        try {\n            const { results, error } = await asyncRun(script, this.context);\n            if (results) {\n                this.predictions = Array.from(results[0]);\n                this.pdp_averages = Array.from(results[1]);\n                this.pdp_grid = Array.from(results[2]);\n                this.importances = Array.from(results[3]);\n                return Array.from(results[0]);\n            } else if (error) {\n                console.log(\"pyodideWorker error: \", error);\n            }\n        } catch (e) {\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\n\n        }\n    }\n    async visualize(x_test, y_test, uniqueLabels, predictions, encoder, columns, categorical_columns) {\n        await super.visualize(x_test, y_test, uniqueLabels, predictions, encoder)\n        if (this.hasExplaination) {\n            this.chartController.PFIBoxplot(this.id, this.importances, columns);\n            this.chartController.plotPDPRegression(this.id, this.pdp_averages, this.pdp_grid, uniqueLabels, columns, categorical_columns);\n        }\n\n    }\n\n}","import { Settings } from \"@/helpers/settings\";\r\nimport LogisticRegression from \"./classification/logistic_regression\";\r\nimport LinearRegression from \"./regression/linear_regression\";\r\nimport BSplineRegression from \"./regression/bspline_regression\";\r\nimport SupportVectorMachine from './classification/svm';\r\nimport SupportVectorMachineRegression from './regression/svm';\r\n\r\nimport KNNModel from './classification/knn';\r\nimport KNNRegressor from './regression/knn_regressor';\r\nimport RandomForest from \"./classification/random_forest\";\r\nimport RandomForestRegressor from \"./regression/random_forest\";\r\nimport NaiveBayes from \"./classification/NaiveBayes\";\r\nimport DiscriminantAnalysis from \"./classification/lda\";\r\nimport PolynomialRegression from \"./regression/polynomial_regression\";\r\nimport KernelRegression from \"./regression/kernel_regression\";\r\nimport Boosting from \"./classification/boosting\";\r\nimport BoostingRegression from \"./regression/boosting\";\r\n\r\n\r\n\r\nexport var ModelFactory = function () {\r\n    this.createModel = (modelName, options) => {\r\n        switch (modelName) {\r\n            case Settings.classification.logistic_regression.value:\r\n                return new LogisticRegression(options);\r\n            case Settings.classification.k_nearest_neighbour.value:\r\n                return new KNNModel(options);\r\n            case Settings.classification.random_forest.value:\r\n                return new RandomForest(options);\r\n            case Settings.classification.support_vector_machine.value:\r\n                return new SupportVectorMachine(options);\r\n            case Settings.classification.boosting.value:\r\n                return new Boosting(options);\r\n            case Settings.regression.boosting.value:\r\n                return new BoostingRegression(options);\r\n            case Settings.classification.discriminant_analysis.value:\r\n                return new DiscriminantAnalysis(options);\r\n            case Settings.classification.naive_bayes.value:\r\n                return new NaiveBayes(options);\r\n            case Settings.regression.linear_regression.value:\r\n                return new LinearRegression(options);\r\n            case Settings.regression.k_nearest_neighbour.value:\r\n                return new KNNRegressor(options);\r\n            case Settings.regression.support_vector_machine.value:\r\n                return new SupportVectorMachineRegression(options);\r\n            case Settings.regression.random_forest.value:\r\n                return new RandomForestRegressor(options);\r\n            case Settings.regression.polynomial_regression.value:\r\n                return new PolynomialRegression(options);\r\n            case Settings.regression.kernel_regression.value:\r\n                return new KernelRegression(options);\r\n            case Settings.regression.bspline_regression.value:\r\n                return new BSplineRegression(options);\r\n            default:\r\n                throw new Error(\"Model not supported.\");\r\n        }\r\n    }\r\n}","<!-- eslint-disable no-unused-vars -->\r\n<template>\r\n    <div class=\"column is-2  has-background-info-light\t\" style=\"height: 100%;\">\r\n        <!-- <button @click=\"impute()\">Impute</button> -->\r\n        <figure class=\"image is-96x96\">\r\n            <img src=\"/logo.png\" />\r\n        </figure>\r\n        <section>\r\n            <upload-component @uploaded=\"generateTargetDropdown\" @uploaded-file=\"setFile\"></upload-component>\r\n            <div class=\"column is-12\">\r\n                <b-field label=\"Seed\" :label-position=\"'on-border'\">\r\n                    <b-input v-model=\"seed\" size=\"is-small\" placeholder=\"Seed\" type=\"number\" min=\"0\">\r\n                    </b-input>\r\n                </b-field>\r\n                <b-field label=\"Target\" :label-position=\"'on-border'\">\r\n                    <b-select :expanded=\"true\" v-model=\"modelTarget\" @input=\"checkmodelTask\" size=\"is-small\">\r\n                        <option v-for=\"option in columns\" :value=\"option\" :key=\"option\">\r\n                            {{ option }}\r\n                        </option>\r\n                    </b-select>\r\n                </b-field>\r\n                <b-field label=\"Imputation\" :label-position=\"'on-border'\">\r\n                    <b-select :expanded=\"true\" v-model=\"imputationOption\" size=\"is-small\">\r\n                        <option v-for=\"option in imputationOptions\" :value=\"option.id\" :key=\"option.id\">\r\n                            {{ option.label }}\r\n                        </option>\r\n                    </b-select>\r\n                </b-field>\r\n                <b-field label=\"Cross Validation\" :label-position=\"'on-border'\">\r\n                    <b-select :expanded=\"true\" v-model=\"crossValidationOption\" size=\"is-small\">\r\n                        <option v-for=\"option in crossValidationOptions\" :value=\"option.id\" :key=\"option.id\">\r\n                            {{ option.label }}\r\n                        </option>\r\n                    </b-select>\r\n                </b-field>\r\n                <b-field label=\"Model\" :label-position=\"'on-border'\">\r\n                    <b-select :disabled=\"tuneModel\" :expanded=\"true\" v-model=\"modelOption\" size=\"is-small\">\r\n                        <option v-for=\"option in modelOptions\" :value=\"option.id\" :key=\"option.id\">\r\n                            {{ option.title }}\r\n                        </option>\r\n                    </b-select>\r\n                    <b-button @click=\"configureModel\" size=\"is-small\" icon-pack=\"fas\"\r\n                        :icon-left=\"!this.tuneModel ? 'cog' : 'arrow-left'\"></b-button>\r\n                </b-field>\r\n                <section v-if=\"tuneModel\" class=\"mx-1\">\r\n                    <b-field v-for=\"(option, i) in modelConfigurations\" :key=\"i\" :label=\"option.label\"\r\n                        :label-position=\"'on-border'\">\r\n                        <b-select v-model=\"option.value\" :expanded=\"true\" size=\"is-small\"\r\n                            v-if=\"option.type === 'select'\">\r\n                            <option v-for=\"(item, index) in option.values\" :value=\"item.value\" :key=\"index\">\r\n                                {{ item.label }}\r\n                            </option>\r\n                        </b-select>\r\n                        <b-input size=\"is-small\" v-model=\"option.value\" type=\"number\"\r\n                            v-else-if=\"option.type === 'number'\"></b-input>\r\n                        <b-input size=\"is-small\" v-model=\"option.value\" type=\"text\"\r\n                            v-else-if=\"option.type === 'text'\"></b-input>\r\n                    </b-field>\r\n                </section>\r\n                <b-field>\r\n                    <b-checkbox v-model=\"dataScalingBehavior\" size=\"is-small\">Standardize by default</b-checkbox>\r\n                </b-field>\r\n                <b-field>\r\n                    <b-checkbox v-model=\"explainModel\" size=\"is-small\">Explain the model</b-checkbox>\r\n                </b-field>\r\n                <b-field>\r\n                    <b-checkbox v-model=\"usePCAs\" size=\"is-small\">Use PC components</b-checkbox>\r\n                </b-field>\r\n                <b-field v-if=\"usePCAs\" label=\"Number of Components\" :label-position=\"'on-border'\">\r\n                    <b-input size=\"is-small\" v-model=\"numberOfComponents\" type=\"number\"></b-input>\r\n                </b-field>\r\n                <b-field>\r\n                    <b-checkbox v-model=\"useHPC\" size=\"is-small\">Use HPC resources</b-checkbox>\r\n                </b-field>\r\n                <b-field>\r\n                    <b-button @click=\"train\" size=\"is-small\" icon-pack=\"fas\" icon-left=\"play\" :loading=\"training\"\r\n                        :disabled=\"!dataframe || modelOption == null\">\r\n                        train</b-button>\r\n                    <button class=\"button is-small\" @click=\"upload()\">Upload to HPC server</button>\r\n                </b-field>\r\n                <b-loading :is-full-page=\"false\" v-model=\"training\"></b-loading>\r\n            </div>\r\n        </section>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n/* eslint-disable no-unused-vars */\r\n\r\nimport UploadComponent from \"./upload-component.vue\";\r\nimport { Settings, FeatureCategories, CV_OPTIONS } from '../helpers/settings'\r\nimport PCA from '@/helpers/dimensionality-reduction/pca';\r\n\r\nimport { ModelFactory } from \"@/helpers/model_factory\";\r\nimport { settingStore } from '@/stores/settings'\r\nimport { applyDataTransformation, handle_missing_values, encode_dataset, evaluate_classification } from '@/helpers/utils';\r\nimport { LabelEncoder, tensorflow, concat } from 'danfojs/dist/danfojs-base';\r\nimport { toJSON, DataFrame } from 'danfojs';\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n    name: 'SidebarComponent',\r\n    setup() {\r\n        const settings = settingStore()\r\n\r\n        return { settings }\r\n    },\r\n    components: {\r\n        UploadComponent\r\n    },\r\n    props: {\r\n        msg: String\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            dataScalingBehavior: false,\r\n            explainModel: true,\r\n            training: false,\r\n            tuneModel: false,\r\n            numberOfComponents: 0,\r\n            usePCAs: false,\r\n            useHPC: false,\r\n            seed: 123,\r\n            dataframe: null,\r\n            configureFeatures: false,\r\n            modelOptions: Settings.classification,\r\n            imputationOption: 1,\r\n            modelOption: 1,\r\n            featureTypeOptions: FeatureCategories,\r\n            crossValidationOption: 1,\r\n            columns: [],\r\n            modelTarget: null,\r\n            modelConfigurations: null,\r\n            imputationOptions: [{\r\n                id: 1,\r\n                label: 'Delete rows'\r\n            },\r\n            {\r\n                id: 2,\r\n                label: 'Mean and Mode'\r\n            }, {\r\n                id: 3,\r\n                label: 'Linear regression'\r\n            }, {\r\n                id: 4,\r\n                label: 'random forest'\r\n            }],\r\n            crossValidationOptions: [{\r\n                id: CV_OPTIONS.SPLIT,\r\n                label: '70 % training - 30 % test'\r\n            },\r\n            {\r\n                id: CV_OPTIONS.NO,\r\n                label: 'No'\r\n            }, {\r\n                id: CV_OPTIONS.KFOLD,\r\n                label: 'k-fold'\r\n            }],\r\n            featureSettings: [],\r\n            modelSettings: [],\r\n            modelName: '',\r\n            file: null\r\n        }\r\n    },\r\n    methods: {\r\n        setFile(e) {\r\n            this.file = e\r\n        },\r\n        upload() {\r\n            let formdata = new FormData();\r\n            this.settings.rawData\r\n            formdata.append('file', this.file);\r\n            console.log(this.file);\r\n\r\n            axios.post('http://127.0.0.1:5000/upload', formdata, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            }\r\n            ).then(function () {\r\n                console.log('SUCCESS!!');\r\n            }).catch(function () {\r\n                console.log('FAILURE!!');\r\n            });\r\n        },\r\n        updateFeatures() {\r\n            this.configureFeatures = false;\r\n            this.$emit('updateFeatures', true)\r\n        },\r\n        toggleTraining() {\r\n            this.training = !this.training;\r\n            let message = this.training ? 'started training ' + this.modelName : 'Successully fitted ' + this.modelName;\r\n            this.$buefy.toast.open(\r\n                {\r\n                    duration: 5000,\r\n                    message: this.training ? 'started training ' + this.modelName : 'Successully fitted ' + this.modelName,\r\n                    type: this.training ? 'is-info' : 'is-success',\r\n                })\r\n            this.settings.addMessage({ message: message, type: 'info' });\r\n        },\r\n        getDefaultModelConfiguration() {\r\n            for (const key in this.modelOptions) {\r\n                const model = this.modelOptions[key];\r\n                if (model.id === this.modelOption) {\r\n                    for (const key in model.options) {\r\n                        model.options[key].value = model.options[key]?.default;\r\n                    }\r\n                    this.modelConfigurations = model.options;\r\n                    this.modelName = model.title\r\n                }\r\n            }\r\n        },\r\n        configureModel() {\r\n            this.tuneModel = !this.tuneModel;\r\n            this.getDefaultModelConfiguration()\r\n        },\r\n        generateTargetDropdown() {\r\n            this.dataframe = this.settings.getDataset;\r\n            this.columns = this.dataframe.columns;\r\n            this.featureSettings = this.columns.map((column, index) => {\r\n                return {\r\n                    name: column,\r\n                    selected: true,\r\n                    type: this.dataframe.dtypes[index] === 'string' ? FeatureCategories.Nominal.id : FeatureCategories.Numerical.id\r\n                }\r\n            })\r\n            this.modelTarget = this.dataframe.columns[this.dataframe.columns.length - 1];\r\n            this.settings.setTarget(this.modelTarget)\r\n            let selectedFeatures = this.featureSettings.filter(feature => feature.selected);\r\n            for (let i = 0; i < selectedFeatures.length; i++) {\r\n                this.settings.addFeature(selectedFeatures[i])\r\n            }\r\n            this.$emit('updateFeatures', true)\r\n\r\n        },\r\n        checkmodelTask() {\r\n            console.log(this.modelTarget);\r\n\r\n            this.settings.setTarget(this.modelTarget)\r\n            let targetFeature = this.settings.items.find(feature => feature.name == this.modelTarget);\r\n            if (!targetFeature.selected) {\r\n                let message = 'Target is not selected'\r\n                this.$buefy.toast.open(\r\n                    {\r\n                        duration: 3000,\r\n                        message: message,\r\n                        type: 'is-warning',\r\n                    })\r\n                this.settings.addMessage({ message: message, type: 'warning' });\r\n                return\r\n            }\r\n            this.settings.setmodelTask(targetFeature.type === FeatureCategories.Numerical.id ? false : true);\r\n            this.modelOptions = targetFeature.type === FeatureCategories.Numerical.id ? Settings.regression : Settings.classification;\r\n            // let selectedFeatures = this.featureSettings.filter(feature => feature.selected);\r\n            // for (let i = 0; i < selectedFeatures.length; i++) {\r\n            //     this.settings.addFeature(selectedFeatures[i])\r\n            // }\r\n        },\r\n        async train() {\r\n            try {\r\n                if (!this.modelConfigurations) {\r\n                    this.getDefaultModelConfiguration()\r\n                }\r\n                let seed = +this.seed;\r\n                this.settings.setSeed(seed)\r\n                let categoricalFeatures = []\r\n                let dataset = null;\r\n                this.dataframe = new DataFrame(this.settings.rawData);\r\n                dataset = await this.dataframe.sample(this.dataframe.$data.length, { seed: seed });\r\n\r\n                let numericColumns = this.settings.items.filter(m => m.selected && m.type === FeatureCategories.Numerical.id).map(m => m.name);\r\n                const target = this.settings.modelTarget;\r\n                dataset = handle_missing_values(dataset)\r\n                dataset = applyDataTransformation(dataset, numericColumns, this.settings.transformationsList);\r\n                if (this.dataScalingBehavior) {\r\n                    let transformations = []\r\n                    for (let i = 0; i < numericColumns.length; i++) {\r\n                        transformations.push({ name: numericColumns[i], scaler: '1' })\r\n                    }\r\n                    dataset = applyDataTransformation(dataset, numericColumns, transformations);\r\n                }\r\n                let selected_columns = this.settings.items.filter(m => m.selected).map(m => m.name)\r\n                const index = selected_columns.findIndex(m => m === target)\r\n                if (index === -1) {\r\n                    selected_columns.push(target)\r\n                }\r\n\r\n                let filterd_dataset = dataset.loc({ columns: selected_columns })\r\n                // add class transformation\r\n                if (this.settings.isClassification) {\r\n                    let selectedClasses = this.settings.mergedClasses\r\n                    if (selectedClasses?.length > 0) {\r\n                        this.settings.mergedClasses.forEach((classes) => {\r\n                            let newClass = classes.map(m => m.class).join('_');\r\n                            classes.forEach(cls => {\r\n                                filterd_dataset.replace(cls.class, newClass, { columns: [this.settings.modelTarget], inplace: true })\r\n                            });\r\n                        })\r\n                    }\r\n                }\r\n\r\n\r\n                const targets = filterd_dataset.column(target)\r\n                filterd_dataset.drop({ columns: target, inplace: true })\r\n\r\n\r\n\r\n                const cross_validation_setting = this.crossValidationOption;\r\n\r\n                [filterd_dataset, categoricalFeatures] = encode_dataset(filterd_dataset, this.settings.items.filter(m => m.selected).filter(m => m.name !== this.settings.modelTarget).map(m => {\r\n                    return {\r\n                        name: m.name,\r\n                        type: m.type\r\n                    }\r\n                }))\r\n                let x_train, y_train, x_test, y_test;\r\n                if (cross_validation_setting === CV_OPTIONS.KFOLD &&\r\n                    (this.modelName != Settings.classification.logistic_regression.title || this.modelName != Settings.regression.linear_regression.title)) {\r\n                    let performances = [];\r\n                    for (let i = 1; i < 6; i++) {\r\n                        [x_train, y_train, x_test, y_test] = this.kfoldSplit(filterd_dataset, targets, i);\r\n                        let uniqueLabels = [...new Set(y_train.values)];\r\n                        let labelEncoder, encoded_y, encoded_y_test;\r\n                        if (this.settings.classificationTask) {\r\n                            [labelEncoder, encoded_y, encoded_y_test] = this.encodeTarget(y_train.values, y_test.values)\r\n                        } else {\r\n                            encoded_y = y_train.values;\r\n                            encoded_y_test = y_test.values;\r\n                        }\r\n                        let model_factory = new ModelFactory();\r\n                        let model = model_factory.createModel(this.modelOption, this.modelConfigurations)\r\n                        model.hasExplaination = false;\r\n                        model.id = this.settings.getCounter\r\n                        this.toggleTraining()\r\n                        let predictions = await model.train(x_train.values, encoded_y, x_test.values, encoded_y_test, x_train.columns, categoricalFeatures, 0);\r\n                        let metrics = await model.evaluateModel(encoded_y_test, predictions, uniqueLabels)\r\n                        if (this.settings.classificationTask) {\r\n                            metrics = metrics[4]\r\n                        } else {\r\n                            metrics = metrics[0]\r\n                        }\r\n                        this.training = false;\r\n                        performances.push(metrics)\r\n                    }\r\n                } else {\r\n                    [x_train, y_train, x_test, y_test] = this.splitData(cross_validation_setting, filterd_dataset, targets);\r\n                }\r\n\r\n\r\n                let uniqueLabels = [...new Set(y_train.values)];\r\n                let labelEncoder, encoded_y, encoded_y_test;\r\n                if (this.settings.classificationTask) {\r\n                    [labelEncoder, encoded_y, encoded_y_test] = this.encodeTarget(y_train.values, y_test.values)\r\n                } else {\r\n                    encoded_y = y_train.values;\r\n                    encoded_y_test = y_test.values;\r\n                }\r\n                let model_factory = new ModelFactory();\r\n                let model = model_factory.createModel(this.modelOption, this.modelConfigurations)\r\n                model.seed = seed;\r\n                model.id = this.settings.getCounter\r\n                this.toggleTraining()\r\n                model.hasExplaination = this.explainModel;\r\n                if (this.usePCAs) {\r\n                    const pca = new PCA();\r\n                    let numericColumns = this.settings.items.filter(column => column.selected && column.type === 1 && column.name != this.modelTarget).map(column => column.name);\r\n                    let [pca_train, _, __, ___, ____, pca_test] = await pca.predict(x_train.loc({ columns: numericColumns }).values,\r\n                        this.numberOfComponents, x_test.loc({ columns: numericColumns }).values)\r\n                    pca_train = pca_train.map(m => [].slice.call(m))\r\n                    pca_test = pca_test.map(m => [].slice.call(m))\r\n                    let cols = pca_train[0].map((_, i) => 'PC_' + (i + 1))\r\n                    x_train = new DataFrame(pca_train, { columns: cols })\r\n                    x_test = new DataFrame(pca_test, { columns: cols })\r\n                }\r\n                console.log(new Set(encoded_y));\r\n                let predictions = this.useHPC ? [] : await model.train(x_train.values, encoded_y, x_test.values, encoded_y_test, x_train.columns, categoricalFeatures, 0);\r\n                let metrics = this.useHPC ? [] : await model.evaluateModel(encoded_y_test, predictions, uniqueLabels)\r\n                if (predictions?.length > 0 || this.useHPC) {\r\n\r\n                    this.settings.addResult({\r\n                        id: model.id,\r\n                        useHPC: this.useHPC ? Math.random().toString(16).slice(2) : 0,\r\n                        showProbas: model.hasProbability,\r\n                        helpSectionId: model.helpSectionId,\r\n                        hasExplaination: model.hasExplaination,\r\n                        snapshot: {\r\n                            x: x_train,\r\n                            y: encoded_y,\r\n                            xt: x_test,\r\n                            yt: encoded_y_test,\r\n                            xFeatures: x_train.columns,\r\n                            categoricals: categoricalFeatures,\r\n                            id: this.modelOption,\r\n                            labels: uniqueLabels\r\n                        },\r\n                        seed: seed,\r\n                        encoder: labelEncoder,\r\n                        name: this.usePCAs ? 'PC.' + this.modelName : this.modelName,\r\n                        datasetName: this.settings.getDatasetName,\r\n                        modelTask: this.settings.classificationTask,\r\n                        metrics: metrics,\r\n                        options: JSON.parse(JSON.stringify(this.modelConfigurations)),\r\n                        target: target,\r\n                        categoricalFeatures: this.settings.items.filter(m => m.selected && m.type !== FeatureCategories.Numerical.id).map(m => m.name),\r\n                        numericColumns: numericColumns,\r\n                        transformations: [...this.settings.transformationsList.filter(feature => feature.type != 0)],\r\n                        tables: model.tables,\r\n                        plots: model.plots,\r\n                        predictions: predictions,\r\n                        model: model\r\n\r\n                    });\r\n                    this.settings.setActiveTab(2);\r\n                    setTimeout(async () => {\r\n                        this.settings.setResultActiveTab(model.id + 1);\r\n                        window.dispatchEvent(new Event('resize'));\r\n                    }, 100);\r\n                    if (!this.useHPC) {\r\n                        await model.visualize(x_test, encoded_y_test, uniqueLabels, predictions, labelEncoder, x_train.columns, categoricalFeatures)\r\n                    }\r\n                    this.settings.increaseCounter();\r\n                    this.toggleTraining();\r\n                }\r\n            } catch (error) {\r\n                this.training = false;\r\n                let message = 'Failed to fit the ' + this.modelName\r\n                this.$buefy.toast.open(\r\n                    {\r\n                        duration: 3000,\r\n                        message: message,\r\n                        type: 'is-warning',\r\n                    })\r\n                this.settings.addMessage({ message: message, type: 'warning' });\r\n                throw error;\r\n            }\r\n        },\r\n        impute() {\r\n            this.training = true;\r\n            axios.post('http://127.0.0.1:5000/missforest', {\r\n                data: toJSON(this.dataframe),\r\n                categoricalFeatures: this.settings.items.filter(m => m.selected && m.type !== FeatureCategories.Numerical.id).map(m => m.name)\r\n            }).then(res => {\r\n                let df = new DataFrame(res.data);\r\n                this.dataframe = df\r\n                this.settings.setDataframe(df);\r\n                this.training = false;\r\n            })\r\n        }\r\n    },\r\n    created: function () {\r\n        this.splitData = function (cross_validation_setting, filterd_dataset, targets, stepSize = 0.7) {\r\n            let x_train, y_train, x_test, y_test;\r\n            let len = filterd_dataset.$data.length\r\n            if (cross_validation_setting === CV_OPTIONS.SPLIT) {\r\n                const limit = Math.ceil(len * stepSize)\r\n                const train_bound = `0:${limit}`\r\n                const test_bound = `${limit}:${len}`\r\n                x_train = filterd_dataset.iloc({ rows: [train_bound] })\r\n                y_train = targets.iloc([train_bound])\r\n                x_test = filterd_dataset.iloc({ rows: [test_bound] });\r\n                y_test = targets.iloc([test_bound]);\r\n            } else if (cross_validation_setting === CV_OPTIONS.NO) {\r\n                x_train = filterd_dataset\r\n                y_train = targets\r\n                x_test = filterd_dataset\r\n                y_test = targets\r\n            }\r\n            return [x_train, y_train, x_test, y_test]\r\n        }\r\n        this.kfoldSplit = function (filterd_dataset, targets, fold = 1) {\r\n            let x_train, y_train, x_test, y_test;\r\n            let len = filterd_dataset.$data.length\r\n            const lowerLimit = Math.ceil(len * ((fold - 1) * 0.2))\r\n            const upperLimit = Math.ceil(len * (fold * 0.2))\r\n            const train_bound_lower = lowerLimit != 0 ? `:${lowerLimit}` : null\r\n            const train_bound_upper = upperLimit != len ? `${upperLimit}:` : null\r\n            const test_bound = `${lowerLimit}:${upperLimit}`\r\n\r\n\r\n            let x_train_upper = train_bound_upper != null ? filterd_dataset.iloc({ rows: [train_bound_upper] }) : null\r\n            let y_train_upper = train_bound_upper != null ? targets.iloc([train_bound_upper]) : null\r\n            x_test = filterd_dataset.iloc({ rows: [test_bound] });\r\n            y_test = targets.iloc([test_bound]);\r\n            let x_train_lower = train_bound_lower != null ? filterd_dataset.iloc({ rows: [train_bound_lower] }) : null\r\n            let y_train_lower = train_bound_lower != null ? targets.iloc([train_bound_lower]) : null\r\n            if (x_train_lower && x_train_upper) {\r\n                x_train = concat({ dfList: [x_train_lower, x_train_upper], axis: 0 })\r\n                y_train = concat({ dfList: [y_train_lower, y_train_upper], axis: 0 })\r\n            } else {\r\n                x_train = x_train_lower == null ? x_train_upper : x_train_lower\r\n                y_train = x_train_lower == null ? y_train_upper : y_train_lower\r\n            }\r\n\r\n\r\n            return [x_train, y_train, x_test, y_test]\r\n\r\n        }\r\n        this.encodeTarget = function (y_train, y_test) {\r\n            let labelEncoder = new LabelEncoder()\r\n            labelEncoder.fit(y_train)\r\n            labelEncoder.transform(y_train)\r\n            let encoded_y = labelEncoder.transform(y_train)\r\n            let encoded_y_test = labelEncoder.transform(y_test)\r\n            return [labelEncoder, encoded_y, encoded_y_test]\r\n        }\r\n    },\r\n    watch: {\r\n        modelOption: function () {\r\n            this.modelConfigurations = null\r\n        },\r\n\r\n\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.is-danger {\r\n    color: red !important;\r\n}\r\n</style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./sidebar-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./sidebar-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./sidebar-component.vue?vue&type=template&id=0d976438\"\nimport script from \"./sidebar-component.vue?vue&type=script&lang=js\"\nexport * from \"./sidebar-component.vue?vue&type=script&lang=js\"\nimport style0 from \"./sidebar-component.vue?vue&type=style&index=0&id=0d976438&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"column is-10\"},[_c('section',[_c('b-tabs',{attrs:{\"position\":'is-centered',\"animated\":false,\"type\":\"success\"},on:{\"input\":function($event){return _vm.resize()}},model:{value:(_vm.settings.activeTab),callback:function ($$v) {_vm.$set(_vm.settings, \"activeTab\", $$v)},expression:\"settings.activeTab\"}},[_c('b-tab-item',{attrs:{\"label\":\"Data Analysis\",\"icon\":\"search\",\"icon-pack\":\"fas\"}},[(this.settings.datasetShape?.count > 0)?_c('section',[(_vm.isActive)?_c('div',{staticClass:\"message is-info\",attrs:{\"closable\":false}},[_c('div',{staticClass:\"message-header p-2\"},[_vm._v(\"Data summary\")]),_c('div',{staticClass:\"message-body\"},[_c('div',{staticClass:\"columns is-multiline\"},[_c('div',{staticClass:\"column is-12 has-text-left\"},[_c('p',{staticClass:\"title is-6 m-0 mb-1\"},[_vm._v(\" Data Shape: (\"+_vm._s(this.settings.datasetShape.count)+\",\"+_vm._s(this.settings.datasetShape.columns)+\")\")])]),_c('div',{staticClass:\"column is-6\"},[_c('h5',{staticClass:\"title is-6 has-text-left m-0 mb-1\"},[_vm._v(\"Numerical Features: \")]),_c('div',{staticClass:\"table-container\"},[_c('table',{staticClass:\"table is-size-7\"},[_c('thead',[_c('tr',[_c('th',{staticClass:\"is-success\"}),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Name\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Min\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Max\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Mean\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Median\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"st.d\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"#NAs\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Type\")])])]),_c('tbody',_vm._l((_vm.continuousFeaturesStats),function(feature){return _c('tr',{key:feature.name},[_c('td',[_c('b-checkbox',{model:{value:(feature.selected),callback:function ($$v) {_vm.$set(feature, \"selected\", $$v)},expression:\"feature.selected\"}})],1),_c('td',[_vm._v(_vm._s(feature.name))]),_c('td',[_vm._v(_vm._s(feature.min))]),_c('td',[_vm._v(_vm._s(feature.max))]),_c('td',[_vm._v(_vm._s(feature.median))]),_c('td',[_vm._v(_vm._s(feature.mean))]),_c('td',[_vm._v(_vm._s(feature.std))]),_c('td',[_vm._v(_vm._s(feature.missingValuesCount))]),_c('td',[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},model:{value:(feature.type),callback:function ($$v) {_vm.$set(feature, \"type\", $$v)},expression:\"feature.type\"}},_vm._l((_vm.featureTypeOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.name)+\" \")])}),0)],1)])}),0)])]),_c('button',{staticClass:\"button is-small is-info\",on:{\"click\":function($event){return _vm.applyChanges()}}},[_vm._v(\"Apply changes\")])]),_c('div',{staticClass:\"column is-6\"},[_c('h5',{staticClass:\"title is-6 has-text-left m-0 mb-1\"},[_vm._v(\"Categorical Features(Nominal/Ordinal):\")]),_c('div',{staticClass:\"table-container\"},[_c('table',{staticClass:\"table is-size-7 mb-1\"},[_c('thead',[_c('tr',[_c('th',{staticClass:\"is-success\"}),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Name\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Shape\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Mode\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Mode percentage\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"#NAs\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Type\")])])]),_c('tbody',_vm._l((_vm.categoricalFeaturesStats),function(feature){return _c('tr',{key:feature.name},[_c('td',[_c('b-checkbox',{model:{value:(feature.selected),callback:function ($$v) {_vm.$set(feature, \"selected\", $$v)},expression:\"feature.selected\"}})],1),_c('td',[_vm._v(_vm._s(feature.name))]),_c('td',[_vm._v(_vm._s(feature.shape))]),_c('td',[_vm._v(_vm._s(feature.mode))]),_c('td',[_vm._v(_vm._s(feature.percentage))]),_c('td',[_vm._v(_vm._s(feature.missingValuesCount))]),_c('td',[_c('b-select',{attrs:{\"expanded\":true,\"size\":\"is-small\"},model:{value:(feature.type),callback:function ($$v) {_vm.$set(feature, \"type\", $$v)},expression:\"feature.type\"}},_vm._l((_vm.featureTypeOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.name)+\" \")])}),0)],1)])}),0)]),_c('p',{staticClass:\"subtitle is-7 m-0 p-0\"},[_vm._v(\" Nominal features are one hot encoded and ordinal features are encoded in one column.\")])])]),_c('div',{staticClass:\"column is-6\"},[_c('h5',{staticClass:\"title is-6 has-text-left\"},[_vm._v(\"Sample Data :\")]),_c('b-table',{staticClass:\"is-size-7 m-0 mb-1\",attrs:{\"data\":_vm.sampleData,\"columns\":_vm.datasetColumns,\"narrowed\":true,\"bordered\":true,\"striped\":true,\"hoverable\":true}})],1)])])]):_vm._e(),_c('section',[_c('scatterplot-matrix-component',{ref:\"splom\"})],1),_c('section',[_c('article',{staticClass:\"message is-info mt-2\"},[_c('div',{staticClass:\"message-header p-2\"},[_vm._v(\"Correlation Matrix and Dendrogram \"),_c('b-tooltip',{attrs:{\"append-to-body\":\"\",\"label\":\"Ward method requires euclidean distance\",\"multilined\":\"\"}},[_c('b-button',{attrs:{\"icon-left\":\"info\",\"icon-pack\":\"fas\",\"size\":\"is-small\",\"type\":\"is-dark\"}})],1)],1),_c('div',{staticClass:\"message-body\"},[_c('div',{staticClass:\"columns is-gapless\"},[_c('div',{staticClass:\"column is-6 mx-1\"}),_c('div',{staticClass:\"column is-6 mx-1\"},[_c('b-field',{attrs:{\"label\":\"Linkage method, Distance Metric\",\"custom-class\":\"is-small\"}},[_c('b-select',{attrs:{\"size\":\"is-small\",\"placeholder\":\"Method\"},model:{value:(_vm.method),callback:function ($$v) {_vm.method=$$v},expression:\"method\"}},[_c('option',{attrs:{\"value\":\"single\"}},[_vm._v(\"single\")]),_c('option',{attrs:{\"value\":\"complete\"}},[_vm._v(\"complete\")]),_c('option',{attrs:{\"value\":\"average\"}},[_vm._v(\"average\")]),_c('option',{attrs:{\"value\":\"weighted\"}},[_vm._v(\"weighted\")]),_c('option',{attrs:{\"value\":\"centroid\"}},[_vm._v(\"centroid\")]),_c('option',{attrs:{\"value\":\"median\"}},[_vm._v(\"median\")]),_c('option',{attrs:{\"value\":\"ward\"}},[_vm._v(\"ward\")])]),_c('b-select',{attrs:{\"size\":\"is-small\",\"placeholder\":\"Metric\"},model:{value:(_vm.metric),callback:function ($$v) {_vm.metric=$$v},expression:\"metric\"}},[_c('option',{attrs:{\"value\":\"euclidean\"}},[_vm._v(\"euclidean\")]),_c('option',{attrs:{\"value\":\"correlation\"}},[_vm._v(\"correlation\")]),_c('option',{attrs:{\"value\":\"mahalanobis\"}},[_vm._v(\"mahalanobis\")]),_c('option',{attrs:{\"value\":\"cosine\"}},[_vm._v(\"cosine\")])]),_c('p',{staticClass:\"control\"},[_c('b-button',{staticClass:\"is-success is-small\",attrs:{\"disabled\":_vm.loading,\"loading\":_vm.loading},on:{\"click\":_vm.correlationMatrix}},[_vm._v(\"Correlation Cluster Diagram\")])],1)],1)],1)]),_c('div',{staticClass:\"columns is-multiline is-centered mb-2 p-0 is-gapless\"},[_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":\"correlation_matrix\"}}),_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":\"correlation_matrix_ordered\"}})])])])])]):_c('section',[_c('b-message',{attrs:{\"type\":\"is-danger\",\"has-icon\":\"\",\"icon-pack\":\"fas\"}},[_vm._v(\" Upload a dataset or select a sample from sidebar. \")])],1)]),_c('b-tab-item',{attrs:{\"label\":\"Dimensionality Reduction\",\"icon\":\"compress-arrows-alt\",\"icon-pack\":\"fas\"}},[_c('dmensionality-reduction-component',{attrs:{\"dataframe\":this.settings.df,\"columns\":_vm.selectedFeatures}})],1),_c('b-tab-item',{attrs:{\"label\":\"Results Analysis\",\"icon\":\"chart-pie\",\"icon-pack\":\"fas\"}},[_c('results-component',{ref:\"results\"})],1),_c('b-tab-item',{attrs:{\"label\":\"Methods Details\",\"icon\":\"list\",\"icon-pack\":\"fas\"}},[_c('methods-tab-component')],1),_c('b-tab-item',{attrs:{\"label\":\"Help\",\"icon\":\"question\",\"icon-pack\":\"fas\"}},[_c('div',{staticClass:\"content has-text-left\"},[_c('h4',[_vm._v(\"1. Dataset Selection\")]),_c('p',[_vm._v(\" To begin, you can either select a sample dataset provided by the system or upload your own dataset. The supported file formats for datasets include .xlsx (Excel files), .csv (Comma Separated Values files), and .txt (plain text files). Ensure that your file is in one of these formats to avoid any issues during the upload process. \")]),_c('figure',[_c('img',{attrs:{\"src\":\"/upload.png\"}}),_c('figcaption',[_vm._v(\"Figure 1: Dataset Selection\")])]),_c('h4',[_vm._v(\"2. Data Analysis\")]),_c('figure',[_c('img',{attrs:{\"src\":\"/stats_categorical.jpg\"}}),_c('figcaption',[_vm._v(\"Figure 2: Categorical features stats\")])]),_c('p',[_vm._v(\" After uploading the dataset an overview of the dataset would be shhown in the Data Analysis tab. In the first window we provide you witth statistical metrics of the dataset. for canotinious features we show the mean, std, min, max, and etc. In case of categorical features information such as shape, mode and percentages of smaples with modes option, and number of missing values. \")]),_c('figure',[_c('img',{attrs:{\"src\":\"/stats_continious.jpg\"}}),_c('figcaption',[_vm._v(\"Figure 3: Categorical features stats\")])]),_c('p',[_vm._v(\" In case of categorical features information such as shape, mode and percentages of smaples with modes option, and number of missing values. \")]),_c('h4',[_vm._v(\"3. Feature selection\")]),_c('p',[_vm._v(\" After uploading the dataset, you can customize the data by selecting specific features based on your requirements. To do this, click on the 'Select Features' button, which will open a new menu. This menu allows you to choose the features that will be used in the training process. If there is an issue with the automatic detection of feature data types, you can manually adjust the data types to ensure they are correctly categorized as ordinal, categorical, or continuous. \")]),_c('h4',[_vm._v(\"3. Model Selection\")]),_c('figure',[_c('img',{attrs:{\"src\":\"/model_selection.jpg\"}}),_c('figcaption',[_vm._v(\"Figure 4: Model selection and setting for knn\")])]),_c('p',[_vm._v(\" Once you have selected all the required features and resolved any issues with feature data types, you can proceed to the model selection step. Use the 'Model' dropdown to choose the model for training. The options in this dropdown will be dynamically populated based on the type of data in your features: regression models will be available for continuous data, while classification models will be shown for categorical data. Additionally, you can further customize the selected model by clicking the gear icon, which allows you to adjust common settings and parameters specific to each model. \")])])]),_c('b-tab-item',{attrs:{\"label\":\"Messages Log\",\"icon\":\"history\",\"icon-pack\":\"fas\"}},_vm._l((this.settings.getMessages),function(m,i){return _c('b-notification',{key:i,attrs:{\"aria-close-label\":\"Close notification\",\"icon-pack\":\"fas\",\"type\":m.type == 'warning' ? 'is-warning' : m.type == 'danger' ? 'is-danger' : 'is-info',\"has-icon\":\"\",\"closable\":false}},[_vm._v(\" \"+_vm._s(m.message?.toLowerCase())+\" \"),_c('br'),_vm._v(\" \"+_vm._s(m.date)+\" \")])}),1)],1)],1)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return (this.settings?.items.length > 2)?_c('section',[_c('div',{staticClass:\"message is-info\"},[_c('div',{staticClass:\"message-header p-2\"},[_vm._v(\"Principle Component Analysis\")]),_c('div',{staticClass:\"message-body\"},[_c('b-field',[_c('p',{staticClass:\"control\"},[_c('b-button',{attrs:{\"disabled\":_vm.numberOfComponents < 2 || _vm.numberOfComponents > this.settings.items.filter(column => column.selected && column.type === 1)?.length,\"size\":\"is-small\",\"type\":\"is-info\",\"loading\":_vm.loadingPCA,\"label\":\"Fit PCA\"},on:{\"click\":function($event){return _vm.drawPCA()}}})],1)]),_c('div',{staticClass:\"columns is-multiline\",attrs:{\"id\":\"pca_container\"}},[_vm._m(0),_vm._m(1),(this.pcaVarianceData)?_c('button',{staticClass:\"button is-small mt-1\",on:{\"click\":function($event){return _vm.downloadExplainedVariance()}}},[_vm._v(\"Download PCA variance data\")]):_vm._e(),(_vm.hasPCA)?_c('div',{staticClass:\"column is-12\"},[_c('b-field',{attrs:{\"label\":\"Number of Components\",\"label-position\":'on-border'}},[_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\",\"min\":\"2\",\"placeholder\":\"Number of Components\"},model:{value:(_vm.numberOfComponents),callback:function ($$v) {_vm.numberOfComponents=$$v},expression:\"numberOfComponents\"}}),_c('p',{staticClass:\"control\"},[_c('b-button',{attrs:{\"disabled\":_vm.numberOfComponents < 2 || _vm.x == _vm.y || _vm.numberOfComponents > this.settings.items.filter(column => column.selected && column.type === 1)?.length,\"size\":\"is-small\",\"type\":\"is-info\",\"loading\":_vm.loadingPCA,\"label\":\"Draw PCA\"},on:{\"click\":function($event){return _vm.findPCA()}}})],1)],1)],1):_vm._e(),_c('div',{staticClass:\"column is-12\"},[_c('div',{attrs:{\"id\":\"pca_matrix\"}}),(this.pcaData)?_c('button',{staticClass:\"button is-small mt-1\",on:{\"click\":function($event){return _vm.downloadPCA()}}},[_vm._v(\"Download PCA data\")]):_vm._e(),(this.pcaData)?_c('button',{staticClass:\"button is-small mt-1\",on:{\"click\":function($event){return _vm.downloadPCAPlot()}}},[_vm._v(\"Download plot\")]):_vm._e()])])],1)]),_c('div',{staticClass:\"message is-info\"},[_c('div',{staticClass:\"message-header p-2\"},[_vm._v(\"t-distributed stochastic neighbor embedding\")]),_c('div',{staticClass:\"message-body\"},[_c('b-field',{attrs:{\"grouped\":\"\"}},[_c('b-field',{attrs:{\"label\":\"Number of Components\",\"label-position\":'on-border'}},[_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\",\"placeholder\":\"Components\"},model:{value:(_vm.componentsTSNE),callback:function ($$v) {_vm.componentsTSNE=$$v},expression:\"componentsTSNE\"}})],1),_c('b-field',{attrs:{\"label\":\"Seed\",\"label-position\":'on-border'}},[_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\",\"placeholder\":\"Seed\"},model:{value:(_vm.seedTSNE),callback:function ($$v) {_vm.seedTSNE=$$v},expression:\"seedTSNE\"}}),_c('p',{staticClass:\"control\"},[_c('b-button',{attrs:{\"size\":\"is-small\",\"type\":\"is-info\",\"loading\":_vm.loadingTSNE,\"label\":\"Fit t-SNE\"},on:{\"click\":_vm.findTSNE}})],1)],1)],1),_vm._m(2)],1)]),_c('div',{staticClass:\"message is-info\"},[_c('div',{staticClass:\"message-header p-2\"},[_vm._v(\"Autoencoder\")]),_c('div',{staticClass:\"message-body\"},[_c('b-field',{attrs:{\"grouped\":\"\"}},[_c('b-field',{attrs:{\"expanded\":\"\"}},[_c('b-field',{attrs:{\"label\":\"Hidden layers size\",\"label-position\":'on-border'}},[_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\",\"placeholder\":\"Hidden layer size\"},model:{value:(_vm.hiddenLayerSize),callback:function ($$v) {_vm.hiddenLayerSize=$$v},expression:\"hiddenLayerSize\"}})],1),_c('b-field',{attrs:{\"label\":\"x axis\",\"label-position\":'on-border'}},[_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\",\"placeholder\":\"x axis\"},model:{value:(_vm.autoEncoderX),callback:function ($$v) {_vm.autoEncoderX=$$v},expression:\"autoEncoderX\"}})],1),_c('b-field',{attrs:{\"label\":\"y axis\",\"label-position\":'on-border'}},[_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\",\"placeholder\":\"y axis\"},model:{value:(_vm.autoEncoderY),callback:function ($$v) {_vm.autoEncoderY=$$v},expression:\"autoEncoderY\"}})],1),_c('b-field',{attrs:{\"label\":\"iterations\",\"label-position\":'on-border'}},[_c('b-input',{attrs:{\"size\":\"is-small\",\"type\":\"number\",\"placeholder\":\"iterations\"},model:{value:(_vm.iterations),callback:function ($$v) {_vm.iterations=$$v},expression:\"iterations\"}})],1),_c('b-field',{attrs:{\"label\":\"encoder\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"size\":\"is-small\",\"placeholder\":\"Encoder Activation Function\"},model:{value:(_vm.encoderActivationFunction),callback:function ($$v) {_vm.encoderActivationFunction=$$v},expression:\"encoderActivationFunction\"}},[_c('option',{attrs:{\"value\":\"linear\",\"id\":\"linear\"}},[_vm._v(\" linear \")]),_c('option',{attrs:{\"value\":\"sigmoid\",\"id\":\"sigmoid\"}},[_vm._v(\" sigmoid \")]),_c('option',{attrs:{\"value\":\"relu\",\"id\":\"relu\"}},[_vm._v(\" RELU \")])])],1),_c('b-field',{attrs:{\"label\":\"decoder\",\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"size\":\"is-small\",\"placeholder\":\"Decoder Activation Function\"},model:{value:(_vm.decoderActivationFunction),callback:function ($$v) {_vm.decoderActivationFunction=$$v},expression:\"decoderActivationFunction\"}},[_c('option',{attrs:{\"value\":\"linear\",\"id\":\"linear\"}},[_vm._v(\" linear \")]),_c('option',{attrs:{\"value\":\"sigmoid\",\"id\":\"sigmoid\"}},[_vm._v(\" sigmoid \")]),_c('option',{attrs:{\"value\":\"relu\",\"id\":\"relu\"}},[_vm._v(\" RELU \")])])],1),_c('b-field',{attrs:{\"label-position\":'on-border'}},[_c('p',{staticClass:\"control\"},[_c('b-button',{attrs:{\"size\":\"is-small\",\"type\":\"is-info\",\"loading\":_vm.loadingAutoEncoder,\"label\":\"Fit Autoencoder\"},on:{\"click\":_vm.autoEncoder}})],1)])],1)],1),_vm._m(3)],1)])]):_c('section',[_c('b-message',{attrs:{\"type\":\"is-danger\",\"has-icon\":\"\",\"icon-pack\":\"fas\"}},[_vm._v(\" There is no data to show. \")])],1)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"column is-6\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":\"scree_plot\"}})])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"column is-6\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":\"correlation_circle\"}})])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"column is-6\",attrs:{\"id\":\"dimensionality_reduction_panel_tsne\"}},[_c('div',{attrs:{\"id\":\"tsne\"}})])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"column is-6\",attrs:{\"id\":\"dimensionality_reduction_panel_tsne\"}},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":\"autoencoder\"}})])\n}]\n\nexport { render, staticRenderFns }","<template>\r\n    <section v-if=\"this.settings?.items.length > 2\">\r\n        <div class=\"message is-info\">\r\n            <div class=\"message-header p-2\">Principle Component Analysis</div>\r\n            <div class=\"message-body\">\r\n                <b-field>\r\n                    <p class=\"control\">\r\n                        <b-button\r\n                            :disabled=\"numberOfComponents < 2 || numberOfComponents > this.settings.items.filter(column => column.selected && column.type === 1)?.length\"\r\n                            size=\"is-small\" @click=\"drawPCA()\" type=\"is-info\" :loading=\"loadingPCA\" label=\"Fit PCA\" />\r\n                    </p>\r\n                </b-field>\r\n                <div class=\"columns is-multiline\" id=\"pca_container\">\r\n                    <div class=\"column is-6\">\r\n                        <div id=\"scree_plot\" style=\"height: 300px;\"></div>\r\n                    </div>\r\n                    <div class=\"column is-6\">\r\n                        <div id=\"correlation_circle\" style=\"height: 300px;\"></div>\r\n                    </div>\r\n                    <button class=\"button is-small mt-1\" v-if=\"this.pcaVarianceData\"\r\n                        @click=\"downloadExplainedVariance()\">Download\r\n                        PCA variance data</button>\r\n                    <div class=\"column is-12\" v-if=\"hasPCA\">\r\n                        <b-field label=\"Number of Components\" :label-position=\"'on-border'\">\r\n                            <b-input v-model=\"numberOfComponents\" size=\"is-small\" type=\"number\" min=\"2\"\r\n                                placeholder=\"Number of Components\"></b-input>\r\n                            <p class=\"control\">\r\n                                <b-button\r\n                                    :disabled=\"numberOfComponents < 2 || x == y || numberOfComponents > this.settings.items.filter(column => column.selected && column.type === 1)?.length\"\r\n                                    size=\"is-small\" @click=\"findPCA()\" type=\"is-info\" :loading=\"loadingPCA\"\r\n                                    label=\"Draw PCA\" />\r\n                            </p>\r\n                        </b-field>\r\n                    </div>\r\n                    <div class=\"column is-12\">\r\n                        <div id=\"pca_matrix\"></div>\r\n                        <button class=\"button is-small mt-1\" v-if=\"this.pcaData\" @click=\"downloadPCA()\">Download\r\n                            PCA\r\n                            data</button>\r\n                        <button class=\"button is-small mt-1\" v-if=\"this.pcaData\" @click=\"downloadPCAPlot()\">Download\r\n                            plot</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"message is-info\">\r\n            <div class=\"message-header p-2\">t-distributed stochastic neighbor embedding</div>\r\n            <div class=\"message-body\">\r\n\r\n                <b-field grouped>\r\n                    <b-field label=\"Number of Components\" :label-position=\"'on-border'\">\r\n                        <b-input v-model=\"componentsTSNE\" size=\"is-small\" type=\"number\"\r\n                            placeholder=\"Components\"></b-input>\r\n                    </b-field>\r\n                    <b-field label=\"Seed\" :label-position=\"'on-border'\">\r\n                        <b-input v-model=\"seedTSNE\" size=\"is-small\" type=\"number\" placeholder=\"Seed\"></b-input>\r\n                        <p class=\"control\">\r\n                            <b-button @click=\"findTSNE\" size=\"is-small\" type=\"is-info\" :loading=\"loadingTSNE\"\r\n                                label=\"Fit t-SNE\" />\r\n                        </p>\r\n                    </b-field>\r\n                </b-field>\r\n\r\n                <div class=\"column is-6\" id=\"dimensionality_reduction_panel_tsne\">\r\n                    <div id=\"tsne\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"message is-info\">\r\n            <div class=\"message-header p-2\">Autoencoder</div>\r\n            <div class=\"message-body\">\r\n                <b-field grouped>\r\n                    <b-field expanded>\r\n\r\n                        <b-field label=\"Hidden layers size\" :label-position=\"'on-border'\">\r\n                            <b-input v-model=\"hiddenLayerSize\" size=\"is-small\" type=\"number\"\r\n                                placeholder=\"Hidden layer size\"></b-input>\r\n                        </b-field>\r\n                        <b-field label=\"x axis\" :label-position=\"'on-border'\">\r\n                            <b-input v-model=\"autoEncoderX\" size=\"is-small\" type=\"number\"\r\n                                placeholder=\"x axis\"></b-input>\r\n                        </b-field>\r\n                        <b-field label=\"y axis\" :label-position=\"'on-border'\">\r\n                            <b-input v-model=\"autoEncoderY\" size=\"is-small\" type=\"number\"\r\n                                placeholder=\"y axis\"></b-input>\r\n                        </b-field>\r\n                        <b-field label=\"iterations\" :label-position=\"'on-border'\">\r\n                            <b-input v-model=\"iterations\" size=\"is-small\" type=\"number\"\r\n                                placeholder=\"iterations\"></b-input>\r\n                        </b-field>\r\n                        <b-field label=\"encoder\" :label-position=\"'on-border'\">\r\n                            <b-select v-model=\"encoderActivationFunction\" size=\"is-small\"\r\n                                placeholder=\"Encoder Activation Function\">\r\n                                <option value=\"linear\" id=\"linear\">\r\n                                    linear\r\n                                </option>\r\n                                <option value=\"sigmoid\" id=\"sigmoid\">\r\n                                    sigmoid\r\n                                </option>\r\n                                <option value=\"relu\" id=\"relu\">\r\n                                    RELU\r\n                                </option>\r\n                            </b-select>\r\n                        </b-field>\r\n                        <b-field label=\"decoder\" :label-position=\"'on-border'\">\r\n                            <b-select size=\"is-small\" v-model=\"decoderActivationFunction\"\r\n                                placeholder=\"Decoder Activation Function\">\r\n                                <option value=\"linear\" id=\"linear\">\r\n                                    linear\r\n                                </option>\r\n                                <option value=\"sigmoid\" id=\"sigmoid\">\r\n                                    sigmoid\r\n                                </option>\r\n                                <option value=\"relu\" id=\"relu\">\r\n                                    RELU\r\n                                </option>\r\n                            </b-select>\r\n                        </b-field>\r\n\r\n                        <b-field :label-position=\"'on-border'\">\r\n                            <p class=\"control\">\r\n                                <b-button size=\"is-small\" @click=\"autoEncoder\" type=\"is-info\"\r\n                                    :loading=\"loadingAutoEncoder\" label=\"Fit Autoencoder\" />\r\n                            </p>\r\n                        </b-field>\r\n                    </b-field>\r\n                </b-field>\r\n                <div class=\"column is-6\" id=\"dimensionality_reduction_panel_tsne\">\r\n                    <div id=\"autoencoder\" style=\"height: 300px;\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n    <section v-else>\r\n        <b-message type=\"is-danger\" has-icon icon-pack=\"fas\">\r\n            There is no data to show.\r\n        </b-message>\r\n    </section>\r\n</template>\r\n\r\n<script>\r\nimport ChartController from '@/helpers/charts';\r\nimport { settingStore } from '@/stores/settings'\r\nimport { tensorflow, DataFrame } from 'danfojs/dist/danfojs-base';\r\nimport { $toCSV } from 'danfojs/dist/danfojs-base/io/browser/io.csv';\r\n\r\nimport { FeatureCategories } from '@/helpers/settings'\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nlet chartController = new ChartController();\r\nexport default {\r\n    name: 'dmensionality-reduction-component',\r\n    setup() {\r\n        const settings = settingStore()\r\n\r\n        return { settings }\r\n    },\r\n    props: {\r\n        msg: String,\r\n        dataframe: Object,\r\n        columns: []\r\n    },\r\n    data() {\r\n        return {\r\n            numberOfComponents: 2,\r\n            loadingPCA: false,\r\n            loadingTSNE: false,\r\n            x: 1, y: 2,\r\n            loadingAutoEncoder: false,\r\n            hiddenLayerSize: 2,\r\n            componentsTSNE: 2,\r\n            seedTSNE: 123,\r\n            pcaData: null,\r\n            pcaVarianceData: null,\r\n            iterations: 200,\r\n            encoderActivationFunction: 'linear',\r\n            decoderActivationFunction: 'linear',\r\n            autoEncoderX: 1,\r\n            autoEncoderY: 2,\r\n            hasPCA: false,\r\n            pcaContainers: [],\r\n            df: null,\r\n        }\r\n    },\r\n    methods: {\r\n        prepareData() {\r\n            this.df = new DataFrame(this.settings.rawData);\r\n            this.df.dropNa({ axis: 1, inplace: true })\r\n            if (this.settings.isClassification && this.settings.mergedClasses?.length > 0) {\r\n                this.settings.mergedClasses.forEach((classes) => {\r\n                    let newClass = classes.map(m => m.class).join('_');\r\n                    classes.forEach(cls => {\r\n                        this.df.replace(cls.class, newClass, { columns: [this.settings.modelTarget], inplace: true })\r\n                    });\r\n                })\r\n            }\r\n        },\r\n        async drawPCA() {\r\n            try {\r\n                this.numberOfComponents = null\r\n                await this.findPCA(true);\r\n            } catch (error) {\r\n                this.loadingPCA = false;\r\n                throw error;\r\n            }\r\n\r\n        },\r\n        async findPCA(drawExplainedVariance = false) {\r\n            try {\r\n                this.prepareData()\r\n                this.loadingPCA = true;\r\n                this.pcaContainers = []\r\n                let numericColumns = this.settings.items.filter(column => column.selected && column.type === 1).map(column => column.name);\r\n                if (drawExplainedVariance == false) {\r\n                    if (this.numberOfComponents == 2) {\r\n                        this.pcaContainers.push([1, 2])\r\n                    } else {\r\n                        if (this.numberOfComponents == 3) {\r\n                            this.pcaContainers.push([1, 2], [1, 3], [2, 3])\r\n                        } else if (this.numberOfComponents > 3) {\r\n                            this.pcaContainers.push([1, 2], [1, 3], [2, 3])\r\n                            for (let i = 4; i <= this.numberOfComponents; i++) {\r\n                                let j = 1;\r\n                                while (j <= i - 1) {\r\n                                    this.pcaContainers.push([j, i])\r\n                                    j++\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.numberOfComponents = numericColumns.length\r\n                }\r\n\r\n                let x = this.df.loc({ columns: numericColumns }).values;\r\n                let pcaData = await chartController.draw_pca(\r\n                    x,\r\n                    this.settings.isClassification,\r\n                    this.df.loc({ columns: [this.settings.modelTarget] }).values,\r\n                    this.numberOfComponents,\r\n                    this.pcaContainers,\r\n                    numericColumns,\r\n                    drawExplainedVariance\r\n                )\r\n                this.pcaData = pcaData[0]\r\n                this.pcaVarianceData = pcaData[1]\r\n                this.hasPCA = true;\r\n                this.loadingPCA = false;\r\n\r\n            } catch (error) {\r\n                this.loadingPCA = false;\r\n                throw error;\r\n            }\r\n\r\n        },\r\n        downloadPCAPlot() {\r\n            chartController.downloadPlot('pca_matrix');\r\n        },\r\n        downloadPCA() {\r\n            let df = new DataFrame(this.pcaData)\r\n            $toCSV(df, { filePath: \"pca_data.csv\", download: true });\r\n        },\r\n        downloadExplainedVariance() {\r\n            let varianceData = [];\r\n            for (let i = 1; i <= this.pcaVarianceData.length; i++) {\r\n                const element = this.pcaVarianceData[i - 1];\r\n                varianceData.push({ Components: i, ExplainedVariace: element })\r\n            }\r\n            let df = new DataFrame(varianceData)\r\n            $toCSV(df, { filePath: \"variance_data.csv\", download: true });\r\n        },\r\n        async findTSNE() {\r\n            try {\r\n                this.prepareData()\r\n                this.loadingTSNE = true;\r\n                let numericColumns = this.settings.items.filter(column => column.selected && column.type === 1).map(column => column.name);\r\n                await chartController.plot_tsne(this.df.loc({ columns: numericColumns }).values,\r\n                    this.settings.isClassification\r\n                    , this.df.loc({ columns: [this.settings.modelTarget] }).values, this.seedTSNE, this.componentsTSNE);\r\n                this.loadingTSNE = false;\r\n            } catch (error) {\r\n                this.loadingTSNE = false;\r\n                throw error;\r\n            }\r\n\r\n        },\r\n        async autoEncoder() {\r\n            this.prepareData()\r\n            this.loadingAutoEncoder = true;\r\n            const model = tensorflow.sequential();\r\n            let numericColumns = this.settings.items.filter(m => m.type === FeatureCategories.Numerical.id).map(m => m.name);\r\n            let unitsLength = numericColumns.length;\r\n            let values = this.settings.df.loc({ columns: numericColumns }).values\r\n            const encoder = tensorflow.layers.dense({\r\n                units: +this.hiddenLayerSize,\r\n                batchInputShape: [null, unitsLength],\r\n                activation: this.encoderActivationFunction,\r\n                kernelInitializer: \"glorotNormal\",\r\n                biasInitializer: \"zeros\"\r\n            });\r\n            const decoder = tensorflow.layers.dense({ units: unitsLength, activation: this.decoderActivationFunction });\r\n            model.add(encoder);\r\n            model.add(decoder);\r\n            await model.compile({ optimizer: 'adam', loss: 'meanSquaredError' });\r\n            const xs = tensorflow.tensor2d(values);\r\n            // eslint-disable-next-line no-unused-vars\r\n            let h = await model.fit(xs, xs, { epochs: +this.iterations, batchSize: 64, shuffle: false, validationSplit: 0.1 });\r\n            xs.dispose();\r\n            const tidyWrapper = tensorflow.tidy(() => {\r\n                const predictor = tensorflow.sequential();\r\n                predictor.add(encoder);\r\n                let xs = tensorflow.tensor2d(values);\r\n                let ret = predictor.predict(xs);\r\n                xs.dispose();\r\n                return ret.arraySync();\r\n            });\r\n            // eslint-disable-next-line no-unused-vars\r\n            let data = await tidyWrapper;\r\n            chartController.drawAutoencoder(data, this.autoEncoderX - 1, this.autoEncoderY - 1,\r\n                this.df.loc({ columns: [this.settings.modelTarget] }).values\r\n                , this.settings.isClassification\r\n            )\r\n            this.loadingAutoEncoder = false;\r\n\r\n        }\r\n    },\r\n    errorCaptured() {\r\n\r\n    }\r\n}\r\n</script>\r\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./dmensionality-reduction-componenet.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./dmensionality-reduction-componenet.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./dmensionality-reduction-componenet.vue?vue&type=template&id=534bb160\"\nimport script from \"./dmensionality-reduction-componenet.vue?vue&type=script&lang=js\"\nexport * from \"./dmensionality-reduction-componenet.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[(this.settings.results?.length > 0)?_c('b-tabs',{on:{\"input\":_vm.resize},model:{value:(_vm.activeResult),callback:function ($$v) {_vm.activeResult=$$v},expression:\"activeResult\"}},[_c('b-tab-item',{attrs:{\"label\":\"Comparison\"},on:{\"click\":function($event){return _vm.compareResultsDraw()}}},[_vm._l((_vm.metricsCollection),function(item,index){return _c('button',{key:index,staticClass:\"button is-small ml-1 is-success my-2\",on:{\"click\":function($event){return _vm.compareResultsDraw(item)}}},[_vm._v(_vm._s(item.name + '-' + (item.task ? 'cls' : 'reg')))])}),_c('div',{staticClass:\"message is-info\"},[_c('div',{staticClass:\"message-header p-2\"},[_vm._v(\" Methods Comparison \")]),_c('div',{staticClass:\"message-body\"},[_c('div',{staticClass:\"columns is-multiline is-gapless\"},_vm._l((_vm.metrics),function(value,index){return _c('div',{key:index,staticClass:\"column is-4\"},[_c('div',{staticClass:\"column is-4\"},[_c('div',{attrs:{\"id\":index}})])])}),0)])]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.compare),expression:\"compare\"}],staticClass:\"column is-12\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":\"comaprison_plot\"}})],2),_vm._l((this.settings.results),function(result){return [_c('b-tab-item',{key:result.id,attrs:{\"label\":(result.id) + '.' + result.name.toString()}},[(result.modelTask)?_c('classification-view-component',{attrs:{\"result\":result},on:{\"delete-result\":_vm.deleteResult}}):_c('regression-view-component',{attrs:{\"result\":result},on:{\"delete-result\":_vm.deleteResult}}),_c('div',{staticClass:\"column is-12\"},[(!result.useHPC)?_c('div',{staticClass:\"table-container\"},[_c('table',{staticClass:\"table is-bordered is-hoverable is-narrow display is-size-7\",attrs:{\"id\":'predictions_table_' + result.id,\"width\":\"100%\"}})]):_vm._e()])],1)]})],2):_c('b-message',{attrs:{\"type\":\"is-danger\",\"has-icon\":\"\",\"icon-pack\":\"fas\"}},[_vm._v(\" No result to show. \")])],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('article',{staticClass:\"columns is-multiline\"},[_c('div',{staticClass:\"column is-12 mb-1\"},[_c('b-message',{staticClass:\"has-text-left\",attrs:{\"type\":\"is-info \",\"has-icon\":\"\",\"icon-pack\":\"fas\"}},[_c('p',{staticClass:\"my-1 is-size-7\"},[_c('span',[_vm._v(\"Dataset Name : \"+_vm._s(_vm.result.datasetName)+\" , \")]),_c('span',[_vm._v(\" Target variable : \"+_vm._s(_vm.result.target))])]),_c('p',{staticClass:\"subtitle is-6 my-1 is-size-7\"},[_vm._v(\"Features :\")]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-6 is-size-7\"},[_vm._v(\"Categorical Features : \"),_vm._l((_vm.result.categoricalFeatures),function(feature){return _c('span',{key:feature},[_vm._v(\" \"+_vm._s(feature + ', ')+\" \")])})],2),_c('p',{staticClass:\"ml-2 my-1 subtitle is-6 is-size-7\"},[_vm._v(\"Numerical Features : \"),_vm._l((_vm.result.numericColumns),function(feature){return _c('span',{key:feature},[_vm._v(\" \"+_vm._s(feature + ', ')+\" \")])})],2),_c('p',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.result.transformations?.length > 0),expression:\"result.transformations?.length > 0\"}],staticClass:\"ml-2 my-1 subtitle is-6 is-size-7\"},[_vm._v(\"Transformations : \"),_vm._l((_vm.result.transformations),function(transformation){return _c('span',{key:transformation.name},[_vm._v(\" \"+_vm._s(transformation.name + ': ' + transformation.scalerLabel + ',')+\" \")])})],2),_vm._l((_vm.result.options),function(value,key){return _c('p',{key:key,staticClass:\"is-size-7\"},[_vm._v(\" \"+_vm._s(key)+\": \"+_vm._s(value['value'])+\" \")])}),_c('p',{staticClass:\"subtitle my-1 is-size-7\"},[_vm._v(\"Goodness of Fit :\")]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"Accuracy : \"+_vm._s(_vm.result.metrics?.accuracy?.toFixed(2)))]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"f1 micro : \"+_vm._s(_vm.result.metrics?.f1_micro?.toFixed(2)))]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\" f1 macro :\"+_vm._s(_vm.result.metrics?.f1_macro?.toFixed(2)))]),_c('button',{staticClass:\"button is-danger has-text-white is-small\",staticStyle:{\"color\":\"#fff !important\"},on:{\"click\":function($event){return _vm.deleteTab()}}},[_vm._v(\"Delete \")]),_c('button',{staticClass:\"button is-success is-small\",on:{\"click\":function($event){return _vm.toggleHelp(_vm.result.helpSectionId)}}},[_vm._v(\"Method description \")]),_c('button',{staticClass:\"button is-info is-small\",on:{\"click\":function($event){return _vm.downloadPythonCode()}}},[_vm._v(\"Download the code\")])],2)],1),(!_vm.hide)?[_c('div',{staticClass:\"column is-12\"},[_c('article',{staticClass:\"message is-info\"},[_c('div',{staticClass:\"message-header p-2\"},[_vm._v(\" Confusion Matrix and PCA of predictions\")]),_c('div',{staticClass:\"message-body mx-1\"},[_c('div',{staticClass:\"columns is-multiline is-gapless\"},[_c('div',{staticClass:\"column is-6 my-1\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":'confusion_matrix_' + _vm.result.id}}),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.result.showProbas),expression:\"result.showProbas\"}],staticClass:\"column is-6 my-1\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":'proba_plot_' + _vm.result.id}}),_c('br'),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.result.showProbas),expression:\"result.showProbas\"}],staticClass:\"column is-6 my-1\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":'roc_plot_' + _vm.result.id}}),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.result.hasExplaination && _vm.result.if !== 1),expression:\"result.hasExplaination && result.if !== 1\"}],staticClass:\"column is-6 my-1\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":'pfi_boxplot_' + _vm.result.id}})])])])]),(_vm.result.name.includes('Logi.Reg'))?_c('div',{staticClass:\"column is-12\"},[_c('div',{staticClass:\"columns is-multiline\"},[_c('div',{staticClass:\"column is-7\"},[_c('div',{staticClass:\"table-container\"},[_c('table',{staticClass:\"table has-text-centered nowrap is-striped is-bordered is-narrow is-hoverable is-size-7\",attrs:{\"id\":'metrics_table_' + _vm.result.id}},[_vm._m(0),_vm._m(1)])])]),_c('div',{staticClass:\"column is-5\",attrs:{\"id\":'parameters_plot_' + _vm.result.id}}),_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"250px\"},attrs:{\"id\":'errors_' + _vm.result.id}}),_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"250px\"},attrs:{\"id\":'regularization_' + _vm.result.id}})])]):_vm._e(),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.result.hasExplaination && !_vm.result.name.includes('Logi.Reg')),expression:\"result.hasExplaination && !result.name.includes('Logi.Reg')\"}],staticClass:\"column is-12\"},[_c('article',{staticClass:\"message is-info\"},[_c('div',{staticClass:\"message-header p-2\"},[_vm._v(\" Partial Dependence Plot\")]),_c('div',{staticClass:\"message-body mx-1\"},[_c('div',{staticClass:\"columns is-multiline is-gapless\"},[(_vm.result.name.toString().toLowerCase().includes('knn'))?_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":'knn_table_' + _vm.result.id}}):_vm._e(),_c('div',{attrs:{\"id\":'pdp_containers_' + _vm.result.id}})]),_c('br')])])])]:[_vm._v(\" In progress... \")]],2)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('thead',[_c('tr',[_c('th',{attrs:{\"colspan\":\"1\"}}),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}},[_vm._v(\"OLS\")]),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}},[_vm._v(\"lambda min\")]),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}},[_vm._v(\"lambda 1se\")])]),_c('tr',[_c('th',{staticClass:\"has-text-centered\"},[_vm._v(\"name\")]),_c('th',[_vm._v(\"coef\")]),_c('th',[_vm._v(\"st.d.\")]),_c('th',[_c('i',[_vm._v(\"p\")]),_vm._v(\"-value\")]),_c('th',[_vm._v(\"coef\")]),_c('th',[_vm._v(\"st.d.\")]),_c('th',[_c('i',[_vm._v(\"p\")]),_vm._v(\"-value\")]),_c('th',[_vm._v(\"coef\")]),_c('th',[_vm._v(\"st.d.\")]),_c('th',[_c('i',[_vm._v(\"p\")]),_vm._v(\"-value\")])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('tfoot',{staticClass:\"has-text-centered\",staticStyle:{\"font-weight\":\"normal\"}},[_c('tr',[_c('th'),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}}),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}}),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}})])])\n}]\n\nexport { render, staticRenderFns }","<template>\r\n    <article class=\"columns is-multiline\">\r\n        <div class=\"column is-12 mb-1\">\r\n            <b-message type=\"is-info \" has-icon icon-pack=\"fas\" class=\"has-text-left\">\r\n                <p class=\"my-1 is-size-7\">\r\n                    <span>Dataset Name : {{ result.datasetName }} , </span>\r\n                    <span> Target variable : {{ result.target }}</span>\r\n                </p>\r\n\r\n                <p class=\"subtitle is-6 my-1 is-size-7\">Features :</p>\r\n                <p class=\"ml-2 my-1 subtitle is-6 is-size-7\">Categorical Features : <span\r\n                        v-for=\"feature in result.categoricalFeatures\" :key=\"feature\">\r\n                        {{ feature + ', ' }}\r\n                    </span>\r\n                </p>\r\n                <p class=\"ml-2 my-1 subtitle is-6 is-size-7\">Numerical Features : <span\r\n                        v-for=\"feature in result.numericColumns\" :key=\"feature\">\r\n                        {{ feature + ', ' }}\r\n                    </span></p>\r\n                <p class=\"ml-2 my-1 subtitle is-6 is-size-7\" v-show=\"result.transformations?.length > 0\">Transformations\r\n                    :\r\n                    <span v-for=\"transformation in result.transformations\" :key=\"transformation.name\">\r\n                        {{ transformation.name + ': ' + transformation.scalerLabel + ',' }}\r\n                    </span>\r\n                </p>\r\n                <p class=\"is-size-7\" v-for=\"(value, key) in result.options\" :key=\"key\">\r\n                    {{ key }}: {{ value['value'] }}\r\n                </p>\r\n                <p class=\"subtitle my-1 is-size-7\">Goodness of Fit :</p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7\">Accuracy : {{ result.metrics?.accuracy?.toFixed(2) }}</p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7\">f1 micro : {{ result.metrics?.f1_micro?.toFixed(2) }}</p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7\"> f1 macro :{{ result.metrics?.f1_macro?.toFixed(2) }}</p>\r\n                <button class=\"button is-danger has-text-white is-small\" style=\"color:#fff !important\"\r\n                    @click=\"deleteTab()\">Delete </button>\r\n                <button class=\"button is-success is-small\" @click=\"toggleHelp(result.helpSectionId)\">Method description\r\n                </button>\r\n                <button class=\"button is-info is-small\" @click=\"downloadPythonCode()\">Download the code</button>\r\n            </b-message>\r\n        </div>\r\n        <template v-if=\"!hide\">\r\n            <div class=\"column is-12\">\r\n                <article class=\"message is-info\">\r\n                    <div class=\"message-header p-2\"> Confusion Matrix and PCA of predictions</div>\r\n                    <div class=\"message-body mx-1\">\r\n                        <div class=\"columns is-multiline is-gapless\">\r\n                            <div class=\"column is-6 my-1\" style=\"height: 400px;\" :id=\"'confusion_matrix_' + result.id\">\r\n                            </div>\r\n                            <div v-show=\"result.showProbas\" class=\"column is-6 my-1\" style=\"height: 400px;\"\r\n                                :id=\"'proba_plot_' + result.id\">\r\n                            </div>\r\n                            <br>\r\n                            <div v-show=\"result.showProbas\" class=\"column is-6 my-1\" style=\"height: 400px;\"\r\n                                :id=\"'roc_plot_' + result.id\">\r\n                            </div>\r\n\r\n                            <div v-show=\"result.hasExplaination && result.if !== 1\" class=\"column is-6 my-1\"\r\n                                style=\"height: 400px;\" :id=\"'pfi_boxplot_' + result.id\">\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </article>\r\n            </div>\r\n            <div class=\"column is-12\" v-if=\"result.name.includes('Logi.Reg')\">\r\n                <div class=\"columns is-multiline\">\r\n                    <div class=\"column is-7\">\r\n                        <div class=\"table-container\">\r\n                            <table\r\n                                class=\"table has-text-centered nowrap is-striped is-bordered is-narrow is-hoverable is-size-7\"\r\n                                :id=\"'metrics_table_' + result.id\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th colspan=\"1\"></th>\r\n                                        <th colspan=\"3\" class=\"has-text-centered\">OLS</th>\r\n                                        <th colspan=\"3\" class=\"has-text-centered\">lambda min</th>\r\n                                        <th colspan=\"3\" class=\"has-text-centered\">lambda 1se</th>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th class=\"has-text-centered\">name</th>\r\n                                        <th>coef</th>\r\n                                        <th>st.d.</th>\r\n                                        <th><i>p</i>-value</th>\r\n                                        <th>coef</th>\r\n                                        <th>st.d.</th>\r\n                                        <th><i>p</i>-value</th>\r\n                                        <th>coef</th>\r\n                                        <th>st.d.</th>\r\n                                        <th><i>p</i>-value</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tfoot class=\"has-text-centered\" style=\" font-weight: normal\">\r\n                                    <tr>\r\n                                        <th></th>\r\n                                        <th colspan=\"3\" class=\"has-text-centered\"></th>\r\n                                        <th colspan=\"3\" class=\"has-text-centered\"></th>\r\n                                        <th colspan=\"3\" class=\"has-text-centered\"></th>\r\n\r\n                                    </tr>\r\n                                </tfoot>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"column is-5\" :id=\"'parameters_plot_' + result.id\">\r\n                    </div>\r\n                    <div class=\"column is-6\" :id=\"'errors_' + result.id\" style=\"height:250px\">\r\n                    </div>\r\n                    <div class=\"column is-6\" :id=\"'regularization_' + result.id\" style=\"height:250px\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"column is-12\" v-show=\"result.hasExplaination && !result.name.includes('Logi.Reg')\">\r\n                <article class=\"message is-info\">\r\n                    <div class=\"message-header p-2\"> Partial Dependence Plot</div>\r\n                    <div class=\"message-body mx-1\">\r\n                        <div class=\"columns is-multiline is-gapless\">\r\n                            <div class=\"column is-6\" style=\"height: 400px;\" :id=\"'knn_table_' + result.id\"\r\n                                v-if=\"result.name.toString().toLowerCase().includes('knn')\">\r\n                            </div>\r\n                            <div :id=\"'pdp_containers_' + result.id\"></div>\r\n                        </div>\r\n                        <br>\r\n                    </div>\r\n                </article>\r\n            </div>\r\n        </template>\r\n        <template v-else>\r\n            In progress...\r\n        </template>\r\n    </article>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { settingStore } from '@/stores/settings';\r\nimport { ModelFactory } from \"@/helpers/model_factory\";\r\nimport { concat } from 'danfojs/dist/danfojs-base';\r\n\r\nimport { $toCSV } from 'danfojs/dist/danfojs-base/io/browser/io.csv';\r\n\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n\r\n    setup() {\r\n        const settings = settingStore()\r\n        return { settings }\r\n    },\r\n    created() {\r\n        this.pdpFeature = this.settings.features[0].name\r\n    },\r\n    data() {\r\n        return {\r\n            pdpFeature: null,\r\n            hide: false,\r\n            fileName: null,\r\n            showResult: true,\r\n            intervalId: null,\r\n            jobProgressTries: 0,\r\n        }\r\n    },\r\n    name: 'ClassificationViewComponent',\r\n    methods: {\r\n        upload() {\r\n            let vm = this;\r\n            let formdata = new FormData();\r\n            let dataframe = concat({ dfList: [this.result.snapshot.x, this.result.snapshot.xt], axis: 0 })\r\n            let target = this.result.snapshot.y.concat(this.result.snapshot.yt)\r\n            dataframe.addColumn(this.result.target, target, { inplace: true })\r\n            let file = $toCSV(dataframe, { filePath: \"pca_data.csv\" });\r\n            const blob = new Blob([file], { type: \"text/csv\" });\r\n            formdata.append('file', blob, 'main.csv');\r\n\r\n            return axios.post('http://127.0.0.1:5000/upload', formdata, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            }\r\n            ).then(function (res) {\r\n                vm.fileName = res.data\r\n                console.log('SUCCESS!!', vm.fileName);\r\n                axios.get(`http://127.0.0.1:5000/run?file_name=${vm.fileName}&job_id=${vm.result.useHPC}&target=${vm.result.target}&seed=${vm.result.seed}`).then(() => {\r\n                    vm.intervalId = setInterval(() => {\r\n                        axios.get(`http://127.0.0.1:5000/progress?job_id=${vm.result.useHPC}`)\r\n                            .then((res) => {\r\n                                vm.jobProgressTries += 1;\r\n                                if (res.data != 'ongoing') {\r\n                                    vm.hide = false;\r\n                                    vm.result.model.predictions = res.data.predictions;\r\n                                    vm.result.model.pdp_averages = res.data.pdp_avgs;\r\n                                    vm.result.model.pdp_grid = res.data.pdp_grid;\r\n                                    vm.result.model.importances = res.data.pfi;\r\n                                    vm.result.model.fpr = res.data.fprs;\r\n                                    vm.result.model.tpr = res.data.tprs;\r\n                                    vm.result.model.auc = res.data.auc;\r\n                                    vm.result.model.probas = res.data.probas;\r\n                                    vm.result.model.visualize(vm.result.snapshot.xt, vm.result.snapshot.yt, vm.result.snapshot.labels,\r\n                                        res.data.predictions, vm.result.encoder, vm.result.snapshot.x.columns, vm.result.snapshot.categoricals)\r\n                                    clearInterval(vm.intervalId);\r\n                                } else if (vm.jobProgressTries > 100) {\r\n                                    clearInterval(vm.intervalId);\r\n                                }\r\n                            });\r\n                    }, 3 * 1000)\r\n                }).catch(function (err) {\r\n                    console.log('FAILURE!!', err.data);\r\n                });\r\n            }).catch(function () {\r\n                console.log('FAILURE!!');\r\n            });\r\n        },\r\n        toggleHelp(id) {\r\n            this.settings.setActiveTab(3);\r\n            setTimeout(() => {\r\n                let el = document.getElementById(id);\r\n                el.scrollIntoView({ behavior: 'smooth' })\r\n            }, 500);\r\n        },\r\n        deleteTab() {\r\n            this.$emit(\"delete-result\", this.result.id)\r\n        },\r\n        downloadPythonCode() {\r\n            let model_factory = new ModelFactory();\r\n            let model = model_factory.createModel(this.result.snapshot.id, this.result.options);\r\n            let pyCode = model.generatePythonCode()\r\n            const blob = new Blob([pyCode], { type: 'text/plain' });\r\n            const url = URL.createObjectURL(blob);\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            link.download = 'example.py';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n            URL.revokeObjectURL(url);\r\n        },\r\n        async updatePartialDependencePlot() {\r\n            let model_factory = new ModelFactory();\r\n            let model = model_factory.createModel(this.result.snapshot.id, this.result.options);\r\n            await model.train(this.result.snapshot.x, this.result.snapshot.y,\r\n                this.result.snapshot.xt, this.result.snapshot.yt, this.result.snapshot.xFeatures, this.result.snapshot.categoricals, this.result.snapshot.xFeatures.findIndex(feature => feature == this.pdpFeature));\r\n            model.chartController.plotPDP(this.result.id, model.pdp_averages, model.pdp_grid, this.result.snapshot.labels, this.pdpFeature);\r\n\r\n        }\r\n    },\r\n    props: {\r\n        result: {}\r\n    },\r\n    watch: {\r\n        result: {\r\n            handler() {\r\n                if (this.result.useHPC) {\r\n                    this.hide = true;\r\n                    this.upload()\r\n                }\r\n            },\r\n            immediate: true,\r\n        }\r\n    },\r\n    errorCaptured(err, vm, info) {\r\n        console.log(`cat EC: ${err.toString()}\\ninfo: ${info}`);\r\n        return false;\r\n    },\r\n    unmounted() {\r\n        clearInterval(this.intervalId)\r\n    }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped></style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./classification-view-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./classification-view-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./classification-view-component.vue?vue&type=template&id=623b210b&scoped=true\"\nimport script from \"./classification-view-component.vue?vue&type=script&lang=js\"\nexport * from \"./classification-view-component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"623b210b\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"columns is-multiline\"},[_c('div',{staticClass:\"column is-12\"},[_c('b-message',{staticClass:\"has-text-left\",attrs:{\"type\":\"is-info is-size-7\\t\",\"has-icon\":\"\",\"icon-pack\":\"fas\"}},[_c('p',{staticClass:\"my-1\"},[_c('span',[_vm._v(\"Dataset Name : \"+_vm._s(_vm.result.datasetName)+\" , \")]),_c('span',[_vm._v(\" Target variable : \"+_vm._s(_vm.result.target))])]),_c('p',{staticClass:\"subtitle is-size-7 my-1\"},[_vm._v(\"Features :\")]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"Categorical Features : \"),_vm._l((_vm.result.categoricalFeatures),function(feature){return _c('span',{key:feature},[_vm._v(\" \"+_vm._s(feature + ', ')+\" \")])})],2),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"Numerical Features : \"),_vm._l((_vm.result.numericColumns),function(feature){return _c('span',{key:feature},[_vm._v(\" \"+_vm._s(feature + ', ')+\" \")])})],2),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"Transformations : \"),_vm._l((_vm.result.transformations),function(transformation){return _c('span',{key:transformation.name},[_vm._v(\" \"+_vm._s(transformation.name + ': ' + transformation.scaler + ',')+\" \")])})],2),_vm._l((_vm.result.options),function(value,key){return _c('p',{key:key},[_vm._v(\" \"+_vm._s(key)+\": \"+_vm._s(value['value'])+\" \")])}),_c('p',{staticClass:\"subtitle is-size-7 my-1\"},[_vm._v(\"Goodness of Fit :\")]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"MSE : \"+_vm._s(_vm.result.metrics.mse.toFixed(2)))]),_c('p',{staticClass:\"ml-2 my-1 subtitle is-size-7\"},[_vm._v(\"R2 : \"+_vm._s(_vm.result.metrics.rsquared.toFixed(2)))]),_c('button',{staticClass:\"button is-danger has-text-white is-small\",on:{\"click\":function($event){return _vm.deleteTab()}}},[_vm._v(\"Delete \")]),_c('button',{staticClass:\"button is-success is-small\",on:{\"click\":function($event){return _vm.toggleHelp(_vm.result.helpSectionId)}}},[_vm._v(\"Help\")])],2)],1),(_vm.result.name.includes('Lin.Reg') || _vm.result.name.includes('Poly.Reg'))?_c('div',{staticClass:\"column is-12\"},[_c('div',{staticClass:\"columns is-multiline is-gapless\"},[_c('div',{staticClass:\"column is-7\"},[_c('div',{staticClass:\"table-container\"},[_c('table',{staticClass:\"table has-text-centered nowrap is-striped is-bordered is-narrow is-hoverable is-size-7\",attrs:{\"id\":'metrics_table_' + _vm.result.id}},[_vm._m(0),_vm._m(1)])])]),_c('div',{staticClass:\"column is-5\",attrs:{\"id\":'parameters_plot_' + _vm.result.id,\"width\":\"100%\"}}),_c('div',{staticClass:\"column is-12 mb-2\"},[_c('div',{staticClass:\"message is-info\"},[_c('div',{staticClass:\"message-header p-2\"},[_vm._v(\" Regularization Plots \")]),_c('div',{staticClass:\"message-body\"},[_c('div',{staticClass:\"columns is-multiline is-gapless\"},[_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"250px\"},attrs:{\"id\":'errors_' + _vm.result.id,\"width\":\"100%\"}}),_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"250px\"},attrs:{\"id\":'regularization_' + _vm.result.id,\"width\":\"100%\"}})])])])]),_c('div',{staticClass:\"message is-info\"},[_c('div',{staticClass:\"message-header p-2\"},[_vm._v(\" Residuals Plots \")]),_c('div',{staticClass:\"message-body\"},[_c('div',{staticClass:\"columns is-multiline is-gapless\"},[_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'regression_y_yhat_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'regression_y_yhat_min_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'regression_y_yhat_1se_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'regression_residual_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'regression_residual_min_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'regression_residual_1se_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'qqplot_ols_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'qqplot_min_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-4\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'qqplot_1se_' + _vm.result.id,\"width\":\"100%\"}})])])])])])]):_c('div',{staticClass:\"column is-12\"},[_c('div',{staticClass:\"columns is-multiline is-gapless\"},[_c('div',{staticClass:\"column is-12\"},[_c('article',{staticClass:\"message is-info\"},[_c('div',{staticClass:\"message-header p-2\"},[_vm._v(\" Predictions and Residuals Plot \")]),_c('div',{staticClass:\"message-body\"},[_c('div',{staticClass:\"columns is-multiline is-gapless\"},[_c('div',{staticClass:\"column is-6\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'regression_y_yhat_' + _vm.result.id,\"width\":\"100%\"}})]),_c('div',{staticClass:\"column is-6\"},[_c('div',{staticStyle:{\"height\":\"300px\"},attrs:{\"id\":'errors_' + _vm.result.id,\"width\":\"100%\"}})]),(_vm.result.name.toString().toLowerCase().includes('knn'))?_c('div',{staticClass:\"column is-6\",staticStyle:{\"height\":\"350px\"},attrs:{\"id\":'knn_table_' + _vm.result.id}}):_vm._e()])])])]),_c('div',{staticClass:\"column is-12\"},[_c('article',{staticClass:\"message is-info\"},[_c('div',{staticClass:\"message-header p-2\"},[_vm._v(\" Partial Dependence Plot and Permutation Feature Importance \")]),_c('div',{staticClass:\"message-body\"},[_c('div',{staticClass:\"columns is-multiline is-gapless\"},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.result.hasExplaination),expression:\"result.hasExplaination\"}],staticClass:\"column is-6\",staticStyle:{\"height\":\"400px\"},attrs:{\"id\":'pfi_boxplot_' + _vm.result.id}})])])])])])])])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('thead',[_c('tr',[_c('th',{attrs:{\"colspan\":\"1\"}}),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}},[_vm._v(\"OLS\")]),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}},[_vm._v(\"lasso min\")]),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}},[_vm._v(\"lasso 1se\")])]),_c('tr',[_c('th',{staticClass:\"has-text-centered\"},[_vm._v(\"names\")]),_c('th',[_vm._v(\"coef\")]),_c('th',[_vm._v(\"st.d.\")]),_c('th',[_c('i',[_vm._v(\"p\")]),_vm._v(\"-value\")]),_c('th',[_vm._v(\"coef\")]),_c('th',[_vm._v(\"st.d.\")]),_c('th',[_c('i',[_vm._v(\"p\")]),_vm._v(\"-value\")]),_c('th',[_vm._v(\"coef\")]),_c('th',[_vm._v(\"st.d.\")]),_c('th',[_c('i',[_vm._v(\"p\")]),_vm._v(\"-value\")])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('tfoot',{staticStyle:{\"font-weight\":\"normal\"}},[_c('tr',[_c('th'),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}}),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}}),_c('th',{staticClass:\"has-text-centered\",attrs:{\"colspan\":\"3\"}})])])\n}]\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"columns is-multiline\">\r\n        <div class=\"column is-12\">\r\n            <b-message type=\"is-info is-size-7\t\" has-icon icon-pack=\"fas\" class=\"has-text-left\">\r\n                <p class=\"my-1\">\r\n                    <span>Dataset Name : {{ result.datasetName }} , </span>\r\n                    <span> Target variable : {{ result.target }}</span>\r\n                </p>\r\n\r\n                <p class=\"subtitle is-size-7 my-1\">Features :</p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7 \">Categorical Features : <span\r\n                        v-for=\"feature in result.categoricalFeatures\" :key=\"feature\">\r\n                        {{ feature + ', ' }}\r\n                    </span>\r\n                </p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7 \">Numerical Features : <span\r\n                        v-for=\"feature in result.numericColumns\" :key=\"feature\">\r\n                        {{ feature + ', ' }}\r\n                    </span></p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7 \">Transformations :\r\n                    <span v-for=\"transformation in result.transformations\" :key=\"transformation.name\">\r\n                        {{ transformation.name + ': ' + transformation.scaler + ',' }}\r\n                    </span>\r\n                </p>\r\n                <p v-for=\"(value, key) in result.options\" :key=\"key\">\r\n                    {{ key }}: {{ value['value'] }}\r\n                </p>\r\n                <p class=\"subtitle is-size-7 my-1\">Goodness of Fit :</p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7 \">MSE : {{ result.metrics.mse.toFixed(2) }}</p>\r\n                <p class=\"ml-2 my-1 subtitle is-size-7 \">R2 : {{ result.metrics.rsquared.toFixed(2) }}</p>\r\n                <button class=\"button is-danger has-text-white is-small\" @click=\"deleteTab()\">Delete </button>\r\n                <button class=\"button is-success is-small\" @click=\"toggleHelp(result.helpSectionId)\">Help</button>\r\n\r\n            </b-message>\r\n        </div>\r\n        <div class=\"column is-12\" v-if=\"result.name.includes('Lin.Reg') || result.name.includes('Poly.Reg')\">\r\n            <div class=\"columns is-multiline is-gapless\">\r\n\r\n                <div class=\"column is-7\">\r\n                    <div class=\"table-container\">\r\n                        <table\r\n                            class=\"table has-text-centered nowrap is-striped is-bordered is-narrow is-hoverable is-size-7\"\r\n                            :id=\"'metrics_table_' + result.id\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th colspan=\"1\"></th>\r\n                                    <th colspan=\"3\" class=\"has-text-centered\">OLS</th>\r\n                                    <th colspan=\"3\" class=\"has-text-centered\">lasso min</th>\r\n                                    <th colspan=\"3\" class=\"has-text-centered\">lasso 1se</th>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th class=\"has-text-centered\">names</th>\r\n                                    <th>coef</th>\r\n                                    <th>st.d.</th>\r\n                                    <th><i>p</i>-value</th>\r\n                                    <th>coef</th>\r\n                                    <th>st.d.</th>\r\n                                    <th><i>p</i>-value</th>\r\n                                    <th>coef</th>\r\n                                    <th>st.d.</th>\r\n                                    <th><i>p</i>-value</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tfoot style=\" font-weight: normal\">\r\n                                <tr>\r\n                                    <th></th>\r\n                                    <th colspan=\"3\" class=\"has-text-centered\"></th>\r\n                                    <th colspan=\"3\" class=\"has-text-centered\"></th>\r\n                                    <th colspan=\"3\" class=\"has-text-centered\"></th>\r\n\r\n                                </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                <div class=\"column is-5\" :id=\"'parameters_plot_' + result.id\" width=\"100%\">\r\n                </div>\r\n                <div class=\"column is-12 mb-2\">\r\n                    <div class=\"message is-info\">\r\n                        <div class=\"message-header p-2\">\r\n                            Regularization Plots\r\n                        </div>\r\n                        <div class=\"message-body\">\r\n                            <div class=\"columns is-multiline is-gapless\">\r\n                                <div class=\"column is-6\" :id=\"'errors_' + result.id\" width=\"100%\" style=\"height:250px\">\r\n                                </div>\r\n                                <div class=\"column is-6\" :id=\"'regularization_' + result.id\" width=\"100%\"\r\n                                    style=\"height:250px\">\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"message is-info\">\r\n                    <div class=\"message-header p-2\">\r\n                        Residuals Plots\r\n                    </div>\r\n                    <div class=\"message-body\">\r\n                        <div class=\"columns is-multiline is-gapless\">\r\n\r\n                            <div class=\"column is-4\">\r\n                                <div :id=\"'regression_y_yhat_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"column is-4\">\r\n                                <div :id=\"'regression_y_yhat_min_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"column is-4\">\r\n                                <div :id=\"'regression_y_yhat_1se_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"column is-4\">\r\n                                <div :id=\"'regression_residual_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"column is-4\">\r\n                                <div :id=\"'regression_residual_min_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"column is-4\">\r\n                                <div :id=\"'regression_residual_1se_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"column is-4\">\r\n                                <div :id=\"'qqplot_ols_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"column is-4\">\r\n                                <div :id=\"'qqplot_min_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"column is-4\">\r\n                                <div :id=\"'qqplot_1se_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"column is-12\" v-else>\r\n            <div class=\"columns is-multiline is-gapless\">\r\n                <div class=\"column is-12\">\r\n                    <article class=\"message is-info\">\r\n                        <div class=\"message-header p-2\"> Predictions and Residuals Plot\r\n                        </div>\r\n                        <div class=\"message-body\">\r\n                            <div class=\"columns is-multiline is-gapless\">\r\n\r\n                                <div class=\"column is-6\">\r\n                                    <div :id=\"'regression_y_yhat_' + result.id\" width=\"100%\" style=\"height:300px\">\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"column is-6\">\r\n                                    <div :id=\"'errors_' + result.id\" width=\"100%\" style=\"height:300px\"></div>\r\n                                </div>\r\n                                <div class=\"column is-6\" style=\"height: 350px;\" :id=\"'knn_table_' + result.id\"\r\n                                    v-if=\"result.name.toString().toLowerCase().includes('knn')\">\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </article>\r\n                </div>\r\n                <div class=\"column is-12\">\r\n                    <article class=\"message is-info\">\r\n                        <div class=\"message-header p-2\"> Partial Dependence Plot and Permutation Feature Importance\r\n                        </div>\r\n                        <div class=\"message-body\">\r\n                            <div class=\"columns is-multiline is-gapless\">\r\n                                <div class=\"column is-6\" style=\"height: 400px;\" v-show=\"result.hasExplaination\"\r\n                                    :id=\"'pfi_boxplot_' + result.id\">\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </article>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { settingStore } from '@/stores/settings'\r\nimport { ModelFactory } from \"@/helpers/model_factory\";\r\n\r\nexport default {\r\n\r\n    setup() {\r\n        const settings = settingStore()\r\n        return { settings }\r\n    },\r\n    name: 'regression-view-component',\r\n    methods: {\r\n        toggleHelp(id) {\r\n            this.settings.setActiveTab(3);\r\n            setTimeout(() => {\r\n                let el = document.getElementById(id);\r\n                el.scrollIntoView({ behavior: 'smooth' })\r\n            }, 500);\r\n        },\r\n        deleteTab() {\r\n            this.$emit(\"delete-result\", this.result.id)\r\n        },\r\n        async updatePartialDependencePlot() {\r\n            let model_factory = new ModelFactory();\r\n            let model = model_factory.createModel(this.result.snapshot.id, this.result.options);\r\n            await model.train(this.result.snapshot.x, this.result.snapshot.y,\r\n                this.result.snapshot.xt, this.result.snapshot.yt, this.result.snapshot.xFeatures, this.result.snapshot.categoricals,\r\n                [0, 1, 2]);\r\n            model.chartController.plotPDPRegression(this.result.id, model.pdp_averages, model.pdp_grid, this.result.snapshot.labels, this.result.snapshot.xFeatures, this.result.snapshot.categoricals);\r\n\r\n        },\r\n    },\r\n    created() {\r\n        this.pdpFeature = this.settings.features.filter(feature => feature.name != this.settings.target)[0].name;\r\n\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            pdpFeature: null,\r\n            showResult: true\r\n        }\r\n    },\r\n    props: {\r\n        result: {}\r\n    },\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped></style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./regression-view-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./regression-view-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./regression-view-component.vue?vue&type=template&id=2946f9e4&scoped=true\"\nimport script from \"./regression-view-component.vue?vue&type=script&lang=js\"\nexport * from \"./regression-view-component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"2946f9e4\",\n  null\n  \n)\n\nexport default component.exports","<template>\r\n    <div>\r\n\r\n        <b-tabs v-model=\"activeResult\" v-if=\"this.settings.results?.length > 0\" @input=\"resize\">\r\n            <b-tab-item label=\"Comparison\" @click=\"compareResultsDraw()\">\r\n                <button v-for=\"(item, index) in metricsCollection\" :key=\"index\"\r\n                    class=\"button is-small ml-1 is-success my-2\" @click=\"compareResultsDraw(item)\">{{\r\n                        item.name + '-' + (item.task ? 'cls' : 'reg') }}</button>\r\n                <div class=\"message is-info \">\r\n                    <div class=\"message-header p-2\">\r\n                        Methods Comparison\r\n                    </div>\r\n                    <div class=\"message-body\">\r\n                        <div class=\"columns is-multiline is-gapless\">\r\n                            <div v-for=\"(value, index) in metrics\" :key=\"index\" class=\"column is-4\">\r\n                                <div class=\"column is-4\">\r\n                                    <div :id=\"index\"></div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div v-show=\"compare\" class=\"column is-12\" id=\"comaprison_plot\" style=\"height:400px;\"></div>\r\n            </b-tab-item>\r\n            <template v-for=\"result in this.settings.results\">\r\n                <b-tab-item :label=\"(result.id) + '.' + result.name.toString()\" :key=\"result.id\">\r\n                    <classification-view-component @delete-result=\"deleteResult\" :result=\"result\"\r\n                        v-if=\"result.modelTask\"></classification-view-component>\r\n                    <regression-view-component @delete-result=\"deleteResult\" :result=\"result\" v-else>\r\n                    </regression-view-component>\r\n                    <div class=\"column is-12\">\r\n                        <div class=\"table-container\" v-if=\"!result.useHPC\">\r\n                            <table :id=\"'predictions_table_' + result.id\"\r\n                                class=\"table is-bordered is-hoverable is-narrow display is-size-7\" width=\"100%\">\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </b-tab-item>\r\n            </template>\r\n        </b-tabs>\r\n        <b-message type=\"is-danger\" has-icon icon-pack=\"fas\" v-else>\r\n            No result to show.\r\n        </b-message>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { settingStore } from '@/stores/settings'\r\nimport ClassificationViewComponent from './classification-view-component.vue'\r\nimport RegressionViewComponent from './regression-view-component.vue'\r\nimport { computed } from \"vue\";\r\n\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\nimport UI from '@/helpers/ui';\r\nimport ChartController from '@/helpers/charts';\r\n\r\nlet chartController = new ChartController(null, null)\r\n\r\nlet ui = new UI(null, null)\r\n\r\n\r\nexport default {\r\n    components: {\r\n        'classification-view-component': ClassificationViewComponent,\r\n        'regression-view-component': RegressionViewComponent,\r\n\r\n    },\r\n    setup() {\r\n        const settings = settingStore()\r\n        const activeResult = computed({\r\n            get: () => settings.getResultTab,\r\n            set: (value) => settings.setResultActiveTab(value), // Mutate the state properly\r\n        });\r\n        return { settings, activeResult }\r\n    },\r\n\r\n    name: 'ResultsComponent',\r\n    props: {\r\n    },\r\n    data() {\r\n        return {\r\n            metricsCollection: [],\r\n            compare: false,\r\n            datasetName: '',\r\n            isClassication: -1,\r\n            comparisonMetric: '',\r\n            baseMetrics: [],\r\n            activeTab: null,\r\n            visitedTabs: [],\r\n            metrics: {},\r\n            xTicks: {},\r\n        }\r\n    },\r\n    methods: {\r\n        fillMetrics() {\r\n            if (this.isClassication == 1) {\r\n                this.baseMetrics = [{ name: 'accuracy', id: 1 }, { name: 'f1 micro', id: 2 }, { 'name': 'f1 macro', id: 3 }]\r\n            } else if (this.isClassication == 0) {\r\n                this.baseMetrics = [{ name: 'R2', id: 1 }, { name: 'MSE', id: 0 }]\r\n            }\r\n\r\n        },\r\n        compareResults(dataset) {\r\n            let datasetName = this.settings.datasetName\r\n            let task = this.settings.classificationTask;\r\n            try {\r\n                Plotly.purge('comaprison_plot');\r\n            } catch (error) {\r\n                console.log('no plot to remove');\r\n            }\r\n            if (dataset) {\r\n                datasetName = dataset.name\r\n                task = dataset.task\r\n            }\r\n            let methodResults = this.settings.getMethodResults.filter(m => m.datasetName == datasetName && task == m.modelTask)\r\n            this.compare = true;\r\n            let x = [];\r\n            let y = {};\r\n            methodResults.forEach((result, i) => {\r\n                let metrics = result.metrics;\r\n                if (i === 0) {\r\n                    x.push('Theoretical best');\r\n                }\r\n                x.push(result.id + '.' + result.name)\r\n                for (const key in result.metrics) {\r\n                    if (key != 'precision' && key != 'recall') {\r\n                        const metric = metrics[key];\r\n                        if (key in y) {\r\n                            y[key].push(metric);\r\n                        } else {\r\n                            y[key] = [];\r\n                            y[key].push(1);\r\n                            y[key].push(metric);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            this.metrics = y;\r\n            this.xTicks = x;\r\n        },\r\n        draw() {\r\n            for (const k in this.metrics) {\r\n                chartController.comparison(this.xTicks, this.metrics[k], k, k)\r\n            }\r\n        },\r\n        compareResultsDraw(dataset) {\r\n            let results = [];\r\n            this.compareResults(dataset);\r\n            for (let i = 0; i < this.settings.getMethodResults.length; i++) {\r\n                const res = this.settings.getMethodResults[i];\r\n                let index = results.findIndex(m => m.task === res.modelTask && m.name === res.datasetName)\r\n                if (index == -1) {\r\n                    results.push({ name: res.datasetName, task: res.modelTask })\r\n                }\r\n\r\n            }\r\n            //  results = [...new Set(this.settings.getMethodResults.map(m => m.datasetName))];\r\n\r\n            this.metricsCollection = results;\r\n\r\n            setTimeout(() => {\r\n                this.draw()\r\n            }, 500);\r\n        },\r\n        resize(v) {\r\n            if (v === 0) {\r\n                this.compareResultsDraw()\r\n            }\r\n\r\n            window.dispatchEvent(new Event('resize'));\r\n        },\r\n        deleteResult(id) {\r\n            // eslint-disable-next-line no-unused-vars\r\n            let [tables, plots] = this.settings.getResultVisualizations(id);\r\n            tables.forEach(table => {\r\n                ui.removeTable(table)\r\n            });\r\n            plots.forEach(plot => {\r\n                Plotly.purge(plot);\r\n            });\r\n            this.settings.removeResult(id);\r\n\r\n        },\r\n        showMethodDetails(id) {\r\n            alert(id)\r\n\r\n        },\r\n    },\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped></style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./results-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./results-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./results-component.vue?vue&type=template&id=0517c548&scoped=true\"\nimport script from \"./results-component.vue?vue&type=script&lang=js\"\nexport * from \"./results-component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"0517c548\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('section',{staticStyle:{\"overflow-y\":\"auto\",\"overflow-x\":\"auto\"}},[_c('article',{staticClass:\"message is-info\"},[_c('div',{staticClass:\"message-header p-2\"},[_vm._v(\"Scatterplot Matrix \"),_c('b-tooltip',{attrs:{\"append-to-body\":\"\",\"label\":\"nrd method and guassian kernel is used for kernel density estimation.\",\"multilined\":\"\"}},[_c('b-button',{attrs:{\"icon-left\":\"info\",\"icon-pack\":\"fas\",\"size\":\"is-small\",\"type\":\"is-dark\"}})],1)],1),_c('div',{staticClass:\"message-body\"},[_c('div',{attrs:{\"id\":\"scatterplot_mtx\"}}),_c('button',{staticClass:\"button is-small\",on:{\"click\":function($event){return _vm.downlaodSPLOM()}}},[_vm._v(\"Download plot\")]),_c('div',{staticClass:\"columns my-1 ml-5 mt-5 is-multiline\",style:({ width: _vm.features.length * 100 + 'px' })},[_vm._l((this.settings.items.filter(column => column.selected)),function(feature){return _c('div',{key:feature.id,style:({ width: _vm.column_width + '%' })},[(feature.type == 1)?_c('b-field',{staticClass:\"ml-1\",attrs:{\"label\":feature.name,\"label-position\":'on-border'}},[_c('b-select',{attrs:{\"size\":\"is-small\"},on:{\"input\":function($event){return _vm.scaleData()}},model:{value:(feature.scaler),callback:function ($$v) {_vm.$set(feature, \"scaler\", $$v)},expression:\"feature.scaler\"}},_vm._l((_vm.ScaleOptions),function(option){return _c('option',{key:option.id,domProps:{\"value\":option.id}},[_vm._v(\" \"+_vm._s(option.name)+\" \")])}),0)],1):_c('p',{staticClass:\"title is-size-7 mt-1\"},[_vm._v(_vm._s(feature.name))])],1)}),_c('br')],2),_c('div',{staticClass:\"column is-12\"},[_c('parallel-coordinate-plot-component',{ref:\"coordinate_plot\"})],1),(this.settings.isClassification)?_c('div',{staticClass:\"column is-12\"},[_c('h5',{staticClass:\"title is-7 has-text-left\"},[_vm._v(\"Merge classes \")]),_c('b-table',{staticClass:\"is-size-7\",attrs:{\"data\":_vm.classesInfo,\"columns\":_vm.classesInfoColumns,\"checkable\":\"\",\"row-class\":(row, index) => row.mode <= 0.10 && 'has-text-danger',\"narrowed\":true,\"checked-rows\":_vm.selectedClasses},on:{\"update:checkedRows\":function($event){_vm.selectedClasses=$event},\"update:checked-rows\":function($event){_vm.selectedClasses=$event}}}),_c('button',{staticClass:\"button mt-2 is-info is-small\",attrs:{\"disabled\":_vm.selectedClasses?.length >= _vm.classesInfo?.length},on:{\"click\":function($event){return _vm.scaleData()}}},[_vm._v(\"Merge Classes\")]),_c('button',{staticClass:\"button mt-2 mx-1 is-success is-small\",on:{\"click\":function($event){return _vm.scaleData(true)}}},[_vm._v(\"reset\")])],1):_vm._e(),_c('b-loading',{attrs:{\"is-full-page\":false},model:{value:(_vm.isLoading),callback:function ($$v) {_vm.isLoading=$$v},expression:\"isLoading\"}})],1)])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _vm._m(0)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('section',{staticClass:\"my-1\"},[_c('article',{staticClass:\"message\"},[_c('div',{staticClass:\"message-header p-2\"},[_vm._v(\"Parallel Coordinate Plot\")]),_c('div',{staticClass:\"message-body\"},[_c('div',{attrs:{\"id\":\"parallel_coordinate_plot\"}})])])])\n}]\n\nexport { render, staticRenderFns }","<template>\r\n    <section class=\"my-1\">\r\n        <article class=\"message\">\r\n            <div class=\"message-header p-2\">Parallel Coordinate Plot</div>\r\n            <div class=\"message-body\">\r\n                <div id=\"parallel_coordinate_plot\"></div>\r\n            </div>\r\n        </article>\r\n    </section>\r\n</template>\r\n\r\n<script>\r\nimport { settingStore } from '@/stores/settings'\r\nimport { ScaleOptions } from '@/helpers/settings'\r\nimport ChartController from '@/helpers/charts';\r\nlet chartController = new ChartController();\r\nimport { DataFrame } from 'danfojs/dist/danfojs-base';\r\nimport { applyDataTransformation } from '@/helpers/utils';\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\n\r\nexport default {\r\n    setup() {\r\n        const settings = settingStore()\r\n        return { settings }\r\n    },\r\n    name: 'ParallelCoordinatePlotComponent',\r\n    props: {\r\n        msg: String,\r\n        update: {}\r\n    },\r\n    data() {\r\n        return {\r\n            isLoading: false,\r\n            ScaleOptions: ScaleOptions,\r\n            features: [],\r\n            df: null,\r\n            rawData: null,\r\n        }\r\n    },\r\n    methods: {\r\n        ParallelCoordinatePlot() {\r\n            this.isLoading = true;\r\n            const df = new DataFrame(this.settings.rawData);\r\n            if (this.settings.isClassification && this.settings.classTransformations.length > 0) {\r\n                this.settings.mergedClasses.forEach((classes) => {\r\n                    let newClass = classes.map(m => m.class).join('_');\r\n                    classes.forEach(cls => {\r\n                        df.replace(cls.class, newClass, { columns: [this.settings.modelTarget], inplace: true })\r\n                    });\r\n                })\r\n            }\r\n\r\n            let validTransformations = this.settings.items.filter(column => column.selected && column.type === 1)\r\n            Plotly.purge('parallel_coordinate_plot')\r\n            applyDataTransformation(df, validTransformations.map(transformation => transformation.name), validTransformations);\r\n            let numericColumns = this.settings.items.filter(column => column.selected && column.type === 1).map(column => column.name);\r\n            chartController.parallelCoordinatePlot(df.loc({ columns: numericColumns }).values,\r\n                df.column(this.settings.modelTarget).values, numericColumns, this.settings.isClassification)\r\n            this.isLoading = false;\r\n\r\n        }\r\n\r\n    },\r\n\r\n\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped></style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./parallel-coordinate-plot-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./parallel-coordinate-plot-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./parallel-coordinate-plot-component.vue?vue&type=template&id=6a472437&scoped=true\"\nimport script from \"./parallel-coordinate-plot-component.vue?vue&type=script&lang=js\"\nexport * from \"./parallel-coordinate-plot-component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"6a472437\",\n  null\n  \n)\n\nexport default component.exports","<template>\r\n    <section style=\"overflow-y: auto;overflow-x: auto;\">\r\n        <article class=\"message is-info\">\r\n            <div class=\"message-header p-2\">Scatterplot Matrix <b-tooltip append-to-body\r\n                    label=\"nrd method and guassian kernel is used for kernel density estimation.\" multilined>\r\n                    <b-button icon-left=\"info\" icon-pack=\"fas\" size=\"is-small\" type=\"is-dark\" />\r\n                </b-tooltip></div>\r\n            <div class=\"message-body\">\r\n                <div id=\"scatterplot_mtx\"></div>\r\n                <button class=\"button is-small\" @click=\"downlaodSPLOM()\">Download plot</button>\r\n                <div class=\"columns my-1 ml-5 mt-5 is-multiline\" :style=\"{ width: features.length * 100 + 'px' }\">\r\n                    <div :style=\"{ width: column_width + '%' }\"\r\n                        v-for=\"feature in this.settings.items.filter(column => column.selected)\" :key=\"feature.id\">\r\n                        <b-field :label=\"feature.name\" :label-position=\"'on-border'\" v-if=\"feature.type == 1\"\r\n                            class=\"ml-1\">\r\n                            <b-select @input=\"scaleData()\" size=\"is-small\" v-model=\"feature.scaler\">\r\n                                <option v-for=\"option in ScaleOptions\" :value=\"option.id\" :key=\"option.id\">\r\n                                    {{ option.name }}\r\n                                </option>\r\n                            </b-select>\r\n                        </b-field>\r\n                        <p class=\"title is-size-7 mt-1\" v-else>{{ feature.name }}</p>\r\n                    </div>\r\n                    <br>\r\n                </div>\r\n                <div class=\"column is-12\">\r\n                    <parallel-coordinate-plot-component ref=\"coordinate_plot\">\r\n                    </parallel-coordinate-plot-component>\r\n                </div>\r\n                <div class=\"column is-12\" v-if=\"this.settings.isClassification\">\r\n                    <h5 class=\"title is-7 has-text-left\">Merge classes\r\n                    </h5>\r\n                    <b-table class=\"is-size-7\" :data=\"classesInfo\" :columns=\"classesInfoColumns\" checkable\r\n                        :row-class=\"(row, index) => row.mode <= 0.10 && 'has-text-danger'\" :narrowed=\"true\"\r\n                        :checked-rows.sync=\"selectedClasses\"></b-table>\r\n                    <button @click=\"scaleData()\" class=\"button mt-2 is-info is-small\"\r\n                        :disabled=\"selectedClasses?.length >= classesInfo?.length\">Merge\r\n                        Classes</button>\r\n                    <button @click=\"scaleData(true)\" class=\"button mt-2 mx-1 is-success is-small\">reset</button>\r\n                </div>\r\n                <b-loading :is-full-page=\"false\" v-model=\"isLoading\"></b-loading>\r\n            </div>\r\n        </article>\r\n    </section>\r\n</template>\r\n\r\n<script>\r\nimport ChartController from '@/helpers/charts';\r\nimport { settingStore } from '@/stores/settings'\r\nimport { ScaleOptions } from '@/helpers/settings'\r\nimport { applyDataTransformation } from '@/helpers/utils';\r\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\r\nimport { DataFrame } from 'danfojs/dist/danfojs-base';\r\nimport PCPComponent from '../visualization/parallel-coordinate-plot-component.vue'\r\n\r\nlet chartController = new ChartController();\r\nexport default {\r\n    components: {\r\n        'parallel-coordinate-plot-component': PCPComponent,\r\n    },\r\n    setup() {\r\n        const settings = settingStore()\r\n        return { settings }\r\n    },\r\n    name: 'ScatterplotMatrixComponent',\r\n    props: {\r\n        msg: String,\r\n        update: {}\r\n    },\r\n    data() {\r\n        return {\r\n            isLoading: false,\r\n            ScaleOptions: ScaleOptions,\r\n            features: [],\r\n            df: null,\r\n            rawData: null,\r\n            classesInfo: [],\r\n            selectedClasses: [],\r\n            classesInfoColumns: [],\r\n        }\r\n    },\r\n    methods: {\r\n        downlaodSPLOM() {\r\n            chartController.downloadPlot('scatterplot_mtx')\r\n        },\r\n        updateClassesInfo() {\r\n            this.df = new DataFrame(this.settings.rawData);\r\n            this.settings.mergedClasses.forEach((classes) => {\r\n                let newClass = classes.map(m => m.class).join('_');\r\n                classes.forEach(cls => {\r\n                    this.df.replace(cls.class, newClass, { columns: [this.settings.modelTarget], inplace: true })\r\n                });\r\n            })\r\n            let targetValues = this.df.column(this.settings.modelTarget).values;\r\n            let samplesLength = targetValues.length;\r\n            let classes = new Set(...[targetValues]);\r\n            let result = []\r\n            classes.forEach(cls => {\r\n                result.push({\r\n                    class: cls,\r\n                    mode: +(targetValues.filter(val => val === cls).length / samplesLength).toFixed(2)\r\n                })\r\n            });\r\n            this.classesInfo = result.concat();\r\n            this.classesInfoColumns = [{\r\n                field: 'class',\r\n                label: ' class'\r\n            }, {\r\n                field: 'mode',\r\n                label: 'Samples in each class (%)'\r\n            }]\r\n        },\r\n        async dispalySPLOM(dataframe) {\r\n            try {\r\n                this.isLoading = true;\r\n                let numericColumns = this.settings.items.filter(column => column.selected && column.type === 1).map(column => column.name);\r\n                let categorical_columns = this.settings.items.filter(column => column.selected && column.type !== 1).map(column => column.name);\r\n                let features = numericColumns.concat(categorical_columns);\r\n                dataframe.dropNa({ axis: 1, inplace: true })\r\n                console.log(new Set(dataframe.column(this.settings.modelTarget).values));\r\n\r\n                await chartController.ScatterplotMatrix(dataframe.loc({ columns: features }).values, features, dataframe.column(this.settings.modelTarget).values, categorical_columns.length,\r\n                    this.settings.isClassification, numericColumns, categorical_columns, this.dataframe)\r\n                if (this.settings.isClassification) {\r\n                    this.updateClassesInfo();\r\n                }\r\n                this.$refs.coordinate_plot?.ParallelCoordinatePlot()\r\n                this.isLoading = false;\r\n\r\n            } catch (error) {\r\n                let message = 'Something went wrong drawing data analysis plots'\r\n                this.$buefy.toast.open(message);\r\n                this.settings.addMessage({ message: message, type: 'warning' })\r\n            }\r\n        },\r\n        async scaleData(reset = false) {\r\n            this.df = new DataFrame(this.settings.rawData);\r\n            if (reset) {\r\n                this.settings.resetClassTransformations([]);\r\n                this.updateClassesInfo();\r\n                console.log(this.settings.mergedClasses);\r\n\r\n            }\r\n            if (this.settings.isClassification && this.selectedClasses?.length > 0) {\r\n                let newClass = this.selectedClasses.map(m => m.class).join('_');\r\n                this.selectedClasses.forEach(cls => {\r\n                    this.df.replace(cls.class, newClass, { columns: [this.settings.modelTarget], inplace: true })\r\n                });\r\n                this.settings.setClassTransformation(this.selectedClasses)\r\n                let message = { message: 'merged classes: ' + newClass, type: 'info' }\r\n                this.$buefy.toast.open('merged classes: ' + newClass)\r\n                this.settings.addMessage(message)\r\n            }\r\n\r\n\r\n            let validTransformations = this.settings.items.filter(feature => feature.selected && feature.type === 1 && feature.scaler != 0)\r\n            this.isLoading = true;\r\n            Plotly.purge('scatterplot_mtx')\r\n            this.updateClassesInfo()\r\n            applyDataTransformation(this.df, validTransformations.map(transformation => transformation.name), validTransformations);\r\n            await this.dispalySPLOM(this.df)\r\n            this.isLoading = false;\r\n            this.selectedClasses = []\r\n\r\n            if (validTransformations.length > 0) {\r\n                let transformations = []\r\n                validTransformations.forEach(transformation => {\r\n                    let transformationInfo = Object.keys(ScaleOptions).find(key => ScaleOptions[key].id == transformation.scaler);\r\n                    transformation.scalerLabel = transformationInfo\r\n                    this.settings.addTransformation(transformation)\r\n                    transformations.push(`feature: ${transformation['name']} ,scaler: ${transformation['scalerLabel']} `)\r\n                });\r\n\r\n                let message = { message: 'scaled fetures: <br> ' + transformations.join('_'), type: 'info' }\r\n                this.$buefy.toast.open('scaled fetures: ' + transformations)\r\n                this.settings.addMessage(message)\r\n            } else {\r\n                this.settings.resetTransformations();\r\n            }\r\n\r\n            this.$emit('coordinate-plot', true)\r\n        },\r\n        async initSPLOM() {\r\n            this.df = new DataFrame(this.settings.rawData);\r\n            this.df = await this.df.sample(this.df.$data.length, { seed: this.settings.getSeed });\r\n            this.df.dropNa({ axis: 1, inplace: true })\r\n            let numericColumns = this.settings.items.filter(column => column.selected && column.type === 1).map(function (column) {\r\n                return { 'name': column.name, type: column.type }\r\n            });\r\n            let categorical_columns = this.settings.items.filter(column => column.selected && column.type !== 1).map(function (column) {\r\n                return { 'name': column.name, type: column.type }\r\n            })\r\n            let features = numericColumns.concat(categorical_columns);\r\n            this.features = features.map((feature, i) => {\r\n                return {\r\n                    id: i,\r\n                    name: feature.name,\r\n                    type: feature.type,\r\n                    scaler: 0\r\n                }\r\n            })\r\n            this.dispalySPLOM(this.df)\r\n\r\n        }\r\n    },\r\n    created: async function () {\r\n        await this.initSPLOM()\r\n    },\r\n    computed: {\r\n        column_width: {\r\n            get() {\r\n                return this.features.length === 0 ? 0 : 100 / this.features.length\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped></style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./scatterplot-matrix-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./scatterplot-matrix-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./scatterplot-matrix-component.vue?vue&type=template&id=35ba048a&scoped=true\"\nimport script from \"./scatterplot-matrix-component.vue?vue&type=script&lang=js\"\nexport * from \"./scatterplot-matrix-component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"35ba048a\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('section',{staticClass:\"has-text-left content\"},[_c('h4',{staticClass:\"title is-medium is-5\",attrs:{\"id\":\"help\"}},[_vm._v(\"Classification metrics \")]),_c('p',[_vm._v(\" In a context of a binary classification, here are the main metrics that are important to track in order to assess the performance of the model. \")]),_vm._m(0),_c('h4',{staticClass:\"title is-medium is-5\"},[_vm._v(\"Regression metrics \")]),_c('ul',[_c('li',[_vm._v(\" Basic metricsGiven a regression model \"),_c('i',[_vm._v(\"f\")]),_vm._v(\", the following metrics are commonly used to assess the performance of the model: \"),_c('table',{staticClass:\"table is-bordered\"},[_vm._m(1),_c('tbody',[_c('tr',[_c('td',[_c('vue-mathjax',{attrs:{\"formula\":'$$ SS_{tot}= \\\\sum_{i=1}^{m} (y_i - \\\\hat{y}_i)^2$$'}})],1),_c('td',[_c('vue-mathjax',{attrs:{\"formula\":'$$ SS_{reg}= \\\\sum_{i=1}^{m} (f (x_i) - \\\\hat{y}_i)^2$$'}})],1),_c('td',[_c('vue-mathjax',{attrs:{\"formula\":'$$ SS_{res}= \\\\sum_{i=1}^{m} (y_i - f (x_i))^2$$'}})],1)])])])]),_c('li',[_vm._v(\" Coefficient of determination: The coefficient of determination, often noted \"),_c('i',[_vm._v(\"R\")]),_c('sup',[_vm._v(\"2\")]),_vm._v(\" , provides a measure of how well the observed outcomes are replicated by the model and is defined as follows: \"),_c('vue-mathjax',{attrs:{\"formula\":'$$ R^2 = 1 - \\\\frac{SS_{res}}{SS_{tot}}$$'}})],1),_c('li',[_vm._v(\" Main metrics: The following metrics are commonly used to assess the performance of regression models, by taking into account the number of variables n that they take into consideration: \"),_c('table',{staticClass:\"table is-bordered\"},[_vm._m(2),_c('tbody',[_c('tr',[_c('td',[_c('vue-mathjax',{attrs:{\"formula\":'$$ 2[n + 2 - \\\\log (L)]$$'}})],1),_c('td',[_c('vue-mathjax',{attrs:{\"formula\":'$$ \\\\log (m)(n + 2) - 2 \\\\log (L)$$'}})],1),_c('td',[_c('vue-mathjax',{attrs:{\"formula\":'$$ 1 - \\\\frac{(1-R^2)(m-1)}{m-n-1}$$'}})],1)])])])])]),_c('h4',{staticClass:\"title is-medium is-5\",attrs:{\"id\":\"1_help\"}},[_vm._v(\"Model Selection \")]),_c('h5',[_vm._v(\" When selecting a model, we distinguish 3 different parts of the data that we have as follows: \")]),_vm._m(3),_c('p',[_vm._v(\" Once the model has been chosen, it is trained on the entire dataset and tested on the unseen test set. These are represented in the figure below:\")]),_c('p',[_vm._v(\" Cross-validation, also noted CV, is a method that is used to select a model that does not rely too much on the initial training set. The different types are summed up in the table below: \")]),_vm._m(4),_vm._m(5),_c('p',[_vm._v(\" regularization: The regularization procedure aims at avoiding the model to overfit the data and thus deals with high variance issues. The following table sums up the different types of commonly used regularization techniques: \")]),_c('h4',{staticClass:\"title is-medium is-5\"},[_vm._v(\"Supervised Learning \")]),_vm._m(6),_c('h4',{staticClass:\"title is-medium is-5\",attrs:{\"id\":\"svm_help\"}},[_vm._v(\"Support Vector Machine\")]),_c('p',[_vm._v(\" The goal of support vector machines is to find the line that maximizes the minimum distance to the line. \")]),_vm._v(\" Optimal margin classifier: The optimal margin classifier (h) is such that: \"),_c('vue-mathjax',{attrs:{\"formula\":'$$ h(x) = sign(w^T x - b) $$'}}),_vm._v(\" where (w,b \\\\in R^2) is the solution of the following optimization problem: \"),_c('img',{attrs:{\"src\":\"/svm-en.png\",\"height\":\"150px\",\"width\":\"70%\"}}),_c('h4',{staticClass:\"title is-medium is-5\",attrs:{\"id\":\"naive_bayes_help\"}},[_vm._v(\"Naive Bayes\")]),_c('ul',[_c('li',[_vm._v(\" Assumption: The Naive Bayes model supposes that the features of each data point are all independent: \"),_c('vue-mathjax',{attrs:{\"formula\":'$$ P(x | y) = P(x_1,x_2,...|y) = P(x_1 |y )  P(x_2 |y ) $$'}})],1)]),_c('h4',{staticClass:\"title is-medium\",attrs:{\"id\":\"linear_regression_help\"}},[_vm._v(\"Linear Regression\")]),_c('p',[_vm._v(\" Linear regression is a statistical method used to predict a continuous numeric value based on one or more input features. It assumes a linear relationship between the inputs (independent variables) and the output (dependent variable). The model fits a straight line through the data by minimizing the difference between predicted and actual values, often using a method called least squares. The equation of a linear regression model looks like: \"),_c('vue-mathjax',{attrs:{\"formula\":'$$ y = \\\\beta_0 x_0+  \\\\beta_1 x_1 + \\\\beta_2 x_2+ ...+\\\\beta_n x_n+ intercept $$'}}),_vm._v(\" Here, y is the predicted value,(x_i) are the input features, and(β_i) are the learned coefficients. Linear regression is commonly used in scenarios like predicting house prices, exam scores, or sales revenue. It is evaluated using metrics such as Mean Squared Error (MSE) and R² score, and assumes things like normally distributed errors and consistent variance across predictions. \")],1),_c('h4',{staticClass:\"title is-medium\",attrs:{\"id\":\"logistic_regression_help\"}},[_vm._v(\"Logistic Regression\")]),_c('p',[_vm._v(\" Logistic Regression is used when the output is categorical, especially for binary classification (e.g., yes/no, 0/1). Instead of predicting a continuous value, it predicts the probability that an input belongs to a certain class. To do this, it uses the sigmoid function, which squashes any real number output into a range between 0 and 1: \"),_c('vue-mathjax',{attrs:{\"formula\":'$$ y= \\\\frac{1}{1 + e^{-z}} $$'}}),_vm._v(\" where z is the linear combination of inputs (same as in linear regression). If the resulting probability is greater than 0.5, the output is classified as 1; otherwise, it's classified as 0. If the probability is above a certain threshold (usually 0.5), the model classifies the input as one class; otherwise, it classifies it as the other. The output of the model represents the log-odds of the outcome, and logistic regression is evaluated using classification metrics like accuracy, precision, recall, F1 score, and ROC-AUC. Though it shares structural similarity with linear regression, its purpose and behavior are quite different. \")],1),_c('h4',{staticClass:\"title is-medium\",attrs:{\"id\":\"polynomial_regression_help\"}},[_vm._v(\"Polynomial Regression\")]),_c('p',[_vm._v(\" Polynomial regression is an extension of linear regression that models the relationship between the input variable 𝑥 x and the output variable 𝑦 y as an nth-degree polynomial. While linear regression fits a straight line, polynomial regression fits a curved line, which allows it to capture more complex, non-linear patterns in the data. The general form of the equation is: \"),_c('vue-mathjax',{attrs:{\"formula\":'$$ y = \\\\beta_0 +  \\\\beta_1 x + \\\\beta_2 x^2+ ...+\\\\beta_n x^n $$'}}),_vm._v(\" Here, the model includes powers of the input variable (like 𝑥^2, 𝑥^3, etc.) as additional features. For example, a second-degree polynomial (quadratic regression) can model U-shaped or inverted U-shaped curves. Polynomial regression is still considered a linear model in terms of the coefficients, but it allows for non-linear relationships between x and y. It can be very effective for modeling curved trends, but if the degree of the polynomial is too high, it can lead to overfitting, where the model fits the training data too closely and performs poorly on new data. \")],1),_c('h4',{staticClass:\"title is-medium is-5\",attrs:{\"id\":\"cart_help\"}},[_vm._v(\"Tree-based and ensemble methods\")]),_c('p',[_vm._v(\" These methods can be used for both regression and classification problems. \")]),_vm._m(7),_c('h4',{staticClass:\"title is-medium\",attrs:{\"id\":\"knn_help\"}},[_vm._v(\"(k)-nearest neighbors\")]),_c('p',[_vm._v(\" (k)-nearest neighbors: The (k)-nearest neighbors algorithm, commonly known as (k)-NN, is a non-parametric approach where the response of a data point is determined by the nature of its (k) neighbors from the training set. It can be used in both classification and regression settings. \")]),_c('img',{staticClass:\"image\",attrs:{\"src\":\"/knn.png\"}}),_c('h4',{staticClass:\"title is-medium\",attrs:{\"id\":\"discriminant_analysis_help\"}},[_vm._v(\" Gaussian Discriminant Anallysis \")]),_c('p',[_vm._v(\" Gaussian Discriminant Analysis SettingThe Gaussian Discriminant Analysis assumes that (y) and (x ∣ y = 0) and (x|y = 1) are such that: \"),_c('vue-mathjax',{attrs:{\"formula\":'$$ y \\\\sim Bernoulli(\\\\phi)   ,   x|y = 0 \\\\sim \\\\mathcal{N(\\\\mu_0,\\\\Sigma)}$$'}})],1),_c('h4',[_vm._v(\"Partial Dependence Plot\")]),_c('p',[_vm._v(\" The partial dependence plot (short PDP or PD plot) shows the marginal effect one or two features have on the predicted outcome of a machine learning model. A partial dependence plot can show whether the relationship between the target and a feature is linear, monotonic or more complex. For example, when applied to a linear regression model, partial dependence plots always show a linear relationship. The partial dependence function for regression is defined as: \"),_c('vue-mathjax',{attrs:{\"formula\":'$$ f_s(x_s) = \\\\int{f(x_s,x_c)dP(x_c)}$$'}}),_vm._v(\" The x\"),_c('sub',[_vm._v(\"s\")]),_vm._v(\" are the features for which the partial dependence function should be plotted and X\"),_c('sub',[_vm._v(\"c\")]),_vm._v(\" are the other features used in the machine learning model ^ f , which are here treated as random variables. Usually, there are only one or two features in the set S. The feature(s) in S are those for which we want to know the effect on the prediction. The feature vectors X\"),_c('sub',[_vm._v(\"s\")]),_vm._v(\" and X\"),_c('sub',[_vm._v(\"c\")]),_vm._v(\" combined make up the total feature space x. Partial dependence works by marginalizing the machine learning model output over the distribution of the features in set C, so that the function shows the relationship between the features in set S we are interested in and the predicted outcome. By marginalizing over the other features, we get a function that depends only on features in S, interactions with other features included. The partial function ^ f S is estimated by calculating averages in the training data, also known as Monte Carlo method: \"),_c('vue-mathjax',{attrs:{\"formula\":'$$ f_s(x_s) = \\\\frac{1}{n} \\\\sum_{n = 1}^{n} f(x_s,x_c)$$'}}),_vm._v(\" The partial function tells us for given value(s) of features S what the average marginal effect on the prediction is. In this formula, x ( i ) C are actual feature values from the dataset for the features in which we are not interested, and n is the number of instances in the dataset. An assumption of the PDP is that the features in C are not correlated with the features in S. If this assumption is violated, the averages calculated for the partial dependence plot will include data points that are very unlikely or even impossible (see disadvantages). For classification where the machine learning model outputs probabilities, the partial dependence plot displays the probability for a certain class given different values for feature(s) in S. An easy way to deal with multiple classes is to draw one line or plot per class. The partial dependence plot is a global method: The method considers all instances and gives a statement about the global relationship of a feature with the predicted outcome. \")],1),_c('h4',[_vm._v(\"Categorical features\")]),_c('p',[_vm._v(\" So far, we have only considered numerical features. For categorical features, the partial dependence is very easy to calculate. For each of the categories, we get a PDP estimate by forcing all data instances to have the same category. For example, if we look at the bike rental dataset and are interested in the partial dependence plot for the season, we get four numbers, one for each season. To compute the value for “summer”, we replace the season of all data instances with “summer” and average the predictions. \")]),_c('h4',[_vm._v(\"Permutation Feature Importance\")]),_c('p',[_vm._v(\" Permutation feature importance is a powerful and intuitive method used to evaluate the impact of each feature on a machine learning model’s performance. After a model has been trained, this technique works by randomly shuffling the values of one feature at a time in the validation or test dataset. By doing so, the relationship between that feature and the target variable is disrupted, while all other features remain unchanged. The model is then used to make predictions on this altered dataset, and the drop in performance (measured by accuracy, F1 score, RMSE, or any other metric) is recorded. A large drop indicates that the feature was important to the model’s predictions, while a small or no change suggests that the feature had little influence. This method is model-agnostic, meaning it can be used with any type of machine learning algorithm, from decision trees to neural networks. However, one limitation is that it can be misleading when features are highly correlated, as the importance may be shared among multiple features, making individual effects harder to isolate. \")])],1)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('ul',[_c('li',[_vm._v(\" Confusion matrix: The confusion matrix is used to have a more complete picture when assessing the performance of a model. It is defined as follows: \")]),_c('li',[_vm._v(\" Main metrics: The following metrics are commonly used to assess the performance of classification models: \")]),_c('li',[_vm._v(\" The receiver operating curve, also noted ROC, is the plot of TPR versus FPR by varying the threshold. These metrics are are summed up in the table below: \")]),_c('li',[_vm._v(\" The area under the receiving operating curve, also noted AUC or AUROC, is the area below the ROC as shown in the following figure: \")])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('thead',[_c('tr',[_c('th',{staticClass:\"is-success\"},[_vm._v(\"Total sum of squares\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Explained sum of squares \")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Residual sum of squares \")])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('thead',[_c('tr',[_c('th',{staticClass:\"is-success\"},[_vm._v(\"AIC\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"BIC\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Adjusted R2 \")])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',{staticClass:\"table is-bordered\"},[_c('thead',[_c('tr',[_c('th',{staticClass:\"is-success\"},[_vm._v(\"Training set\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Validation set \")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Testing set \")])])]),_c('tbody',[_c('tr',[_c('td',[_c('ul',[_c('li',[_vm._v(\" Model is trained\")]),_c('li',[_vm._v(\" Usually 80% of the dataset\")])])]),_c('td',[_c('ul',[_c('li',[_vm._v(\"Model is assessed\")]),_c('li',[_vm._v(\"Usually 20% of the dataset\")]),_c('li',[_vm._v(\"Also called hold-out or development set\")])])]),_c('td',[_c('ul',[_c('li',[_vm._v(\" Model gives predictions\")]),_c('li',[_vm._v(\"Unseen data\")])])])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',{staticClass:\"table is-bordered\"},[_c('thead',[_c('tr',[_c('th',{staticClass:\"is-success\"},[_vm._v(\"k-fold\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Leave-p-out\")])])]),_c('tbody',[_c('tr',[_c('td',[_c('ul',[_c('li',[_vm._v(\" Model is trained\")]),_c('li',[_vm._v(\" Usually 80% of the dataset\")])])]),_c('td',[_c('ul',[_c('li',[_vm._v(\"Model is assessed\")]),_c('li',[_vm._v(\"Usually 20% of the dataset\")]),_c('li',[_vm._v(\"Also called hold-out or development set\")])])])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('p',[_vm._v(\" The most commonly used method is called k-fold cross-validation and splits the training data into k folds to validate the model on one fold while training the model on the k−1 other folds, all of this k times. The error is then averaged over the k folds and is named cross-validation error. \"),_c('img',{staticClass:\"image\",attrs:{\"src\":\"/cross-validation-en.png\",\"alt\":\"\"}})])\n},function (){var _vm=this,_c=_vm._self._c;return _c('ul',[_c('li',[_vm._v(\"Type of prediction: The different types of predictive models are summed up in the table below: \"),_c('table',{staticClass:\"table is-bordered\"},[_c('thead',[_c('tr',[_c('th',{staticClass:\"is-success\"}),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Regression\")]),_c('th',{staticClass:\"is-success\"},[_vm._v(\"Classification\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"Outcome\")]),_c('td',[_vm._v(\"Continuous\")]),_c('td',[_vm._v(\"Class\")])]),_c('tr',[_c('td',[_vm._v(\"Examples\")]),_c('td',[_vm._v(\"Linear regression \")]),_c('td',[_vm._v(\"Logistic regression, SVM, Naive Bayes \")])])])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('ul',[_c('li',[_vm._v(\" Classification and Regression Trees (CART), commonly known as decision trees, can be represented as binary trees. They have the advantage to be very interpretable. \")]),_c('li',[_vm._v(\" Random forestIt is a tree-based technique that uses a high number of decision trees built out of randomly selected sets of features. Contrary to the simple decision tree, it is highly uninterpretable but its generally good performance makes it a popular algorithm. \")]),_c('li',[_vm._v(\" BoostingThe idea of boosting methods is to combine several weak learners to form a stronger one. The main ones are summed up in the table below: \")]),_c('li',[_vm._v(\" Adaptive boosting Gradient boosting • High weights are put on errors to improve at the next boosting step • Known as Adaboost • Weak learners are trained on residuals • Examples include XGBoost \")])])\n}]\n\nexport { render, staticRenderFns }","<template>\r\n\r\n    <section class=\"has-text-left content\">\r\n        <h4 class=\"title is-medium is-5\" id=\"help\">Classification metrics\r\n        </h4>\r\n        <p>\r\n            In a context of a binary classification, here are the main metrics that are important to track in order to\r\n            assess the performance of the model.\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                Confusion matrix: The confusion matrix is used to have a more complete picture when assessing the\r\n                performance of a model. It is defined as follows:\r\n            </li>\r\n            <li>\r\n                Main metrics: The following metrics are commonly used to assess the performance of classification\r\n                models:\r\n            </li>\r\n            <li>\r\n                The receiver operating curve, also noted ROC, is the plot of TPR versus FPR by varying the threshold.\r\n                These metrics are are summed up in the table below:\r\n            </li>\r\n            <li>\r\n                The area under the receiving operating curve, also noted AUC or AUROC, is the area below the ROC as\r\n                shown in the following figure:\r\n            </li>\r\n        </ul>\r\n        <h4 class=\"title is-medium is-5\">Regression metrics\r\n        </h4>\r\n        <ul>\r\n            <li>\r\n                Basic metricsGiven a regression model <i>f</i>, the following metrics are commonly used to assess the\r\n                performance of the model:\r\n                <table class=\"table is-bordered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th class=\"is-success\">Total sum of squares</th>\r\n                            <th class=\"is-success\">Explained sum of squares </th>\r\n                            <th class=\"is-success\">Residual sum of squares </th>\r\n\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>\r\n                                <vue-mathjax\r\n                                    :formula=\"'$$ SS_{tot}= \\\\sum_{i=1}^{m} (y_i - \\\\hat{y}_i)^2$$'\"></vue-mathjax>\r\n                            </td>\r\n                            <td> <vue-mathjax\r\n                                    :formula=\"'$$ SS_{reg}= \\\\sum_{i=1}^{m} (f (x_i) - \\\\hat{y}_i)^2$$'\"></vue-mathjax>\r\n                            </td>\r\n                            <td> <vue-mathjax\r\n                                    :formula=\"'$$ SS_{res}= \\\\sum_{i=1}^{m} (y_i - f (x_i))^2$$'\"></vue-mathjax></td>\r\n\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </li>\r\n            <li>\r\n                Coefficient of determination: The coefficient of determination, often noted\r\n                <i>R</i><sup>2</sup>\r\n                , provides a measure of how well the observed outcomes are replicated by the model and is defined as\r\n                follows:\r\n                <vue-mathjax :formula=\"'$$ R^2 = 1 - \\\\frac{SS_{res}}{SS_{tot}}$$'\"></vue-mathjax>\r\n            </li>\r\n            <li>\r\n                Main metrics: The following metrics are commonly used to assess the performance of regression models, by\r\n                taking into account the number of variables\r\n                n that they take into consideration:\r\n                <table class=\"table is-bordered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th class=\"is-success\">AIC</th>\r\n                            <th class=\"is-success\">BIC</th>\r\n                            <th class=\"is-success\">Adjusted R2 </th>\r\n\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>\r\n                                <vue-mathjax :formula=\"'$$ 2[n + 2 - \\\\log (L)]$$'\"></vue-mathjax>\r\n                            </td>\r\n                            <td> <vue-mathjax :formula=\"'$$ \\\\log (m)(n + 2) - 2 \\\\log (L)$$'\"></vue-mathjax>\r\n                            </td>\r\n                            <td> <vue-mathjax :formula=\"'$$ 1 - \\\\frac{(1-R^2)(m-1)}{m-n-1}$$'\"></vue-mathjax></td>\r\n\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </li>\r\n        </ul>\r\n        <h4 class=\"title is-medium is-5\" id=\"1_help\">Model Selection\r\n        </h4>\r\n        <h5>\r\n            When selecting a model, we distinguish 3 different parts of the data that we have as follows:\r\n        </h5>\r\n        <table class=\"table is-bordered\">\r\n            <thead>\r\n                <tr>\r\n                    <th class=\"is-success\">Training set</th>\r\n                    <th class=\"is-success\">Validation set </th>\r\n                    <th class=\"is-success\">Testing set\r\n                    </th>\r\n\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <ul>\r\n                            <li> Model is trained</li>\r\n                            <li> Usually 80% of the dataset</li>\r\n                        </ul>\r\n                    </td>\r\n                    <td>\r\n                        <ul>\r\n                            <li>Model is assessed</li>\r\n                            <li>Usually 20% of the dataset</li>\r\n                            <li>Also called hold-out or development set</li>\r\n                        </ul>\r\n                    </td>\r\n                    <td>\r\n                        <ul>\r\n                            <li> Model gives predictions</li>\r\n                            <li>Unseen data</li>\r\n                        </ul>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <p> Once the model has been chosen, it is trained on the entire dataset and tested on the unseen test set.\r\n            These\r\n            are represented in the figure below:</p>\r\n        <p>\r\n            Cross-validation, also noted CV, is a method that is used to select a model that does not rely too much on\r\n            the initial training set. The different types are summed up in the table below:\r\n        </p>\r\n        <table class=\"table is-bordered\">\r\n            <thead>\r\n                <tr>\r\n                    <th class=\"is-success\">k-fold</th>\r\n                    <th class=\"is-success\">Leave-p-out</th>\r\n\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <ul>\r\n                            <li> Model is trained</li>\r\n                            <li> Usually 80% of the dataset</li>\r\n                        </ul>\r\n                    </td>\r\n                    <td>\r\n                        <ul>\r\n                            <li>Model is assessed</li>\r\n                            <li>Usually 20% of the dataset</li>\r\n                            <li>Also called hold-out or development set</li>\r\n                        </ul>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <p>\r\n            The most commonly used method is called\r\n            k-fold cross-validation and splits the training data into\r\n            k folds to validate the model on one fold while training the model on the k−1 other folds, all of this\r\n            k times. The error is then averaged over the k folds and is named cross-validation error.\r\n            <img class=\"image\" src=\"/cross-validation-en.png\" alt=\"\">\r\n        </p>\r\n        <p>\r\n            regularization: The regularization procedure aims at avoiding the model to overfit the data and thus deals\r\n            with high\r\n            variance issues. The following table sums up the different types of commonly used regularization techniques:\r\n        </p>\r\n        <h4 class=\"title is-medium is-5\">Supervised Learning\r\n        </h4>\r\n        <ul>\r\n            <li>Type of prediction: The different types of predictive models are summed up in the table below:\r\n\r\n                <table class=\"table is-bordered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th class=\"is-success\"></th>\r\n                            <th class=\"is-success\">Regression</th>\r\n                            <th class=\"is-success\">Classification</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Outcome</td>\r\n                            <td>Continuous</td>\r\n                            <td>Class</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Examples</td>\r\n                            <td>Linear regression </td>\r\n                            <td>Logistic regression, SVM, Naive Bayes\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </li>\r\n        </ul>\r\n        <h4 class=\"title is-medium is-5\" id=\"svm_help\">Support Vector Machine</h4>\r\n        <p>\r\n            The goal of support vector machines is to find the line that maximizes the minimum distance to the line.\r\n        </p>\r\n        Optimal margin classifier: The optimal margin classifier (h) is such that:\r\n        <vue-mathjax :formula=\"'$$ h(x) = sign(w^T x - b) $$'\"></vue-mathjax>\r\n        where (w,b \\in R^2) is the solution of the following optimization problem:\r\n        <img src=\"/svm-en.png\" height=\"150px\" width=\"70%\">\r\n\r\n        <h4 class=\"title is-medium is-5\" id=\"naive_bayes_help\">Naive Bayes</h4>\r\n        <ul>\r\n            <li>\r\n                Assumption: The Naive Bayes model supposes that the features of each data point are all independent:\r\n                <vue-mathjax :formula=\"'$$ P(x | y) = P(x_1,x_2,...|y) = P(x_1 |y )  P(x_2 |y ) $$'\"></vue-mathjax>\r\n\r\n            </li>\r\n        </ul>\r\n        <h4 class=\"title is-medium\" id=\"linear_regression_help\">Linear Regression</h4>\r\n        <p>\r\n            Linear regression is a statistical method used to predict a continuous numeric value based on one or more\r\n            input features. It assumes a linear relationship between the inputs (independent variables) and the output\r\n            (dependent variable). The model fits a straight line through the data by minimizing the difference between\r\n            predicted and actual values, often using a method called least squares. The equation of a linear regression\r\n            model looks like:\r\n            <vue-mathjax\r\n                :formula=\"'$$ y = \\\\beta_0 x_0+  \\\\beta_1 x_1 + \\\\beta_2 x_2+ ...+\\\\beta_n x_n+ intercept $$'\"></vue-mathjax>\r\n\r\n            Here, y is the predicted value,(x_i)\r\n            are the input features, and(β_i)\r\n            are the learned coefficients. Linear regression is commonly used in scenarios like predicting house prices,\r\n            exam scores, or sales revenue. It is evaluated using metrics such as Mean Squared Error (MSE) and R² score,\r\n            and assumes things like normally distributed errors and consistent variance across predictions.\r\n        </p>\r\n        <h4 class=\"title is-medium\" id=\"logistic_regression_help\">Logistic Regression</h4>\r\n        <p>\r\n            Logistic Regression is used when the output is categorical, especially for binary classification (e.g.,\r\n            yes/no, 0/1). Instead of predicting a continuous value, it predicts the probability that an input belongs to\r\n            a certain class. To do this, it uses the sigmoid function, which squashes any real number output into a\r\n            range between 0 and 1:\r\n            <vue-mathjax :formula=\"'$$ y= \\\\frac{1}{1 + e^{-z}} $$'\"></vue-mathjax>\r\n            where\r\n            z is the linear combination of inputs (same as in linear regression). If the resulting probability is\r\n            greater than 0.5, the output is classified as 1; otherwise, it's classified as 0.\r\n            If the probability is above a certain threshold (usually 0.5), the model classifies the input as one class;\r\n            otherwise, it classifies it as the other. The output of the model represents the log-odds of the outcome,\r\n            and logistic regression is evaluated using classification metrics like accuracy, precision, recall, F1\r\n            score, and ROC-AUC. Though it shares structural similarity with linear regression, its purpose and behavior\r\n            are quite different.\r\n        </p>\r\n        <h4 class=\"title is-medium\" id=\"polynomial_regression_help\">Polynomial Regression</h4>\r\n        <p>\r\n            Polynomial regression is an extension of linear regression that models the relationship between the input\r\n            variable\r\n            𝑥\r\n            x and the output variable\r\n            𝑦\r\n            y as an nth-degree polynomial. While linear regression fits a straight line, polynomial regression fits a\r\n            curved line, which allows it to capture more complex, non-linear patterns in the data. The general form of\r\n            the equation is:\r\n            <vue-mathjax :formula=\"'$$ y = \\\\beta_0 +  \\\\beta_1 x + \\\\beta_2 x^2+ ...+\\\\beta_n x^n $$'\"></vue-mathjax>\r\n            Here, the model includes powers of the input variable (like\r\n            𝑥^2, 𝑥^3, etc.) as additional features. For example, a second-degree polynomial (quadratic regression) can\r\n            model\r\n            U-shaped or inverted U-shaped curves. Polynomial regression is still considered a linear model in terms of\r\n            the coefficients, but it allows for non-linear relationships between x and y. It can be very effective for\r\n            modeling curved trends, but if the degree of the polynomial is too high, it\r\n            can lead to overfitting, where the model fits the training data too closely and performs poorly on new data.\r\n        </p>\r\n\r\n        <h4 class=\"title is-medium is-5\" id=\"cart_help\">Tree-based and ensemble methods</h4>\r\n        <p> These methods can be used for both regression and classification problems.\r\n        </p>\r\n        <ul>\r\n            <li>\r\n                Classification and Regression Trees (CART), commonly known as decision trees, can be represented as\r\n                binary\r\n                trees. They have the advantage to be very interpretable.\r\n            </li>\r\n            <li>\r\n                Random forestIt is a tree-based technique that uses a high number of decision trees built out of\r\n                randomly\r\n                selected\r\n                sets of features. Contrary to the simple decision tree, it is highly uninterpretable but its generally\r\n                good\r\n                performance makes it a popular algorithm.\r\n            </li>\r\n            <li>\r\n\r\n                BoostingThe idea of boosting methods is to combine several weak learners to form a stronger one. The\r\n                main\r\n                ones are\r\n                summed up in the table below:\r\n            </li>\r\n            <li> Adaptive boosting Gradient boosting\r\n                • High weights are put on errors to improve at the next boosting step\r\n                • Known as Adaboost •\r\n                Weak learners are trained on residuals\r\n                • Examples include XGBoost\r\n            </li>\r\n        </ul>\r\n        <h4 class=\"title is-medium\" id=\"knn_help\">(k)-nearest neighbors</h4>\r\n        <p>\r\n            (k)-nearest neighbors: The\r\n            (k)-nearest neighbors algorithm, commonly known as\r\n            (k)-NN, is a non-parametric approach where the response of a data point is determined by the nature of its\r\n            (k) neighbors from the training set. It can be used in both classification and regression settings.\r\n        </p>\r\n        <img src=\"/knn.png\" class=\"image\">\r\n\r\n\r\n        <h4 class=\"title is-medium\" id=\"discriminant_analysis_help\"> Gaussian Discriminant Anallysis </h4>\r\n        <p>\r\n            Gaussian Discriminant Analysis\r\n            SettingThe Gaussian Discriminant Analysis assumes that\r\n            (y) and (x ∣ y = 0) and (x|y = 1) are such that:\r\n            <vue-mathjax\r\n                :formula=\"'$$ y \\\\sim Bernoulli(\\\\phi)   ,   x|y = 0 \\\\sim \\\\mathcal{N(\\\\mu_0,\\\\Sigma)}$$'\"></vue-mathjax>\r\n\r\n        </p>\r\n        <h4>Partial Dependence Plot</h4>\r\n        <p>\r\n            The partial dependence plot (short PDP or PD plot) shows the marginal effect one or two features have on the\r\n            predicted outcome of a machine learning model. A partial dependence plot can show\r\n            whether the relationship between the target and a feature is linear, monotonic or more complex. For example,\r\n            when applied to a linear regression model, partial dependence plots always show a linear relationship.\r\n\r\n            The partial dependence function for regression is defined as:\r\n            <vue-mathjax :formula=\"'$$ f_s(x_s) = \\\\int{f(x_s,x_c)dP(x_c)}$$'\"></vue-mathjax>\r\n            The x<sub>s</sub>\r\n            are the features for which the partial dependence function should be plotted and\r\n            X<sub>c</sub>\r\n            are the other features used in the machine learning model\r\n            ^\r\n            f\r\n            , which are here treated as random variables. Usually, there are only one or two features in the set S. The\r\n            feature(s) in S are those for which we want to know the effect on the prediction. The feature vectors\r\n            X<sub>s</sub>\r\n            and\r\n            X<sub>c</sub>\r\n            combined make up the total feature space x. Partial dependence works by marginalizing the machine learning\r\n            model output over the distribution of the features in set C, so that the function shows the relationship\r\n            between the features in set S we are interested in and the predicted outcome. By marginalizing over the\r\n            other features, we get a function that depends only on features in S, interactions with other features\r\n            included.\r\n\r\n            The partial function\r\n            ^\r\n            f\r\n            S\r\n            is estimated by calculating averages in the training data, also known as Monte Carlo method:\r\n\r\n            <vue-mathjax :formula=\"'$$ f_s(x_s) = \\\\frac{1}{n} \\\\sum_{n = 1}^{n} f(x_s,x_c)$$'\"></vue-mathjax>\r\n\r\n            The partial function tells us for given value(s) of features S what the average marginal effect on the\r\n            prediction is. In this formula,\r\n            x\r\n            (\r\n            i\r\n            )\r\n            C\r\n            are actual feature values from the dataset for the features in which we are not interested, and n is the\r\n            number of instances in the dataset. An assumption of the PDP is that the features in C are not correlated\r\n            with the features in S. If this assumption is violated, the averages calculated for the partial dependence\r\n            plot will include data points that are very unlikely or even impossible (see disadvantages).\r\n\r\n            For classification where the machine learning model outputs probabilities, the partial dependence plot\r\n            displays the probability for a certain class given different values for feature(s) in S. An easy way to deal\r\n            with multiple classes is to draw one line or plot per class.\r\n\r\n            The partial dependence plot is a global method: The method considers all instances and gives a statement\r\n            about the global relationship of a feature with the predicted outcome.\r\n        </p>\r\n        <h4>Categorical features</h4>\r\n        <p>\r\n            So far, we have only considered numerical features. For categorical features, the partial dependence is very\r\n            easy to calculate. For each of the categories, we get a PDP estimate by forcing all data instances to have\r\n            the same category. For example, if we look at the bike rental dataset and are interested in the partial\r\n            dependence plot for the season, we get four numbers, one for each season. To compute the value for “summer”,\r\n            we replace the season of all data instances with “summer” and average the predictions.\r\n        </p>\r\n        <h4>Permutation Feature Importance</h4>\r\n        <p>\r\n            Permutation feature importance is a powerful and intuitive method used to evaluate the impact of each\r\n            feature on a machine learning model’s performance. After a model has been trained, this technique works by\r\n            randomly shuffling the values of one feature at a time in the validation or test dataset. By doing so, the\r\n            relationship between that feature and the target variable is disrupted, while all other features remain\r\n            unchanged. The model is then used to make predictions on this altered dataset, and the drop in performance\r\n            (measured by accuracy, F1 score, RMSE, or any other metric) is recorded. A large drop indicates that the\r\n            feature was important to the model’s predictions, while a small or no change suggests that the feature had\r\n            little influence. This method is model-agnostic, meaning it can be used with any type of machine learning\r\n            algorithm, from decision trees to neural networks. However, one limitation is that it can be misleading when\r\n            features are highly correlated, as the importance may be shared among multiple features, making individual\r\n            effects harder to isolate.\r\n        </p>\r\n    </section>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'MethodsTabComponent',\r\n    data() {\r\n        return {\r\n            formula: '$$x = {-b \\\\pm \\\\sqrt{b^2-4ac} \\\\over 2a}.$$',\r\n            sserror: '$$ SS_{tot}= \\\\sum_{i=1}^{m} (y_i - \\\\hat{y}_i)^2$$'\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style>\r\n.demo-container {\r\n    text-align: center;\r\n}\r\n</style>\r\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./methods-tab-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./methods-tab-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./methods-tab-component.vue?vue&type=template&id=57b22cf8\"\nimport script from \"./methods-tab-component.vue?vue&type=script&lang=js\"\nexport * from \"./methods-tab-component.vue?vue&type=script&lang=js\"\nimport style0 from \"./methods-tab-component.vue?vue&type=style&index=0&id=57b22cf8&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","const pyodideWorker = new Worker(new URL('./sns-py.js', import.meta.url))\n\nconst callbacks = {};\n\npyodideWorker.onmessage = (event) => {\n    const { id, ...data } = event.data;\n    const onSuccess = callbacks[id];\n    delete callbacks[id];\n    onSuccess(data);\n};\n\nconst asyncRun = (() => {\n    let id = 0; // identify a Promise\n    return (script, context) => {\n        // the id could be generated more carefully\n        id = (id + 1) % Number.MAX_SAFE_INTEGER;\n        return new Promise((onSuccess) => {\n            callbacks[id] = onSuccess;\n            pyodideWorker.postMessage({\n                ...context,\n                python: script,\n                id,\n            });\n        });\n    };\n})();\n\nexport { asyncRun };","import { asyncRun } from \"@/helpers/sns-worker\";\n\n\nexport default class Clustermap {\n    constructor() {\n        this.model = null;\n\n    }\n    async train(x_train, columns, metric, method) {\n        this.context = {\n            X_train: x_train,\n            columns: columns,\n            metric: metric,\n            method: method,\n        };\n        const script = `\n        import matplotlib\n        matplotlib.use(\"AGG\")\n        import matplotlib.pyplot as plt\n        from js import X_train,columns,method,metric\n        import seaborn as sns\n        import pandas as pd\n\n        sns.set(font_scale=1.5)\n        df = pd.DataFrame(X_train,columns = columns)\n        plt.figure(figsize=(12, 8))\n        plot = sns.clustermap(df.corr(),cmap=\"YlGnBu_r\",annot = True, fmt=\".2f\",method=method,metric=metric)\n        reordered_index = plot.dendrogram_row.reordered_ind\n        reordered_columns = plot.dendrogram_col.reordered_ind\n        clustered_corr = df.corr().iloc[reordered_index, :].iloc[:, reordered_columns]\n\n        Z = plot.dendrogram_col.linkage  \n        Z,clustered_corr.values,clustered_corr.columns.tolist()\n        `;\n        try {\n            const { results, error } = await asyncRun(script, this.context);\n            if (results) {\n                return results;\n            } else if (error) {\n                console.log(\"pyodideWorker error: \", error);\n            }\n        } catch (e) {\n            throw Error(`Error in pyodideWorker at ${e.filename}, Line: ${e.lineno}, ${e.message}`,)\n\n        }\n\n    }\n\n}","<template>\r\n    <div class=\"column is-10\">\r\n        <section>\r\n            <b-tabs v-model=\"settings.activeTab\" :position=\"'is-centered'\" :animated=\"false\" type=\"success\"\r\n                @input=\"resize()\">\r\n                <b-tab-item label=\"Data Analysis\" icon=\"search\" icon-pack=\"fas\">\r\n                    <section v-if=\"this.settings.datasetShape?.count > 0\">\r\n                        <div class=\"message is-info\" v-if=\"isActive\" :closable=\"false\">\r\n                            <div class=\"message-header p-2\">Data summary</div>\r\n                            <div class=\"message-body\">\r\n                                <div class=\"columns is-multiline\">\r\n                                    <div class=\"column is-12 has-text-left\">\r\n                                        <p class=\"title is-6 m-0 mb-1\"> Data Shape: ({{\r\n                                            this.settings.datasetShape.count }},{{\r\n                                                this.settings.datasetShape.columns\r\n                                            }})</p>\r\n                                    </div>\r\n                                    <div class=\"column is-6\">\r\n                                        <h5 class=\"title is-6 has-text-left m-0 mb-1\">Numerical Features:\r\n                                        </h5>\r\n                                        <div class=\"table-container\">\r\n\r\n                                            <table class=\"table is-size-7\">\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <th class=\"is-success\"></th>\r\n                                                        <th class=\"is-success\">Name</th>\r\n                                                        <th class=\"is-success\">Min</th>\r\n                                                        <th class=\"is-success\">Max</th>\r\n                                                        <th class=\"is-success\">Mean</th>\r\n                                                        <th class=\"is-success\">Median</th>\r\n                                                        <th class=\"is-success\">st.d</th>\r\n                                                        <th class=\"is-success\">#NAs</th>\r\n                                                        <th class=\"is-success\">Type</th>\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    <tr v-for=\"feature in continuousFeaturesStats\" :key=\"feature.name\">\r\n                                                        <td> <b-checkbox v-model=\"feature.selected\"></b-checkbox>\r\n                                                        </td>\r\n                                                        <td>{{ feature.name }}</td>\r\n                                                        <td>{{ feature.min }}</td>\r\n                                                        <td>{{ feature.max }}</td>\r\n                                                        <td>{{ feature.median }}</td>\r\n                                                        <td>{{ feature.mean }}</td>\r\n                                                        <td>{{ feature.std }}</td>\r\n                                                        <td>{{ feature.missingValuesCount }}</td>\r\n                                                        <td> <b-select :expanded=\"true\" v-model=\"feature.type\"\r\n                                                                size=\"is-small\">\r\n                                                                <option v-for=\"option in featureTypeOptions\"\r\n                                                                    :value=\"option.id\" :key=\"option.id\">\r\n                                                                    {{ option.name }}\r\n                                                                </option>\r\n                                                            </b-select></td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </div>\r\n                                        <button class=\"button is-small is-info\" @click=\"applyChanges()\">Apply\r\n                                            changes</button>\r\n                                    </div>\r\n                                    <div class=\"column is-6\">\r\n                                        <h5 class=\"title is-6 has-text-left m-0 mb-1\">Categorical\r\n                                            Features(Nominal/Ordinal):</h5>\r\n                                        <div class=\"table-container\">\r\n\r\n                                            <table class=\"table is-size-7 mb-1\">\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <th class=\"is-success\"></th>\r\n                                                        <th class=\"is-success\">Name</th>\r\n                                                        <th class=\"is-success\">Shape</th>\r\n                                                        <th class=\"is-success\">Mode</th>\r\n                                                        <th class=\"is-success\">Mode percentage</th>\r\n                                                        <th class=\"is-success\">#NAs</th>\r\n                                                        <th class=\"is-success\">Type</th>\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    <tr v-for=\"feature in categoricalFeaturesStats\" :key=\"feature.name\">\r\n                                                        <td> <b-checkbox v-model=\"feature.selected\"></b-checkbox>\r\n                                                        </td>\r\n                                                        <td>{{ feature.name }}</td>\r\n                                                        <td>{{ feature.shape }}</td>\r\n                                                        <td>{{ feature.mode }}</td>\r\n                                                        <td>{{ feature.percentage }}</td>\r\n                                                        <td>{{ feature.missingValuesCount }}</td>\r\n\r\n                                                        <td> <b-select :expanded=\"true\" v-model=\"feature.type\"\r\n                                                                size=\"is-small\">\r\n                                                                <option v-for=\"option in featureTypeOptions\"\r\n                                                                    :value=\"option.id\" :key=\"option.id\">\r\n                                                                    {{ option.name }}\r\n                                                                </option>\r\n                                                            </b-select></td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            </table>\r\n                                            <p class=\"subtitle is-7 m-0 p-0\"> Nominal features are one hot encoded and\r\n                                                ordinal\r\n                                                features are encoded in one column.</p>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                    <div class=\"column is-6\">\r\n                                        <h5 class=\"title is-6 has-text-left\">Sample Data :</h5>\r\n                                        <b-table class=\"is-size-7 m-0 mb-1\" :data=\"sampleData\" :columns=\"datasetColumns\"\r\n                                            :narrowed=\"true\" :bordered=\"true\" :striped=\"true\"\r\n                                            :hoverable=\"true\"></b-table>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <section>\r\n                            <scatterplot-matrix-component ref=\"splom\"></scatterplot-matrix-component>\r\n\r\n                        </section>\r\n                        <section>\r\n                            <article class=\"message is-info mt-2\">\r\n                                <div class=\"message-header p-2\">Correlation Matrix and Dendrogram <b-tooltip\r\n                                        append-to-body label=\"Ward method requires euclidean distance\" multilined>\r\n                                        <b-button icon-left=\"info\" icon-pack=\"fas\" size=\"is-small\" type=\"is-dark\" />\r\n                                    </b-tooltip></div>\r\n                                <div class=\"message-body\">\r\n                                    <div class=\"columns is-gapless\">\r\n                                        <div class=\"column is-6 mx-1\"></div>\r\n                                        <div class=\"column is-6 mx-1\">\r\n                                            <b-field label=\"Linkage method, Distance Metric\" custom-class=\"is-small\">\r\n                                                <b-select size=\"is-small\" placeholder=\"Method\" v-model=\"method\">\r\n                                                    <option value=\"single\">single</option>\r\n                                                    <option value=\"complete\">complete</option>\r\n                                                    <option value=\"average\">average</option>\r\n                                                    <option value=\"weighted\">weighted</option>\r\n                                                    <option value=\"centroid\">centroid</option>\r\n                                                    <option value=\"median\">median</option>\r\n                                                    <option value=\"ward\">ward</option>\r\n                                                </b-select>\r\n                                                <b-select size=\"is-small\" placeholder=\"Metric\" v-model=\"metric\">\r\n                                                    <option value=\"euclidean\">euclidean</option>\r\n                                                    <option value=\"correlation\">correlation</option>\r\n                                                    <option value=\"mahalanobis\">mahalanobis</option>\r\n                                                    <option value=\"cosine\">cosine</option>\r\n                                                </b-select>\r\n                                                <p class=\"control\">\r\n                                                    <b-button class=\"is-success is-small\" @click=\"correlationMatrix\"\r\n                                                        :disabled=\"loading\" :loading=\"loading\">Correlation\r\n                                                        Cluster Diagram</b-button>\r\n                                                </p>\r\n                                            </b-field>\r\n\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n                                    <div class=\"columns is-multiline is-centered mb-2 p-0 is-gapless\">\r\n                                        <div class=\"column is-6\" id=\"correlation_matrix\" style=\"height: 400px;\"></div>\r\n                                        <div class=\"column is-6\" id=\"correlation_matrix_ordered\" style=\"height: 400px;\">\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </article>\r\n                        </section>\r\n                    </section>\r\n                    <section v-else>\r\n                        <b-message type=\"is-danger\" has-icon icon-pack=\"fas\">\r\n                            Upload a dataset or select a sample from sidebar.\r\n                        </b-message>\r\n                    </section>\r\n\r\n                </b-tab-item>\r\n\r\n                <b-tab-item label=\"Dimensionality Reduction\" icon=\"compress-arrows-alt\" icon-pack=\"fas\">\r\n                    <dmensionality-reduction-component :dataframe=\"this.settings.df\"\r\n                        :columns=\"selectedFeatures\"></dmensionality-reduction-component>\r\n                </b-tab-item>\r\n                <b-tab-item label=\"Results Analysis\" icon=\"chart-pie\" icon-pack=\"fas\">\r\n                    <results-component ref=\"results\"></results-component>\r\n                </b-tab-item>\r\n                <b-tab-item label=\"Methods Details\" icon=\"list\" icon-pack=\"fas\">\r\n                    <methods-tab-component></methods-tab-component>\r\n                </b-tab-item>\r\n                <b-tab-item label=\"Help\" icon=\"question\" icon-pack=\"fas\">\r\n                    <div class=\"content has-text-left\">\r\n                        <h4>1. Dataset Selection</h4>\r\n                        <p>\r\n                            To begin, you can either select a sample dataset provided by the system or upload your own\r\n                            dataset. The supported file formats for datasets include .xlsx (Excel files), .csv (Comma\r\n                            Separated Values files), and .txt (plain text files). Ensure that your file is in one of\r\n                            these formats to avoid any issues during the upload process.\r\n                        </p>\r\n                        <figure>\r\n                            <img src=\"/upload.png\" />\r\n                            <figcaption>Figure 1: Dataset Selection</figcaption>\r\n                        </figure>\r\n                        <h4>2. Data Analysis</h4>\r\n                        <figure>\r\n                            <img src=\"/stats_categorical.jpg\" />\r\n                            <figcaption>Figure 2: Categorical features stats</figcaption>\r\n                        </figure>\r\n                        <p>\r\n                            After uploading the dataset an overview of the dataset would be shhown in the Data Analysis\r\n                            tab. In the first\r\n                            window we provide you witth statistical metrics of the dataset. for canotinious features we\r\n                            show the mean, std, min, max, and etc.\r\n\r\n                            In case of categorical features information such as shape, mode and percentages of smaples\r\n                            with modes option, and number of missing values.\r\n                        </p>\r\n\r\n                        <figure>\r\n                            <img src=\"/stats_continious.jpg\" />\r\n                            <figcaption>Figure 3: Categorical features stats</figcaption>\r\n                        </figure>\r\n                        <p>\r\n                            In case of categorical features information such as shape, mode and percentages of smaples\r\n                            with modes option, and number of missing values.\r\n                        </p>\r\n                        <h4>3. Feature selection</h4>\r\n                        <p>\r\n                            After uploading the dataset, you can customize the data by selecting specific features based\r\n                            on your requirements. To do this, click on the 'Select Features' button, which will open a\r\n                            new menu. This menu allows you to choose the features that will be used in the training\r\n                            process. If there is an issue with the automatic detection of feature data types, you can\r\n                            manually adjust the data types to ensure they are correctly categorized as ordinal,\r\n                            categorical, or continuous.\r\n                        </p>\r\n                        <h4>3. Model Selection</h4>\r\n                        <figure>\r\n                            <img src=\"/model_selection.jpg\" />\r\n                            <figcaption>Figure 4: Model selection and setting for knn</figcaption>\r\n                        </figure>\r\n                        <p>\r\n                            Once you have selected all the required features and resolved any issues with feature data\r\n                            types, you can proceed to the model selection step. Use the 'Model' dropdown to\r\n                            choose the model for training. The options in this dropdown will be dynamically populated\r\n                            based on the type of data in your features: regression models will be available for\r\n                            continuous data, while classification models will be shown for categorical data.\r\n                            Additionally, you can further customize the selected model by clicking the gear icon, which\r\n                            allows you to adjust common settings and parameters specific to each model.\r\n                        </p>\r\n                    </div>\r\n                </b-tab-item>\r\n                <b-tab-item label=\"Messages Log\" icon=\"history\" icon-pack=\"fas\">\r\n                    <b-notification aria-close-label=\"Close notification\" icon-pack=\"fas\"\r\n                        :type=\"m.type == 'warning' ? 'is-warning' : m.type == 'danger' ? 'is-danger' : 'is-info'\"\r\n                        has-icon :closable=\"false\" v-for=\"(m, i) in this.settings.getMessages\" :key=\"i\">\r\n                        {{ m.message?.toLowerCase() }}\r\n                        <br>\r\n                        {{ m.date }}\r\n\r\n                    </b-notification>\r\n                </b-tab-item>\r\n            </b-tabs>\r\n        </section>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport UI from '@/helpers/ui';\r\nimport { toJSON } from 'danfojs';\r\nimport PCAComponent from './tabs/dmensionality-reduction-componenet.vue'\r\nimport ResultsComponent from './tabs/results-component.vue'\r\nimport SPLOMComponent from './visualization/scatterplot-matrix-component.vue'\r\nimport MethodsTabComponent from './tabs/methods-tab-component.vue'\r\n\r\nimport { FeatureCategories } from '../helpers/settings'\r\nimport ChartController from '@/helpers/charts';\r\nimport { settingStore } from '@/stores/settings'\r\nimport { Matrix, correlation } from 'ml-matrix';\r\n// eslint-disable-next-line no-unused-vars\r\nimport Clustermap from '@/helpers/correlation/correlation-matrix'\r\nimport { DataFrame } from 'danfojs/dist/danfojs-base';\r\n\r\nlet ui = new UI(null, null);\r\nlet chartController = new ChartController(null, null)\r\n\r\nexport default {\r\n    name: 'MainComponent',\r\n    components: {\r\n        'dmensionality-reduction-component': PCAComponent,\r\n        'results-component': ResultsComponent,\r\n        'scatterplot-matrix-component': SPLOMComponent,\r\n        'methods-tab-component': MethodsTabComponent\r\n    },\r\n    setup() {\r\n        const settings = settingStore()\r\n        return { settings }\r\n    },\r\n    props: {\r\n        msg: String,\r\n        selectedFeatures: [],\r\n    },\r\n    errorCaptured(err, vm, info) {\r\n        console.log(`cat EC: ${err.toString()}\\ninfo: ${info}`);\r\n        let message = { message: 'Encountered unexpected error', type: 'warning' }\r\n        this.$buefy.toast.open({ message: 'Encountered unexpected error', type: 'is-warning' })\r\n        this.settings.addMessage(message)\r\n        return false;\r\n    },\r\n    data() {\r\n        return {\r\n            featureTypeOptions: FeatureCategories,\r\n            checkedRows: [],\r\n            metric: 'euclidean',\r\n            method: 'ward',\r\n            img: null,\r\n            continuousFeaturesStats: [\r\n            ],\r\n            continuousFeaturesColumns: [\r\n            ],\r\n            categoricalFeaturesStats: [\r\n            ],\r\n            categoricalFeaturesColumns: [\r\n            ],\r\n            sampleData: [\r\n            ],\r\n            datasetColumns: [\r\n            ],\r\n\r\n            isActive: true,\r\n            hasCorrelationMatrix: false,\r\n            loading: false\r\n        }\r\n    },\r\n    methods: {\r\n\r\n        resize() {\r\n            window.dispatchEvent(new Event('resize'));\r\n        },\r\n        async correlationMatrix() {\r\n            this.loading = true;\r\n            try {\r\n                let numericColumns = this.settings.items.filter(m => m.selected && m.type === FeatureCategories.Numerical.id).map(m => m.name);\r\n                let values = this.settings.df.loc({ columns: numericColumns })\r\n                values = values.dropNa({ axis: 1 }).values\r\n                let matrix = new Matrix(values)\r\n                let correlations = correlation(matrix)\r\n                this.hasCorrelationMatrix = true;\r\n                await chartController.correlationHeatmap('correlation_matrix', correlations.data, numericColumns);\r\n                let mtx = new Clustermap();\r\n                let [dendogram, orderedMatrix, columns] = await mtx.train(values, numericColumns, this.metric, this.method);\r\n                await chartController.dendogramPlot('correlation_matrix_ordered', orderedMatrix, dendogram, columns, numericColumns);\r\n                this.loading = false;\r\n                setTimeout(() => {\r\n                    window.dispatchEvent(new Event('resize'));\r\n                }, 500);\r\n            } catch (error) {\r\n                this.loading = false;\r\n                throw error\r\n            }\r\n        },\r\n        applyChanges() {\r\n            this.renderStats(true)\r\n        },\r\n        renderStats(update = false) {\r\n            if (this.settings.df?.columns?.length > 0) {\r\n                let numericColumns, categoricalColumns;\r\n                if (!update) {\r\n                    numericColumns = this.settings.items.filter(m => m?.type === FeatureCategories.Numerical.id).map(function (m) {\r\n                        return {\r\n                            name: m.name,\r\n                            selected: true\r\n                        }\r\n                    });\r\n                    categoricalColumns = this.settings.items.filter(m => m?.type !== FeatureCategories.Numerical.id).map(function (m) {\r\n                        return {\r\n                            name: m.name,\r\n                            selected: true\r\n                        }\r\n                    });\r\n                } else {\r\n                    console.log(this.continuousFeaturesStats);\r\n                    let features = this.continuousFeaturesStats.concat(this.categoricalFeaturesStats)\r\n                    numericColumns = features.filter(m => m?.type === FeatureCategories.Numerical.id).map(function (m) {\r\n                        return {\r\n                            name: m.name,\r\n                            selected: m.selected,\r\n                            scaler: m.sclaer ?? 0\r\n                        }\r\n                    });\r\n                    categoricalColumns = features.filter(m => m?.type\r\n                        === FeatureCategories.Nominal.id\r\n                        || m?.type === FeatureCategories.Ordinal.id).map(function (m) {\r\n                            return {\r\n                                name: m.name,\r\n                                selected: m.selected\r\n                            }\r\n                        });\r\n\r\n                    let selectedFeatures = features;\r\n                    for (let i = 0; i < selectedFeatures.length; i++) {\r\n                        this.settings.addFeature(selectedFeatures[i])\r\n                    }\r\n                    this.$emit('check-target')\r\n\r\n                }\r\n\r\n\r\n                let df = new DataFrame(this.settings.rawData);\r\n                let datasetStats = ui.renderDatasetStats(df, numericColumns, categoricalColumns);\r\n                this.continuousFeaturesColumns = datasetStats[0];\r\n                this.continuousFeaturesStats = datasetStats[1];\r\n                this.categoricalFeaturesColumns = datasetStats[2];\r\n                this.categoricalFeaturesStats = datasetStats[3];\r\n                this.datasetColumns = this.settings.df.columns.map(column => {\r\n                    return {\r\n                        field: column,\r\n                        label: column\r\n\r\n                    }\r\n                });\r\n                this.sampleData = toJSON(this.settings.df.head(5));\r\n                this.$refs.splom?.initSPLOM();\r\n                setTimeout(() => {\r\n                    this.correlationMatrix();\r\n                }, 500);\r\n            }\r\n        },\r\n    },\r\n\r\n}\r\n</script>\r\n\r\n<style></style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./main-component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./main-component.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./main-component.vue?vue&type=template&id=c5ff300c\"\nimport script from \"./main-component.vue?vue&type=script&lang=js\"\nexport * from \"./main-component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\n\n  <div class=\"container\">\n    <b-notification v-show=\"this.settings.getDatasizeFlag\" class=\"mt-2\" type=\"is-warning\" has-icon\n      aria-close-label=\"Close notification\" role=\"alert\">\n      Due to the large size of dataset only 10,000 radom samples from dataset would be used.\n    </b-notification>\n    <div class=\"columns is-multiline\" id=\"app\">\n      <SidebarComponent ref=\"sidebar\" @updateFeatures=\"updateFeatureStats\">\n      </SidebarComponent>\n      <MainComponent ref=\"main\" :dataframe=\"this.settings.df\" @check-target=\"checkTarget()\"></MainComponent>\n    </div>\n  </div>\n\n</template>\n\n<script>\nimport SidebarComponent from \"./components/sidebar-component.vue\";\nimport MainComponent from \"./components/main-component.vue\";\nimport { settingStore } from '@/stores/settings'\n\n\nexport default {\n  name: 'App',\n  components: {\n    SidebarComponent,\n    MainComponent,\n  },\n  setup() {\n    // eslint-disable-next-line no-unused-vars\n    const settings = settingStore()\n    return { settings }\n  },\n  errorCaptured(err, vm, info) {\n    console.log(`cat EC: ${err.toString()}\\ninfo: ${info} + ${ err.stack}`);\n\n    this.$buefy.toast.open(\n      {\n        duration: 3000,\n        message: 'Something went wrong',\n        type: 'is-danger',\n      })\n    this.settings.addMessage({ message: err.toString(), type: 'danger' })\n    return false;\n  },\n  data() {\n    return {\n      dataframe: null,\n      selectedFeatures: []\n    }\n  },\n  methods: {\n    checkTarget() {\n      this.$refs.sidebar.checkmodelTask()\n    },\n    reset() {\n      this.settings.resetDF();\n    },\n    updateFeatureStats() {\n      this.$refs.main.renderStats();\n    },\n    setSelectedFeatures(e) {\n      this.selectedFeatures = e\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  margin-top: 30px;\n}\n\n.notification.is-danger {\n  background-color: hsl(348, 86%, 61%);\n  color: #fff !important;\n}\n\n.button.is-danger {\n  color: #fff !important;\n}\n\n.toast.is-danger {\n  color: #fff !important;\n}\n</style>\n","import mod from \"-!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=78c9a5f2\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\nimport style0 from \"./App.vue?vue&type=style&index=0&id=78c9a5f2&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\nimport App from './App.vue'\nimport Buefy from 'buefy'\nimport 'buefy/dist/buefy.min.css'\nimport Plotly from 'danfojs/node_modules/plotly.js-dist-min';\nimport { createPinia, PiniaVuePlugin } from 'pinia'\nimport VueMathjax from 'vue-mathjax'\nPlotly.setPlotConfig({\n  autosize: true,\n  displaylogo: false,\n  modeBarButtonsToRemove: ['resetScale2d', 'zoom2d', 'pan', 'select2d', 'resetViews', 'sendDataToCloud', 'hoverCompareCartesian', 'lasso2d', 'drawopenpath '], // Remove certain buttons from the mode bar\n});\n\nVue.config.productionTip = false\nVue.prototype.window = window;\n\nVue.use(VueMathjax)\nVue.use(Buefy)\nVue.use(PiniaVuePlugin)\nconst pinia = createPinia()\n\nnew Vue({\n  render: h => h(App),\n  pinia\n}).$mount('#app')\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.amdD = function () {\n\tthrow new Error('define cannot be used indirect');\n};","__webpack_require__.amdO = {};","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"js/\" + chunkId + \".\" + {\"167\":\"c5d69706\",\"221\":\"4a6f9d73\"}[chunkId] + \".js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/\";","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkmlfit\"] = self[\"webpackChunkmlfit\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(4631); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["render","_vm","this","_c","_self","staticClass","directives","name","rawName","value","settings","getDatasizeFlag","expression","attrs","_v","ref","on","updateFeatureStats","df","$event","checkTarget","staticRenderFns","staticStyle","_m","generateTargetDropdown","setFile","model","seed","callback","$$v","checkmodelTask","modelTarget","_l","columns","option","key","domProps","_s","imputationOption","imputationOptions","id","label","crossValidationOption","crossValidationOptions","tuneModel","modelOption","modelOptions","title","configureModel","modelConfigurations","i","type","$set","values","item","index","_e","dataScalingBehavior","explainModel","usePCAs","numberOfComponents","useHPC","training","dataframe","train","upload","class","file","datasetName","header","separator","separatorOptions","decimal","decimalOptions","handleFileSelect","sampleDataset","samplDataOptions","DataParser","parse","_content","Error","CSVParser","constructor","options","super","separators","delimiter","has_header","content","Promise","resolve","Papa","worker","transform","val","NaN","skipEmptyLines","dynamicTyping","complete","async","result","data","XLXParser","reader","FileReader","onload","arrayBuffer","array","Uint8Array","binaryString","String","fromCharCode","apply","workbook","XLSX","read","first_sheet_name","SheetNames","worksheet","Sheets","utils","sheet_to_json","raw","readAsArrayBuffer","TXTParser","length","element","j","parseFloat","replace","ParserFactory","createParser","fileType","toLowerCase","parser","settingStore","defineStore","state","counter","rawData","features","transformations","classTransformations","results","messages","activeTab","dataSizeFlag","resultActiveTab","datasetShape","count","target","isClassification","getters","items","getCounter","getUID","Math","random","toString","slice","getMessages","reverse","getDatasetName","getDatasetShape","getDataset","getRawData","currentTab","mergedClasses","getSeed","getMethodResults","getResultTab","outputs","transformationsList","classificationTask","actions","setSeed","setDatasetName","setDatasetShape","shape","resetFeatures","resetClassTransformations","resetTransformations","setDatasizeFlag","flag","resetDataset","increaseCounter","setDataframe","setRawData","addFeature","feature","scaler","findIndex","m","push","setClassTransformation","addTransformation","transformation","addResult","addMessage","message","date","Date","toLocaleString","removeResult","splice","getResultVisualizations","tables","plots","resetDF","updateFeature","removeItem","lastIndexOf","setTarget","setmodelTask","setActiveTab","setResultActiveTab","DATASET_SIZE","setup","props","msg","watch","dataset","process_file","split","initDataframe","error","$buefy","toast","open","methods","shuffle","t","floor","x","sin","$data","sample","$emit","processdDataset","dataFrame","DataFrame","idIndex","col","drop","inplace","current","fetch","then","response","blob","File","catch","console","component","FeatureCategories","CV_OPTIONS","SPLIT","NO","KFOLD","ScaleOptions","Settings","default","placeholder","for","pyodideWorker","Worker","URL","callbacks","onmessage","event","onSuccess","asyncRun","script","context","Number","MAX_SAFE_INTEGER","postMessage","python","PCA","predict","n","x_test","x_train","has_test_set","e","binarize","y","threshold","tf","util","assert","tidy","condition","greater","scalar","where","onesLike","zerosLike","encode_name","str_encoded","metrics","y_pred","labels","precision","recall","f1_micro","f1_macro","accuracy","calculateRSquared","actual","predicted","meanActual","mean_array","totalSumOfSquares","reduce","acc","pow","residualSumOfSquares","calculateMSE","actualValues","predictedValues","sumSquaredError","squaredError","meanSquaredError","scale_data","column","normalization_type","MinMaxScaler","fit","addColumn","ln","log","isNaN","StandardScaler","applyDataTransformation","column_names","find","handle_missing_values","data_frame","impute","string_columns","numeric_columns","string_column_modes","numeric_column_means","forEach","dtype","mode","getCategoricalMode","mean","fillNa","dropNa","axis","arr","categoryCount","category","undefined","modeCategory","modeCount","encode_dataset","columns_types","copy","categorical_columns","filter","Nominal","Ordinal","categoriclaFeaturesAfterEncoding","encoder","LabelEncoder","encoded_column","getDummies","includes","TSNE","plotlyImageExportConfig","toImageButtonOptions","format","height","width","scale","ChartController","_defineProperty","gaussian","u","exp","sqrt","PI","uniform","abs","triangular","biweight","triweight","Epanechnikov","color_scheme","schemeTableau10","color_scheme_sequential","interpolateRainbow","classification_target_chart","container","uniqueLabels","Set","colorIndices","map","indexToColor","indexOf","color","Highcharts","chart","credits","enabled","text","xAxis","categories","yAxis","min","plotOptions","pointPadding","borderWidth","colors","series","regression_target_chart","kde_data","ys","items_range","breaks","ss","kde","legend","verticalAlign","animation","tooltip","valueDecimals","marker","dashStyle","area","lineWidth","draw_categorical_barplot","column_values","$","append","countOccurrences","countArray","Object","entries","sort","a","b","top5","Chart","renderTo","overflow","bar","dataLabels","showInLegend","roc_chart","true_positive_rates","false_positive_rates","trace","trace2","layout","showlegend","xaxis","yaxis","Plotly","falsePositives","yTrue","yPred","one","zero","logicalAnd","equal","sum","cast","max","indexToColorSequential","normalizer_value","reshape","size","restShape","restSize","plot_tsne","is_classification","flat","tsne","Y","tsneComponents","tsne_traces","l","spacing","font","xref","boxmode","grid","rows","xgap","ygap","pattern","margin","r","xAxisKey","yAxisKey","fontSize","linecolor","linewidth","mirror","showgrid","showticklabels","tickfont","staticPlot","trueNegatives","falsePositiveRate","fp","tn","div","add","drawROC","targets","probs","thresholds","tprs","fprs","threshPredictions","as1D","fpr","dataSync","tpr","nrd","s","iqr","hexToRgb","hex","exec","parseInt","g","draw_kde","target_name","bandwidth","redrawing","default_bandwidth","toFixed","raw_values","loc","subsets","subset","document","getElementById","style","display","newColumn","createElement","className","setAttribute","addEventListener","Numerical","newBandwidth","current_class","container_id","allData","kernel_type","traces","kernelFunctions","animationDuration","visible","xanchor","autosize","responsive","modeBarButtonsToRemove","align","duration","window","dispatchEvent","Event","downloadPlot","dataUrl","href","download","body","appendChild","click","removeChild","classificationPCA","missclassifications","pca","pca_data","x_error","y_error","error_texts","real_labels","missclassificationColors","truePredsColors","join","trace1","symbol","customdata","hovertemplate","hovermode","hoverlabel","bgcolor","purge_charts","draw_pca","axes","drawScreePlot","_","explained_variances","circels","distances","pcaComponents","pca_traces","principle_components","pca_values","arrows","shapes","distance","axref","ayref","arrowside","arrowcolor","yanchor","arrowwidth","arrowhead","hovertext","ax","ay","yref","x0","y0","x1","y1","line","annotations","pad","range","cumulatedExplainedVaraince","compnentsaxis","trace3","traceorder","orientation","dash","tickmode","dtick","zeroline","rang","Array","from","drawStackedHorizontalChart","lable","barmode","regularization_plot","xs","colorway","argmax","maxIndex","currentValue","currentIndex","probabilities_boxplot","probablitiesFormatted","true_label","trueClass","classProbas","proba","prob","probablity","classIndex","outlierwidth","plotConfusionMatrix","predictedLabels","uniqueClasses","tab_index","confusionMatrix","metric","ClassificationMetric","arraySync","f1Micro","f1Macro","len","preceissions","recalls","tensorflow","dispose","metric_labels","items_labels","formatted_matrix","exporting","plotBorderWidth","linkedTo","opposite","tickLength","formatter","each","p","reversed","endOnTick","colorAxis","minColor","maxColor","getOptions","symbolHeight","useHTML","totalCount","cur","point","skip","percentage","rules","maxWidth","chartOptions","padding","plot_regularization","weights","alphas","names","serieses","alphas_formatted","connectorAllowed","yhat_plot","y_test","predictions","comparison","yLabel","tickangle","residual_plot","residuals","ScatterplotMatrix","number_of_categoricals","reject","setTimeout","unique_labels","k","set","z","opacity","unique_labels_feature","lablel_items","counts","ii","fill","column_items","unique_classes","class_frequencies","class_label","colorscale","boxplot_labels","boxtraces","box_items","concat","arr1","arr2","jStat","corrcoeff","textfont","KNNPerformancePlot","best_n","KNNPerformancePlotRegression","optimalTrainSpec","optimalTestSpec","evaluation","evaluation_train","min_y","POSITIVE_INFINITY","max_y","NEGATIVE_INFINITY","correaltoinMatrixColorscale","correlations","featuresCount","corrs","countNegatives","portionOfNegativeValues","round","correlationHeatmap","zmin","zmax","hoverongaps","showscale","ticks","side","autorange","ticksuffix","textColor","family","showarrow","dendogramPlot","linkage","originalColumns","trace4","colorbar","thickness","indices","linksLength","currentLimitY","prevLimitY","clusterY","clusterX","tickValues","dendrogramUP","dendrogramRIGHT","history","link","l0","l1","y_current","prev","curr","currentLimitX","prevLimitX","layout2","domain","showline","tickvals","tick","ticktext","xaxis2","yaxis2","coloraxis","cmin","cmax","PFIBoxplot","importances","avgs","importance","importancesMean","automargin","plotPDP","averages","grids","pfiChartId","chartContainer","classList","chartId","after","isCategorical","average","plotPDPRegression","categoricals","chartIdCategorical","traces_categoricals","bargap","drawAutoencoder","points","xIndex","yIndex","plotROC","auc","uniformSplist","numbers","parallelCoordinatePlot","labelEncoder","colorMapping","dimensions","column_name","UI","chart_controller","data_parser","get_model_settings","model_settings","model_name","classification","regression","option_value","createAlgorithmsSelect","hasOwnProperty","call","updateAlgorithmsSelect","find_selected_columns","get_all","selected_columns","checked","find_selected_columns_types","include_target","column_types","createTargetDropdown","createFeaturesDropdown","insertSpaces","string","renderDatasetStats","continuousFeatures","categoricalFeatures","continuousFeaturesStats","categoricalFeaturesStats","continuousHeaders","field","categoricalHeaders","median","std","missingValuesCount","isNa","selected","category_info","get_numeric_columns","selected_columns_types","numericColumns","get_categorical_columns","visualize","file_name","filterd_dataset","limit","innerHTML","toggle_loading_progress","show","init_tooltips","tippy","interactive","popperOptions","positionFixed","allowHTML","predictions_table_regression","table_columns","DataTable","pageLength","paging","columnDefs","bPaginate","bDestroy","removeTable","tableId","destroy","predictions_table","keys","rowCallback","row","prediction","addClass","ClassificationModel","chartController","ui","task","hasProbability","hasExplaination","helpSectionId","evaluateModel","generatePythonCode","model_import","model_fit","trim","classes","$labels","tensor","inverseTransform","LogisticRegression","summary","model_stats_matrix","y_train","X_train","X_test","regularization_type","regularization","webR","webr","init","installPackages","quiet","objs","globalEnv","bind","plotlyData","evalR","toArray","JSON","coefs","stds","z_scores","p_values","probabities","pred","confidence_intervals","confidence_intervals_row_names","aic","toNumber","best_fit_min","best_fit_1se","lambda_min","lambda_1se","cols","unshift","min_ols_columns","se_ols_columns","coef","pval","placeholder_row","start","end","api","footer","html","info","search","ordering","searching","y_classes","conf_intervals","traces_params","ols_y","error_x","y_classes_min","conf_intervals_min","lasso_y","_1se_y","y_classes_1se","conf_intervals_1se","lambda","params","predictor","param","coefficient","lambdas","textangle","RegressionModel","mse","rsquared","LinearRegression","bse","pvalues","predictions1se","predictionsmin","residuals_ols","residuals_1se","residuals_min","bic","r2","reg_plot","coefs_plot","errors_plot","qqplot_ols_plot","qqplot_1se_plot","qqplot_min_plot","td","cellData","rowData","css","BSplineRegression","knots","explain","degree","pdp_averages","pdp_grid","filename","lineno","SupportVectorMachine","opt","kernel","bias","c","__","pdpIndex","SupportVectorMachineRegression","chartControler","gamma","KNNModel","k_neighbor_results","KNNRegressor","RandomForest","rf_type","criteria","max_features","num_estimators","estimators","max_depth","depth","num_classes","probas","RandomForestRegressor","NaiveBayes","nb_type","priors","smoothing","laplace","DiscriminantAnalysis","lda_type","PolynomialRegression","columnNames","KernelRegression","types","Boosting","booster","objective","eta","BoostingRegression","ModelFactory","createModel","modelName","logistic_regression","k_nearest_neighbour","random_forest","support_vector_machine","boosting","discriminant_analysis","naive_bayes","linear_regression","polynomial_regression","kernel_regression","bspline_regression","components","UploadComponent","configureFeatures","featureTypeOptions","featureSettings","modelSettings","formdata","FormData","axios","post","headers","updateFeatures","toggleTraining","getDefaultModelConfiguration","dtypes","selectedFeatures","targetFeature","selectedClasses","newClass","cls","cross_validation_setting","splitData","performances","kfoldSplit","encoded_y","encoded_y_test","encodeTarget","model_factory","pca_train","___","____","pca_test","showProbas","snapshot","xt","yt","xFeatures","modelTask","stringify","toJSON","res","created","stepSize","ceil","train_bound","test_bound","iloc","fold","lowerLimit","upperLimit","train_bound_lower","train_bound_upper","x_train_upper","y_train_upper","x_train_lower","y_train_lower","dfList","resize","isActive","applyChanges","sampleData","datasetColumns","method","loading","correlationMatrix","loadingPCA","drawPCA","pcaVarianceData","downloadExplainedVariance","hasPCA","findPCA","pcaData","downloadPCA","downloadPCAPlot","componentsTSNE","seedTSNE","loadingTSNE","findTSNE","hiddenLayerSize","autoEncoderX","autoEncoderY","iterations","encoderActivationFunction","decoderActivationFunction","loadingAutoEncoder","autoEncoder","pcaContainers","prepareData","drawExplainedVariance","$toCSV","filePath","varianceData","Components","ExplainedVariace","sequential","unitsLength","layers","dense","units","batchInputShape","activation","kernelInitializer","biasInitializer","decoder","compile","optimizer","loss","tensor2d","epochs","batchSize","validationSplit","tidyWrapper","ret","errorCaptured","activeResult","compareResultsDraw","metricsCollection","compare","deleteResult","scalerLabel","deleteTab","toggleHelp","downloadPythonCode","hide","if","pdpFeature","fileName","showResult","intervalId","jobProgressTries","vm","Blob","get","setInterval","pdp_avgs","pfi","clearInterval","err","el","scrollIntoView","behavior","pyCode","url","createObjectURL","revokeObjectURL","updatePartialDependencePlot","handler","immediate","unmounted","ClassificationViewComponent","RegressionViewComponent","computed","isClassication","comparisonMetric","baseMetrics","visitedTabs","xTicks","fillMetrics","compareResults","methodResults","draw","v","table","plot","showMethodDetails","alert","downlaodSPLOM","column_width","scaleData","classesInfo","classesInfoColumns","row-class","isLoading","update","ParallelCoordinatePlot","validTransformations","PCPComponent","updateClassesInfo","targetValues","samplesLength","dispalySPLOM","$refs","coordinate_plot","reset","transformationInfo","initSPLOM","formula","sserror","Clustermap","PCAComponent","ResultsComponent","SPLOMComponent","MethodsTabComponent","checkedRows","img","continuousFeaturesColumns","categoricalFeaturesColumns","hasCorrelationMatrix","matrix","Matrix","correlation","mtx","dendogram","orderedMatrix","renderStats","categoricalColumns","sclaer","datasetStats","head","splom","SidebarComponent","MainComponent","stack","sidebar","main","setSelectedFeatures","displaylogo","Vue","config","productionTip","prototype","use","VueMathjax","Buefy","PiniaVuePlugin","pinia","createPinia","h","App","$mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","amdD","amdO","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","every","getter","__esModule","d","definition","o","defineProperty","enumerable","chunkId","globalThis","Function","obj","prop","Symbol","toStringTag","nmd","paths","children","baseURI","self","location","installedChunks","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}